<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>hover 基本應用</title>
    <link href="/2023/01/21/hoverBasic/"/>
    <url>/2023/01/21/hoverBasic/</url>
    
    <content type="html"><![CDATA[<h1 id="hover-的應用"><a href="#hover-的應用" class="headerlink" title="hover 的應用"></a>hover 的應用</h1><p>hover 是一種常見的網頁滑鼠互動，用法十分簡單，但是卻可以變化出各種形式。以下筆記幾種常見的用法：</p><h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><p>HTML元素先設定基本的樣式，再用 <code>選取器:hover&#123;...&#125;</code> 設定滑鼠滑上元素後變化的樣式。</p><figure><div class="code-wrapper"><pre class="line-numbers language-htmlmixed" data-language="htmlmixed"><code class="language-htmlmixed">&lt;div class&#x3D;&quot;box&quot;&gt;&lt;&#x2F;div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.box</span> <span class="token punctuation">&#123;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> 100px auto<span class="token punctuation">;</span>  <span class="token property">transition</span><span class="token punctuation">:</span> 0.5s<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> #ffa7de<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.box:hover</span> <span class="token punctuation">&#123;</span>  <span class="token property">background</span><span class="token punctuation">:</span> #ffd592<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><iframe height="300" style="width: 100%;" scrolling="no" title="Untitled" src="https://codepen.io/popeye_ux/embed/qByprwM?default-tab=html%2Cresult" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true">  See the Pen <a href="https://codepen.io/popeye_ux/pen/qByprwM">  Untitled</a> by POPEYE (<a href="https://codepen.io/popeye_ux">@popeye_ux</a>)  on <a href="https://codepen.io">CodePen</a>.</iframe><p>樣式的變換可以是：</p><ul><li>opacity:透明度的變化。</li><li>border-radius：如果要讓正方形的 div 變成圓的，只要設定<code>:hover&#123;border-radius: 50%&#125;</code> 即可做到。</li><li>transform: 可以讓 HTML 元素放大、縮小、旋轉，範例如下：</li></ul><figure><div class="code-wrapper"><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.box</span> <span class="token punctuation">&#123;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> 100px auto<span class="token punctuation">;</span>  <span class="token property">transition</span><span class="token punctuation">:</span> 0.5s<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> #ffa7de<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* transform 設定 放大1.2倍,旋轉 45 度*/</span><span class="token selector">.box:hover</span> <span class="token punctuation">&#123;</span>  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">scale</span><span class="token punctuation">(</span>1.2<span class="token punctuation">)</span> <span class="token function">rotate</span><span class="token punctuation">(</span>45deg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><iframe height="300" style="width: 100%;" scrolling="no" title="hover:basic" src="https://codepen.io/popeye_ux/embed/yLqpbYo?default-tab=html%2Cresult" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true">  See the Pen <a href="https://codepen.io/popeye_ux/pen/yLqpbYo">  hover:basic</a> by POPEYE (<a href="https://codepen.io/popeye_ux">@popeye_ux</a>)  on <a href="https://codepen.io">CodePen</a>.</iframe><h2 id="hover-結合-keyframes-與-animation"><a href="#hover-結合-keyframes-與-animation" class="headerlink" title="hover 結合 keyframes 與 animation"></a>hover 結合 keyframes 與 animation</h2><p>我們來做一個滑鼠移到方塊上，方塊就會搖擺的效果。</p><figure><div class="code-wrapper"><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.box</span> <span class="token punctuation">&#123;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> 50px auto<span class="token punctuation">;</span>  <span class="token property">transition</span><span class="token punctuation">:</span> 0.5s<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> #ffa7de<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* 設定搖擺的過程*/</span><span class="token atrule"><span class="token rule">@keyframes</span> swing</span> <span class="token punctuation">&#123;</span>  <span class="token selector">15%</span> <span class="token punctuation">&#123;</span><span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateX</span><span class="token punctuation">(</span>5px<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>  <span class="token selector">40%</span> <span class="token punctuation">&#123;</span><span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateX</span><span class="token punctuation">(</span>-5px<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>  <span class="token selector">65%</span> <span class="token punctuation">&#123;</span><span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateX</span><span class="token punctuation">(</span>2px<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>  <span class="token selector">85%</span> <span class="token punctuation">&#123;</span><span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateX</span><span class="token punctuation">(</span>-2px<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>  <span class="token selector">100%</span> <span class="token punctuation">&#123;</span><span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateX</span><span class="token punctuation">(</span>0px<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token comment">/* 把搖擺的過程用 animation 加到 hover 上*/</span><span class="token selector">.box:hover</span> <span class="token punctuation">&#123;</span>  <span class="token property">animation</span><span class="token punctuation">:</span> swing 1s 1<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><iframe height="300" style="width: 100%;" scrolling="no" title="hover:transform" src="https://codepen.io/popeye_ux/embed/yLqpbXp?default-tab=html%2Cresult" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true">  See the Pen <a href="https://codepen.io/popeye_ux/pen/yLqpbXp">  hover:transform</a> by POPEYE (<a href="https://codepen.io/popeye_ux">@popeye_ux</a>)  on <a href="https://codepen.io">CodePen</a>.</iframe><h2 id="hover-結合偽元素的應用"><a href="#hover-結合偽元素的應用" class="headerlink" title="hover 結合偽元素的應用"></a>hover 結合偽元素的應用</h2><p>一般我們常常看到 navbar 的選項在滑鼠移上去之後，下方會有一條線跑出來。這是利用 <code>::before</code> 與 <code>::after</code> 偽元素加上hover所做出來的效果。</p><p><code>div</code> 方塊 <code>position</code> 要設定為 <code>relative</code>，而 <code>before</code> 與 <code>after</code> 偽元素 position 要設定為 absolute，width 要設定為 0，hover 之後設定為 100%，這樣就會有互動效果產生。</p><figure><div class="code-wrapper"><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/* 加上 position: relative */</span><span class="token selector">.box</span> <span class="token punctuation">&#123;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> 50px auto<span class="token punctuation">;</span>  <span class="token property">transition</span><span class="token punctuation">:</span> 0.5s<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> #ffa7de<span class="token punctuation">;</span>  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* 設定偽元素的寬度為 0 ，position 為 absolute */</span><span class="token selector">.box:before</span> <span class="token punctuation">&#123;</span>  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 0%<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> #ff5e33<span class="token punctuation">;</span>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token property">transition</span><span class="token punctuation">:</span> all 0.3s linear<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.box:after</span> <span class="token punctuation">&#123;</span>  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 0%<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> #ff5e33<span class="token punctuation">;</span>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token property">bottom</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token property">transition</span><span class="token punctuation">:</span> all 0.3s linear<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* 設定偽元素在滑鼠移上去之後，寬度變為 100% */</span><span class="token selector">.box:hover::after</span> <span class="token punctuation">&#123;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.box:hover::before</span> <span class="token punctuation">&#123;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* 第二個方塊，滑鼠移上去之後，由下方的中間變出線條 */</span><span class="token selector">.box2</span> <span class="token punctuation">&#123;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> 50px auto<span class="token punctuation">;</span>  <span class="token property">transition</span><span class="token punctuation">:</span> 0.5s<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> #ffa7de<span class="token punctuation">;</span>  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.box2:after</span> <span class="token punctuation">&#123;</span>  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> #ff5e33<span class="token punctuation">;</span>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token property">bottom</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token property">transition</span><span class="token punctuation">:</span> transform 0.5s ease<span class="token punctuation">;</span>  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">scaleX</span><span class="token punctuation">(</span>0<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.box2:hover::after</span> <span class="token punctuation">&#123;</span>  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">scaleX</span><span class="token punctuation">(</span>1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><iframe height="300" style="width: 100%;" scrolling="no" title="hover: animation" src="https://codepen.io/popeye_ux/embed/gOjoWBL?default-tab=html%2Cresult" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true">  See the Pen <a href="https://codepen.io/popeye_ux/pen/gOjoWBL">  hover: animation</a> by POPEYE (<a href="https://codepen.io/popeye_ux">@popeye_ux</a>)  on <a href="https://codepen.io">CodePen</a>.</iframe>]]></content>
    
    
    <categories>
      
      <category>CSS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSS, hover</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>target 進階：頁籤切換顯示內容</title>
    <link href="/2023/01/20/cssTargetTab1/"/>
    <url>/2023/01/20/cssTargetTab1/</url>
    
    <content type="html"><![CDATA[<p>target 是一個虛擬類別選擇器，用途在於讓我們設定目標對象的樣式。</p><p>CSS 的寫法為：</p><figure><div class="code-wrapper"><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">選擇器：target</span><span class="token punctuation">&#123;</span>.....<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><p>也就是當有人點了<code>錨點為 hello 的 a 連結</code>，則透過 <code> #hello:target&#123;……..&#125;</code> 就可以改變 id 為 hello 的 HTML 元素樣式。</p><p>在這個範例中必須懂的知識點：</p><ul><li>選取 [ 擁有特定屬性 ]的選擇器<br><code> img[alt] &#123;……..&#125;</code> 為改變有 <code>alt</code> 屬性的圖片樣式。</li><li>選取對象A ~ 選取對象B：意指選到 A 後面所有同一層的 B</li><li>選取對象A &gt; 選取對象B：意指僅選到 A 的下一層的 B</li></ul><h2 id="第一步：設定-HTML-結構，「頁籤按鈕」與「內容」連動"><a href="#第一步：設定-HTML-結構，「頁籤按鈕」與「內容」連動" class="headerlink" title="第一步：設定 HTML 結構，「頁籤按鈕」與「內容」連動"></a>第一步：設定 HTML 結構，「頁籤按鈕」與「內容」連動</h2><ol><li>點選 <code>&lt;li&gt;&lt;a href=&quot;#tab-1&quot;&gt;Tab 1&lt;/a&gt;&lt;/li&gt;</code> 標籤來觸發 <code>&lt;span id=&quot;tab-1&quot;&gt;1&lt;/span&gt;</code></li><li><code>&lt;span id=&quot;tab-1&quot;&gt;1&lt;/span&gt;</code> 利用 <code>:target</code> 反過來改變 <code>&lt;li&gt;&lt;a href=&quot;#tab-1&quot;&gt;Tab 1&lt;/a&gt;&lt;/li&gt;</code>與 <code>&lt;div class=&quot;tab-content-1&quot;&gt;&lt;p&gt;內容-1&lt;/p&gt;&lt;/div&gt; 的樣式。</code></li></ol><p>HTML 結構如下：</p><figure><div class="code-wrapper"><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tab-1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tab-2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tab-3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tab-4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tab<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!–</span> <span class="token attr-name">頁籤按鈕</span> <span class="token attr-name">–</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#tab-1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Tab 1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#tab-2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Tab 2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#tab-3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Tab 3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#tab-4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Tab 4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!–</span> <span class="token attr-name">頁籤的內容區塊</span> <span class="token attr-name">–</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tab-content-1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>內容-1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tab-content-2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>內容-2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tab-content-3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>內容-3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tab-content-4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>內容-4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>CSS 結構如下：</p><figure><div class="code-wrapper"><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/* span:target */</span><span class="token selector">#tab-1:target,#tab-2:target,#tab-3:target,#tab-4:target</span><span class="token punctuation">&#123;</span><span class="token property">border</span><span class="token punctuation">:</span> solid 1px red<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* /頁籤變換 選到 #tab-1 後面 #tab 後面 ul li a標籤屬性為 "#tab-x"的元素/ */</span><span class="token selector">#tab-1:target ~ #tab > ul li a[href$="#tab-1"],#tab-2:target ~ #tab > ul li a[href$="#tab-2"],#tab-3:target ~ #tab > ul li a[href$="#tab-3"],#tab-4:target ~ #tab > ul li a[href$="#tab-4"]</span> <span class="token punctuation">&#123;</span><span class="token property">border</span><span class="token punctuation">:</span> solid 1px blue<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* /頁籤內容顯示 / */</span><span class="token selector">#tab-1:target ~ #tab > div.tab-content-1,#tab-2:target ~ #tab > div.tab-content-2,#tab-3:target ~ #tab > div.tab-content-3,#tab-4:target ~ #tab > div.tab-content-4</span> <span class="token punctuation">&#123;</span><span class="token property">border</span><span class="token punctuation">:</span> solid 1px black<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* 頁籤的樣式設定 */</span><span class="token selector">#tab</span><span class="token punctuation">&#123;</span><span class="token property">width</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span><span class="token property">background</span><span class="token punctuation">:</span> lightblue<span class="token punctuation">;</span><span class="token property">border</span><span class="token punctuation">:</span> solid 4px pink<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* 頁籤ul */</span><span class="token selector">#tab>ul</span><span class="token punctuation">&#123;</span><span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span><span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span><span class="token property">padding</span><span class="token punctuation">:</span> 10px 20px 0 20px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">#tab>ul>li</span><span class="token punctuation">&#123;</span><span class="token property">list-style-type</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* 設定頁籤內的樣式 */</span><span class="token selector">#tab>ul>li>a</span><span class="token punctuation">&#123;</span><span class="token property">text-decoration</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token property">font-size</span><span class="token punctuation">:</span> 13px<span class="token punctuation">;</span><span class="token property">color</span><span class="token punctuation">:</span> #333<span class="token punctuation">;</span><span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span><span class="token property">padding</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span><span class="token property">margin-left</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><iframe height="300" style="width: 100%;" scrolling="no" title="target 進階應用" src="https://codepen.io/popeye_ux/embed/dyjZqGe?default-tab=html%2Cresult" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true">  See the Pen <a href="https://codepen.io/popeye_ux/pen/dyjZqGe">  target 進階應用</a> by POPEYE (<a href="https://codepen.io/popeye_ux">@popeye_ux</a>)  on <a href="https://codepen.io">CodePen</a>.</iframe><h2 id="第二步：設定隱藏與切換顯示"><a href="#第二步：設定隱藏與切換顯示" class="headerlink" title="第二步：設定隱藏與切換顯示"></a>第二步：設定隱藏與切換顯示</h2><ol><li>設定所有內容區塊為隱藏。</li><li>設定初始的時候 <code>tab1</code> 為啟動狀態，而 內容-1 為顯示狀態。</li><li>設定點選其他標籤時切換內容</li></ol><figure><div class="code-wrapper"><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/* span:target */</span><span class="token selector">#tab-1:target,#tab-2:target,#tab-3:target,#tab-4:target</span><span class="token punctuation">&#123;</span><span class="token property">border</span><span class="token punctuation">:</span> solid 1px red<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* /頁籤變換 選到 #tab-1 後面 #tab 後面 ul li a標籤屬性為 "#tab-x"的元素/ */</span><span class="token selector">#tab-1:target ~ #tab > ul li a[href$="#tab-1"],#tab-2:target ~ #tab > ul li a[href$="#tab-2"],#tab-3:target ~ #tab > ul li a[href$="#tab-3"],#tab-4:target ~ #tab > ul li a[href$="#tab-4"]</span> <span class="token punctuation">&#123;</span><span class="token property">border</span><span class="token punctuation">:</span> solid 1px blue<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* /頁籤內容顯示 / */</span><span class="token selector">#tab-1:target ~ #tab > div.tab-content-1,#tab-2:target ~ #tab > div.tab-content-2,#tab-3:target ~ #tab > div.tab-content-3,#tab-4:target ~ #tab > div.tab-content-4</span> <span class="token punctuation">&#123;</span><span class="token property">border</span><span class="token punctuation">:</span> solid 1px black<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">#tab</span><span class="token punctuation">&#123;</span><span class="token property">width</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span><span class="token property">background</span><span class="token punctuation">:</span> lightblue<span class="token punctuation">;</span><span class="token property">border</span><span class="token punctuation">:</span> solid 4px pink<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* 頁籤ul */</span><span class="token selector">#tab>ul</span><span class="token punctuation">&#123;</span><span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span><span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span><span class="token property">padding</span><span class="token punctuation">:</span> 10px 20px 0 20px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">#tab>ul>li</span><span class="token punctuation">&#123;</span><span class="token property">list-style-type</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* 設定頁籤內的樣式 */</span><span class="token selector">#tab>ul>li>a</span><span class="token punctuation">&#123;</span><span class="token property">text-decoration</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token property">font-size</span><span class="token punctuation">:</span> 13px<span class="token punctuation">;</span><span class="token property">color</span><span class="token punctuation">:</span> #333<span class="token punctuation">;</span><span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span><span class="token property">padding</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span><span class="token property">margin-left</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* 第二步由此開始 */</span><span class="token comment">/* /所有內容區塊隱藏起來/ */</span><span class="token selector">#tab>div</span> <span class="token punctuation">&#123;</span><span class="token property">clear</span><span class="token punctuation">:</span>both<span class="token punctuation">;</span><span class="token property">padding</span><span class="token punctuation">:</span>0 15px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span>0<span class="token punctuation">;</span><span class="token property">overflow</span><span class="token punctuation">:</span>hidden<span class="token punctuation">;</span><span class="token property">visibility</span><span class="token punctuation">:</span>hidden<span class="token punctuation">;</span><span class="token property">-webkit-transition</span><span class="token punctuation">:</span>all .4s ease-in-out<span class="token punctuation">;</span><span class="token property">-moz-transition</span><span class="token punctuation">:</span>all .4s ease-in-out<span class="token punctuation">;</span><span class="token property">-ms-transition</span><span class="token punctuation">:</span>all .4s ease-in-out<span class="token punctuation">;</span><span class="token property">-o-transition</span><span class="token punctuation">:</span>all .4s ease-in-out<span class="token punctuation">;</span><span class="token property">transition</span><span class="token punctuation">:</span>all .4s ease-in-out<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* /第一筆的底色，點擊tab1以外的標籤會變色/ */</span><span class="token selector">span:target ~ #tab > ul li:first-child a</span> <span class="token punctuation">&#123;</span><span class="token property">background</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* :first-of-type 代表本節點為兄弟節點中第一個此類型節點。 點擊tab1以外其他標籤內容-1隱藏 */</span><span class="token selector">span:target ~ #tab > div:first-of-type</span> <span class="token punctuation">&#123;</span><span class="token property">visibility</span><span class="token punctuation">:</span>hidden<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span>0px<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> purple<span class="token punctuation">;</span><span class="token property">padding</span><span class="token punctuation">:</span>0 15px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* /頁籤:點擊變換&amp;第一筆還未點擊的初始化樣式/ */</span><span class="token comment">/* 下面的是點擊才會變色 */</span><span class="token selector">span ~ #tab > ul li:first-child a,#tab-1:target ~ #tab > ul li a[href$="#tab-1"],#tab-2:target ~ #tab > ul li a[href$="#tab-2"],#tab-3:target ~ #tab > ul li a[href$="#tab-3"],#tab-4:target ~ #tab > ul li a[href$="#tab-4"]</span> <span class="token punctuation">&#123;</span><span class="token property">background</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token comment">/* /頁籤內容顯示&amp;設定第一筆為顯示/ */</span><span class="token selector">span ~ #tab > div:first-of-type,#tab-1:target ~ #tab > div.tab-content-1,#tab-2:target ~ #tab > div.tab-content-2,#tab-3:target ~ #tab > div.tab-content-3,#tab-4:target ~ #tab > div.tab-content-4</span> <span class="token punctuation">&#123;</span><span class="token property">visibility</span><span class="token punctuation">:</span>visible<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span>200px<span class="token punctuation">;</span><span class="token property">background</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><iframe height="300" style="width: 100%;" scrolling="no" title="target 進階應用2" src="https://codepen.io/popeye_ux/embed/WNKXaoO?default-tab=html%2Cresult" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true">  See the Pen <a href="https://codepen.io/popeye_ux/pen/WNKXaoO">  target 進階應用2</a> by POPEYE (<a href="https://codepen.io/popeye_ux">@popeye_ux</a>)  on <a href="https://codepen.io">CodePen</a>.</iframe><p>最後記得把 <code>&lt;span&gt;</code> 設為 <code>display:none</code></p>]]></content>
    
    
    <categories>
      
      <category>CSS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSS, target</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>用 target 選擇器改變其他 HTML 元素的樣式</title>
    <link href="/2023/01/19/cssTarget-1/"/>
    <url>/2023/01/19/cssTarget-1/</url>
    
    <content type="html"><![CDATA[<p>target 是一個虛擬類別選擇器，用途在於讓我們設定目標對象的樣式。</p><p>CSS 的寫法如下：</p><figure><div class="code-wrapper"><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.類別選擇器：target</span><span class="token punctuation">&#123;</span>.....<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="target-基礎應用"><a href="#target-基礎應用" class="headerlink" title="target 基礎應用"></a>target 基礎應用</h3><p>在這個範例中，我們藉由 <code>&lt;a href=&quot;#top&quot;&gt;</code> 來動態地操控 <code>id</code> 是 <code>top</code> 的 HTML 元素樣式。</p><figure><div class="code-wrapper"><pre class="line-numbers language-htmlmixed" data-language="htmlmixed"><code class="language-htmlmixed">&lt;a href&#x3D;&quot;#top&quot;&gt;上面變色&lt;&#x2F;a&gt;&lt;a href&#x3D;&quot;#&quot;&gt;不變色&lt;&#x2F;a&gt;&lt;a href&#x3D;&quot;#bottom&quot;&gt;下面變色&lt;&#x2F;a&gt;&lt;div class&#x3D;&quot;change&quot; id&#x3D;&quot;top&quot;&gt;上面變色&lt;&#x2F;div&gt;&lt;div class&#x3D;&quot;change&quot; id&#x3D;&quot;bottom&quot;&gt;下面變色&lt;&#x2F;div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p><code>&lt;a href=&quot;#top&quot;&gt;</code> 對應的 <code>target</code>  就是 id 為 <code>top</code> 的 HTML 元素。 </p><figure><div class="code-wrapper"><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.change:target</span><span class="token punctuation">&#123;</span>  <span class="token property">background</span><span class="token punctuation">:</span> orange<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span>200px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>當我們點選其他連結的時候，連結對應 <code>id</code> 的元素也會改變樣式，同時其他元素的樣式會恢復原狀。</p><iframe height="300" style="width: 100%;" scrolling="no" title=":target" src="https://codepen.io/popeye_ux/embed/JjBOdNg?default-tab=html%2Cresult" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true">  See the Pen <a href="https://codepen.io/popeye_ux/pen/JjBOdNg">  :target</a> by POPEYE (<a href="https://codepen.io/popeye_ux">@popeye_ux</a>)  on <a href="https://codepen.io">CodePen</a>.</iframe><h3 id="target-進階應用：燈箱效果"><a href="#target-進階應用：燈箱效果" class="headerlink" title="target 進階應用：燈箱效果"></a>target 進階應用：燈箱效果</h3><p>利用 <code>&lt;a href=&quot;#example1&quot;&gt;</code> 來打開燈箱。</p><p>然後用 <code>&lt;a href=&quot;#&quot; class=&quot;close&quot;&gt;</code> 來關掉燈箱效果。</p><figure><div class="code-wrapper"><pre class="line-numbers language-htmlmixed" data-language="htmlmixed"><code class="language-htmlmixed">&lt;ul&gt;  &lt;li&gt;&lt;a href&#x3D;&quot;#example1&quot;&gt;打開燈箱 #1&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;  &lt;li&gt;&lt;a href&#x3D;&quot;#example2&quot;&gt;打開燈箱 #2&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;&lt;&#x2F;ul&gt;&lt;div class&#x3D;&quot;lightbox&quot; id&#x3D;&quot;example1&quot;&gt;  &lt;figure&gt;    &lt;!-- 關閉燈箱效果 --&gt;    &lt;a href&#x3D;&quot;#&quot; class&#x3D;&quot;close&quot;&gt;&lt;&#x2F;a&gt;    &lt;figcaption&gt;我是燈箱一&lt;&#x2F;figcaption&gt;  &lt;&#x2F;figure&gt;&lt;&#x2F;div&gt;&lt;div class&#x3D;&quot;lightbox&quot; id&#x3D;&quot;example2&quot;&gt;  &lt;figure&gt;    &lt;!-- 關閉燈箱效果 --&gt;    &lt;a href&#x3D;&quot;#&quot; class&#x3D;&quot;close&quot;&gt;&lt;&#x2F;a&gt;    &lt;figcaption&gt;我是燈箱二&lt;&#x2F;figcaption&gt;  &lt;&#x2F;figure&gt;&lt;&#x2F;div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/* 先把燈箱設為 不顯示 */</span><span class="token selector">.lightbox</span> <span class="token punctuation">&#123;</span>  <span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* 利用 target 來打開燈箱 */</span><span class="token selector">.lightbox:target</span> <span class="token punctuation">&#123;</span>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>  <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>  <span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* Lightbox content */</span><span class="token selector">.lightbox figcaption</span> <span class="token punctuation">&#123;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 25rem<span class="token punctuation">;</span>  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>  <span class="token property">padding</span><span class="token punctuation">:</span> 1.5em<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> lightblue<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* Close button */</span><span class="token selector">.lightbox .close</span> <span class="token punctuation">&#123;</span>  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>  <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.lightbox .close::after</span> <span class="token punctuation">&#123;</span>  <span class="token property">right</span><span class="token punctuation">:</span> -1rem<span class="token punctuation">;</span>  <span class="token property">top</span><span class="token punctuation">:</span> -1rem<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 2rem<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 2rem<span class="token punctuation">;</span>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>  <span class="token property">z-index</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>  <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>  <span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> black<span class="token punctuation">;</span>  <span class="token property">border-radius</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span>  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">"×"</span><span class="token punctuation">;</span>  <span class="token property">cursor</span><span class="token punctuation">:</span> pointer<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* Lightbox overlay */</span><span class="token selector">.lightbox .close::before</span> <span class="token punctuation">&#123;</span>  <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>  <span class="token property">position</span><span class="token punctuation">:</span> fixed<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span>0<span class="token punctuation">,</span>0<span class="token punctuation">,</span>.7<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">;</span>  <span class="token property">cursor</span><span class="token punctuation">:</span> default<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><iframe height="300" style="width: 100%;" scrolling="no" title="Pure-CSS lightbox" src="https://codepen.io/popeye_ux/embed/zYLPGXO?default-tab=html%2Cresult" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true">  See the Pen <a href="https://codepen.io/popeye_ux/pen/zYLPGXO">  Pure-CSS lightbox</a> by POPEYE (<a href="https://codepen.io/popeye_ux">@popeye_ux</a>)  on <a href="https://codepen.io">CodePen</a>.</iframe>]]></content>
    
    
    <categories>
      
      <category>CSS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSS, target</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>computed 的簡單任務--只讀不寫</title>
    <link href="/2023/01/14/vue-computed-1/"/>
    <url>/2023/01/14/vue-computed-1/</url>
    
    <content type="html"><![CDATA[<h2 id="甚麼是-Computed"><a href="#甚麼是-Computed" class="headerlink" title="甚麼是 Computed"></a>甚麼是 Computed</h2><p>在 Vue 中有一個叫 <code>computed</code> 的神奇方法，它可以觀察在<code>data</code>的變數，一旦變數有了改變，就會去取變數來運算，產生一個新的值呈現在畫面上，而這個新的值不會寫回 Option API 的 <code>data</code> 中。</p><p>先來個簡單的計算，看看它神奇的地方：<br>Computed 去觀察 <code>num</code> 跟 <code>price</code> 這兩個資料，一但數值有變化，就算一個新的數值到畫面上。<br>HTML 這樣寫：</p><figure><div class="code-wrapper"><pre class="line-numbers language-htmlmixed" data-language="htmlmixed"><code class="language-htmlmixed">&lt;div id&#x3D;&quot;app&quot;&gt;  &lt;h3&gt;計算機&lt;&#x2F;h3&gt;  &lt;div&gt;    數量: &#123;&#123;num&#125;&#125; &lt;br&gt;    &lt;input type&#x3D;&quot;text&quot; v-model.num&#x3D;&quot;num&quot;&gt;  &lt;&#x2F;div&gt;  &lt;div&gt;    價格: &#123;&#123;price&#125;&#125; &lt;br&gt;    &lt;input type&#x3D;&quot;text&quot; v-model.num&#x3D;&quot;price&quot;&gt;  &lt;&#x2F;div&gt;  &lt;!--  &#123;&#123;&#125;&#125; 需要與 computed 內的函式同名  --&gt;  總價(表達式 num * price ) : &#123;&#123; total &#125;&#125; &lt;br&gt;&lt;&#x2F;div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>JavaScript 這樣寫：</p><figure><div class="code-wrapper"><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">message</span><span class="token operator">:</span><span class="token string">''</span><span class="token punctuation">,</span>      <span class="token literal-property property">num</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span>      <span class="token literal-property property">price</span><span class="token operator">:</span><span class="token number">100</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">computed</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>    <span class="token comment">//函式需與在 HTML 中的觀察對象 &#123;&#123;&#125;&#125; 相同名稱</span>    <span class="token function">total</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//可以同時觀察多個對象，在這裡同時觀察 num 與 price</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>num <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>price    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>Vue<span class="token punctuation">.</span><span class="token function">createApp</span><span class="token punctuation">(</span>app<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><iframe height="300" style="width: 100%;" scrolling="no" title="vue  " src="https://codepen.io/popeye_ux/embed/GRBEeRY?default-tab=html%2Cresult" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true">  See the Pen <a href="https://codepen.io/popeye_ux/pen/GRBEeRY">  vue  </a> by POPEYE (<a href="https://codepen.io/popeye_ux">@popeye_ux</a>)  on <a href="https://codepen.io">CodePen</a>.</iframe><h3 id="Computed-的特性："><a href="#Computed-的特性：" class="headerlink" title="Computed 的特性："></a>Computed 的特性：</h3><ul><li>在大部分情境中(Getter)，<strong>只讀不寫</strong>，一旦在 <code>data</code> 中，<code>Computed</code> 所觀察的對象有變化，就會進行運算，然後產生一個值渲染到畫面上，而這個新的值並不會寫回 <code>data</code>。</li><li>可以同時監聽多個變數，只要其中一個改變，就會重新運算。</li><li>沒有被 <code>Computed</code> 監聽的變數不會觸發 computed。 </li><li>computed 是一個物件。</li></ul><h2 id="Computed-和-利用兩對大括號渲染運算結果-的比較"><a href="#Computed-和-利用兩對大括號渲染運算結果-的比較" class="headerlink" title="Computed 和 利用兩對大括號渲染運算結果 的比較"></a>Computed 和 利用兩對大括號渲染運算結果 的比較</h2><p>當然也可以在 HTML 中加入 <code>&#123;&#123; 對應的資料名稱 &#125;&#125;</code> ，就可以讓畫面與資料連動，只是如果相同的資料要運用在多個地方就要反覆去寫相同的<code>&#123;&#123;運算式&#125;&#125;</code>。</p><p>HTML 這樣寫：</p><figure><div class="code-wrapper"><pre class="line-numbers language-htmlmixed" data-language="htmlmixed"><code class="language-htmlmixed">&lt;div id&#x3D;&quot;app&quot;&gt;  &lt;h3&gt;計算機&lt;&#x2F;h3&gt;   &lt;div&gt;      數量: &#123;&#123;num&#125;&#125; &lt;br&gt;    &lt;input type&#x3D;&quot;text&quot; v-model.num&#x3D;&quot;num1&quot;&gt;   &lt;&#x2F;div&gt;   &lt;div&gt;      價格: &#123;&#123;price&#125;&#125; &lt;br&gt;    &lt;input type&#x3D;&quot;text&quot; v-model.num&#x3D;&quot;price&quot;&gt;   &lt;&#x2F;div&gt;&lt;!--  &#123;&#123;&#125;&#125; 中可以放入表達式  --&gt;  總價(表達式 num1 * price ) &#123;&#123; num * price &#125;&#125; &lt;br&gt;&lt;&#x2F;div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>JavaScript 這樣寫：</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">num</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span>      <span class="token literal-property property">price</span><span class="token operator">:</span><span class="token number">0</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>Vue<span class="token punctuation">.</span><span class="token function">createApp</span><span class="token punctuation">(</span>app<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><iframe height="300" style="width: 100%;" scrolling="no" title="Vue methods 與  computed" src="https://codepen.io/popeye_ux/embed/jOpyVdm?default-tab=html%2Cresult" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true">  See the Pen <a href="https://codepen.io/popeye_ux/pen/jOpyVdm">  Vue methods 與  computed</a> by POPEYE (<a href="https://codepen.io/popeye_ux">@popeye_ux</a>)  on <a href="https://codepen.io">CodePen</a>.</iframe><h2 id="在-methods-中使用函式運算"><a href="#在-methods-中使用函式運算" class="headerlink" title="在 methods 中使用函式運算"></a>在 methods 中使用函式運算</h2><p>如果要重複運算相同的資料，<code>methods</code> 也可以做到，我們可以在 <code>methods</code> 中使用函式，將運算的過程封裝進去。</p><p>在 HTML 中只要寫 <code>&#123;&#123; 函式名稱() &#125;&#125;</code> 就可以了，methods 中的函式會去修改資料與同時將運算結果呈現在 HTML 中的 <code>&#123;&#123; 函式名稱() &#125;&#125;</code> 的位置。</p><p>在這裡承前題，但是加入一個折扣的<code>&lt;input&gt;</code>輸入框，也在資料中新增一個 <code>discount</code> 的屬性，計算處理上也加上「乘以折扣」的程序。 </p><figure><div class="code-wrapper"><pre class="line-numbers language-htmlmixed" data-language="htmlmixed"><code class="language-htmlmixed">&lt;div id&#x3D;&quot;app&quot;&gt;  &lt;h3&gt;計算機&lt;&#x2F;h3&gt;   &lt;div&gt;      數量: &#123;&#123;num&#125;&#125; &lt;br&gt;    &lt;input type&#x3D;&quot;text&quot; v-model.num&#x3D;&quot;num&quot;&gt;   &lt;&#x2F;div&gt;   &lt;div&gt;      價格: &#123;&#123;price&#125;&#125; &lt;br&gt;    &lt;input type&#x3D;&quot;text&quot; v-model.num&#x3D;&quot;price&quot;&gt;   &lt;&#x2F;div&gt;  &lt;div&gt;      折扣: &#123;&#123;discount&#125;&#125; %&lt;br&gt;    &lt;input type&#x3D;&quot;text&quot; v-model.num&#x3D;&quot;discount&quot;&gt;   &lt;&#x2F;div&gt;&lt;!--  &#123;&#123;&#125;&#125; 中可以放入表達式  --&gt;  總價(表達式 num1 * price ) &#123;&#123; num * price * discount&#x2F;100 &#125;&#125; &lt;br&gt;  總價( methods ) &#123;&#123;totalMethod()&#125;&#125;  &lt;&#x2F;div&gt;&lt;&#x2F;div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">discount</span><span class="token operator">:</span><span class="token number">100</span><span class="token punctuation">,</span>      <span class="token literal-property property">num</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span>      <span class="token literal-property property">price</span><span class="token operator">:</span><span class="token number">0</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>    <span class="token function">totalMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'methods'</span><span class="token punctuation">)</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>num <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>price<span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">.</span>discount<span class="token operator">/</span><span class="token number">100</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>Vue<span class="token punctuation">.</span><span class="token function">createApp</span><span class="token punctuation">(</span>app<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><iframe height="300" style="width: 100%;" scrolling="no" title="Vue methods 與  computed" src="https://codepen.io/popeye_ux/embed/BaPpQOo?default-tab=html%2Cresult" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true">  See the Pen <a href="https://codepen.io/popeye_ux/pen/BaPpQOo">  Vue methods 與  computed</a> by POPEYE (<a href="https://codepen.io/popeye_ux">@popeye_ux</a>)  on <a href="https://codepen.io">CodePen</a>.</iframe><h2 id="Methods-是急驚風，Computed-是慢郎中"><a href="#Methods-是急驚風，Computed-是慢郎中" class="headerlink" title="Methods 是急驚風，Computed 是慢郎中"></a>Methods 是急驚風，Computed 是慢郎中</h2><p>承上題，我們加入一個不相干的 <code>message</code> 屬性，與畫面上 message 輸入框連動：</p><figure><div class="code-wrapper"><pre class="line-numbers language-htmlmixed" data-language="htmlmixed"><code class="language-htmlmixed">&lt;div id&#x3D;&quot;app&quot;&gt;  &lt;h3&gt;計算機&lt;&#x2F;h3&gt;   message: &lt;br&gt;  &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;message&quot;&gt;  &lt;div&gt;      數量: &#123;&#123;num&#125;&#125; &lt;br&gt;    &lt;input type&#x3D;&quot;text&quot; v-model.num&#x3D;&quot;num&quot;&gt;   &lt;&#x2F;div&gt;   &lt;div&gt;      價格: &#123;&#123;price&#125;&#125; &lt;br&gt;    &lt;input type&#x3D;&quot;text&quot; v-model.num&#x3D;&quot;price&quot;&gt;   &lt;&#x2F;div&gt;&lt;!--  &#123;&#123;&#125;&#125; 中可以放入表達式  --&gt;  總價(表達式 num1 * price ) &#123;&#123; num * price &#125;&#125; &lt;br&gt;&lt;!-- methods 中的函式   --&gt;  總價( methods ) &#123;&#123;totalMethod()&#125;&#125;   總價( computed ) &#123;&#123;totalComputed&#125;&#125; &lt;&#x2F;div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">message</span><span class="token operator">:</span><span class="token string">''</span><span class="token punctuation">,</span>      <span class="token literal-property property">num</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span>      <span class="token literal-property property">price</span><span class="token operator">:</span><span class="token number">0</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>    <span class="token function">totalMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'methods'</span><span class="token punctuation">)</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>num <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>price<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">computed</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>    <span class="token function">totalComputed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'computed'</span><span class="token punctuation">)</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>num <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>price<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>Vue<span class="token punctuation">.</span><span class="token function">createApp</span><span class="token punctuation">(</span>app<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>當我們改變 <code>this.num</code> 與 <code>this.price</code> 會同時觸發 <code>console.log(&#39;methods&#39;)</code> 與 <code>console.log(&#39;computed&#39;)</code>，但是我們會發現在 message 輸入框中更新 data 的時候，<br><code>console.log(&#39;methods&#39;)</code> 也會被觸發，但是 <code>console.log(&#39;computed&#39;)</code> 卻沒有反應，這是因為 <code>this.message</code> 不是 <code>totalComputed()</code> 的觀察對象。</p><p>而 methods 只要 <code>data</code> 中的資料有任何風吹草動，他都會觸發。</p><p>我們可以說 <strong>Methods 是急驚風，而 Computed 則是天塌下來，只要我家沒事，都不理會。</strong></p><p>computed 與 methods 的差別：</p><ul><li>computed 只有在自己觀察的值有變動時才會觸發，而 methods 則是所有的資料有變動時都會觸發。</li><li>computed 運作的結果只會呈現在畫面中，不會寫回資料(data)，除非有加上 setter()，才會改變資料的內容。</li></ul>]]></content>
    
    
    <categories>
      
      <category>Vue, JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue, Computeds</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>v-model 與 v-for 起使用的注意事項</title>
    <link href="/2023/01/07/v-modelAndV-for/"/>
    <url>/2023/01/07/v-modelAndV-for/</url>
    
    <content type="html"><![CDATA[<h1 id="Vue-指令與表單應用"><a href="#Vue-指令與表單應用" class="headerlink" title="Vue 指令與表單應用"></a>Vue 指令與表單應用</h1><p>Vue3 的指令可以節省許多原生 JS 要寫的 DOM 元素綁定與事件監聽的語法，Vue 指令方便歸方便，但是如果有些地方沒有注意，表單就有渲染不出來的困擾，以下整理一下初入手 Vue 指令與表單應用要注意的事情。</p><h2 id="checkbox-的雙向綁定與渲染"><a href="#checkbox-的雙向綁定與渲染" class="headerlink" title="checkbox 的雙向綁定與渲染"></a>checkbox 的雙向綁定與渲染</h2><p>在使用 Vue 來做表單渲染與表單選項的雙向綁定時，要注意 <strong>v-model 的雙向綁定</strong> 與 <strong>v-for 的表單選項渲染</strong> 是兩件不同的工作，以 checkbox為例，在資料上面要有 2 個陣列分別對應 v-for 與 v-model：</p><ul><li>要準備一個<strong>放入所有選項的陣列</strong>，讓 <strong>v-for</strong> 渲染在表單上，讓每個 checkbox 的 value 都可以 v-bind 到陣列的值。</li><li>因為 checkbox 可以複選，所以 <strong>v-model 要綁定到一個空陣列</strong>，把勾選的項目放入陣列中雙向綁定，讓資料與畫面連動。</li><li>v-for 要用 v-bind 綁定 key 值，不然會出現 選項 與 勾選 不連動的靈異事件。</li></ul><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">heroInfo</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// v-model 要綁以下空陣列         </span>        <span class="token literal-property property">loveHero</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token comment">// v-for 要綁以下陣列</span>      <span class="token literal-property property">heros</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"鋼鐵人"</span><span class="token punctuation">,</span> <span class="token string">"美國隊長"</span><span class="token punctuation">,</span> <span class="token string">"雷神索爾"</span><span class="token punctuation">,</span> <span class="token string">"綠巨人浩克"</span><span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>Vue<span class="token punctuation">.</span><span class="token function">createApp</span><span class="token punctuation">(</span>app<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">"#app"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>同時使用 v-for 與 v-model 的時候，要注意兩者下的位置，以 checkbox 為例：</p><ul><li><strong>v-for 要下在外層</strong>，不能下在 <code>&lt;input&gt;</code> 標籤裡面，放在 <code>&lt;input&gt;</code> 會沒有作用。</li><li>v-model 則要放在 <code>&lt;input&gt;</code>s 上面，value 要用 v-bind 去綁 v-for 的 item。</li></ul><figure><div class="code-wrapper"><pre class="line-numbers language-htmls" data-language="htmls"><code class="language-htmls">&lt;div id&#x3D;&quot;app&quot;&gt;  &lt;form class&#x3D;&quot;container p-2&quot;&gt;    &lt;h3&gt;超級英雄調查&lt;&#x2F;h3&gt;&lt;!-- v-for 要綁在外層的 div     --&gt;    &lt;div class&#x3D;&quot;form-check&quot; v-for&#x3D;&quot;(item,index) in heros&quot;&gt;&lt;!-- v-model 則要綁在 input 上， input 的 value 則要用 v-bind 綁在 v-for 的 item上面 --&gt;      &lt;input class&#x3D;&quot;form-check-input&quot; type&#x3D;&quot;checkbox&quot; :value&#x3D;&quot;item&quot; :id&#x3D;&quot;item&quot; :key&#x3D;&quot;index + item&quot; v-model&#x3D;&quot;heroInfo.loveHero&quot;&gt;      &lt;label class&#x3D;&quot;form-check-label&quot; :for&#x3D;&quot;item&quot;&gt;        &#123;&#123; item &#125;&#125;      &lt;&#x2F;label&gt;    &lt;&#x2F;div&gt;    &lt;hr&gt;    &lt;ul&gt;      &lt;li&gt;英雄愛好: &#123;&#123; heroInfo.loveHero &#125;&#125;&lt;&#x2F;li&gt;    &lt;&#x2F;ul&gt;  &lt;&#x2F;form&gt;&lt;&#x2F;div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><iframe height="300" style="width: 100%;" scrolling="no" title="v-for 與 v-model 放的位置" src="https://codepen.io/popeye_ux/embed/JjBbgdK?default-tab=html%2Cresult" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true">  See the Pen <a href="https://codepen.io/popeye_ux/pen/JjBbgdK">  v-for 與 v-model 放的位置</a> by POPEYE (<a href="https://codepen.io/popeye_ux">@popeye_ux</a>)  on <a href="https://codepen.io">CodePen</a>.</iframe><h2 id="select-下拉選單的-v-for-渲染與-v-model-綁定"><a href="#select-下拉選單的-v-for-渲染與-v-model-綁定" class="headerlink" title="select 下拉選單的 v-for 渲染與 v-model 綁定"></a>select 下拉選單的 v-for 渲染與 v-model 綁定</h2><p>select 下拉選單 v-model 雙向綁定 與 v-for 選項渲染要注意的事項：</p><ul><li><strong>v-model 要放在 select 標籤上</strong>，綁定 data 中的空字串。</li><li><strong>v-for 則要放在 option 標籤上</strong>， value 要 v-bind 到 v-for 的 item 上面。item 的名稱可以自訂。<br>v-for 一樣要對應到 所有選項的空陣列。</li></ul><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">herolInfo</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token literal-property property">favoriteHero</span><span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>              <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token literal-property property">heros</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'鋼鐵人'</span><span class="token punctuation">,</span> <span class="token string">'美國隊長'</span><span class="token punctuation">,</span><span class="token string">'綠巨人浩克'</span><span class="token punctuation">,</span><span class="token string">'雷神索爾'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>Vue<span class="token punctuation">.</span><span class="token function">createApp</span><span class="token punctuation">(</span>app<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container p-2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mb-3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>favoritePet<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mb-2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>選擇英雄<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>favoriteHero<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>favoriteHero<span class="token punctuation">"</span></span>  <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>herolInfo.favoriteHero<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">disabled</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>disabled<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>請選擇英雄<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">:value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>(item,index) in heros<span class="token punctuation">"</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>index + item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>我是&#123;&#123; item &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>選擇英雄: &#123;&#123; herolInfo.favoriteHero &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue, Vue3, JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VS Code 樣板字面值 HTML 補全</title>
    <link href="/2022/10/22/vscodeJSHtmlComplete/"/>
    <url>/2022/10/22/vscodeJSHtmlComplete/</url>
    
    <content type="html"><![CDATA[<p>一般在寫 HTML 時可以使用 emmet 來幫忙補全 HTML 標籤，但是在 JavaScript 中使用樣版字面值來寫 HTML 就沒有 emmet 可以用，每次寫 HTML 標籤都要自己手打，既不方便也容易出錯。</p><p>後來發現在 settings.json 檔中加入幾行 emmet 設定，就可以在寫 JS 樣版字面值時取得 HTML 標籤補全的功能。</p><h3 id="請按左下角的齒輪，選擇「設定」："><a href="#請按左下角的齒輪，選擇「設定」：" class="headerlink" title="請按左下角的齒輪，選擇「設定」："></a>請按左下角的齒輪，選擇「設定」：</h3><p><img src="https://i.imgur.com/qy6Z5wr.png"></p><h3 id="然後選擇右上角的小圖，進入-settings-json"><a href="#然後選擇右上角的小圖，進入-settings-json" class="headerlink" title="然後選擇右上角的小圖，進入 settings.json"></a>然後選擇右上角的小圖，進入 settings.json</h3><p><img src="https://i.imgur.com/q7WUjMr.png"></p><h3 id="在結尾補上這一段-emmet-設定："><a href="#在結尾補上這一段-emmet-設定：" class="headerlink" title="在結尾補上這一段 emmet 設定："></a>在結尾補上這一段 emmet 設定：</h3><p><img src="https://i.imgur.com/Jxz43N7.png"></p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">// 樣版字面值 HTML 補全開始</span><span class="token string-property property">"emmet.triggerExpansionOnTab"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token string-property property">"emmet.showAbbreviationSuggestions"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token string-property property">"emmet.showExpandedAbbreviation"</span><span class="token operator">:</span> <span class="token string">"always"</span><span class="token punctuation">,</span><span class="token string-property property">"emmet.includeLanguages"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token string-property property">"javascript"</span><span class="token operator">:</span> <span class="token string">"html"</span><span class="token punctuation">&#125;</span><span class="token comment">// 樣版字面值 HTML 補全結束</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>VS Code</category>
      
    </categories>
    
    
    <tags>
      
      <tag>VS Code,樣板自面值,HTML補全</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>箭頭函式的this</title>
    <link href="/2022/10/19/thisInArrowFunction/"/>
    <url>/2022/10/19/thisInArrowFunction/</url>
    
    <content type="html"><![CDATA[<h1 id="箭頭函式的this"><a href="#箭頭函式的this" class="headerlink" title="箭頭函式的this"></a>箭頭函式的this</h1><p>在 JavaScript 中遇到 this ，有 2 件事情要注意：</p><ul><li>this 代表的是 function 執行時所屬的物件，而不是 function 本身。</li><li>沒有特別指定 this 的情況下，this 預設綁定( Default Binding )「全域物件」，也就是 window。</li></ul><h2 id="物件調用與-Simple-Call"><a href="#物件調用與-Simple-Call" class="headerlink" title="物件調用與 Simple Call"></a>物件調用與 Simple Call</h2><p>先來看看 simple call 跟物件調用的狀況：</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">var</span> universe <span class="token operator">=</span> <span class="token string">'漫威宇宙'</span><span class="token punctuation">;</span><span class="token comment">// 用 var 才會是全域變數</span><span class="token keyword">function</span> <span class="token function">callHero</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>universe<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> ironMan <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">universe</span> <span class="token operator">:</span> <span class="token string">'鋼鐵人宇宙'</span><span class="token punctuation">,</span>  callHero<span class="token punctuation">&#125;</span>ironMan<span class="token punctuation">.</span><span class="token function">callHero</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// this 指向調用 callHero() 的 ironMan</span><span class="token keyword">var</span> spiderMan <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">universe</span> <span class="token operator">:</span> <span class="token string">'蜘蛛人宇宙'</span><span class="token punctuation">,</span>  callHero<span class="token punctuation">,</span>  <span class="token function">stranger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">callHero</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// simple call</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>spiderMan<span class="token punctuation">.</span><span class="token function">callHero</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 蜘蛛人宇宙，調用 callHero() 的是 spiderMan 這個物件</span><span class="token comment">// 所以 this 指向 spiderMan</span>spiderMan<span class="token punctuation">.</span><span class="token function">stranger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 漫威宇宙，因為調用 callHero() 的是 stranger()這個函式</span><span class="token comment">// 所以 this 指向全域，也就是 window</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><iframe height="300" style="width: 100%;" scrolling="no" title="Untitled" src="https://codepen.io/popeye_ux/embed/GRdagrG?default-tab=html%2Cresult" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true">  See the Pen <a href="https://codepen.io/popeye_ux/pen/GRdagrG">  Untitled</a> by POPEYE (<a href="https://codepen.io/popeye_ux">@popeye_ux</a>)  on <a href="https://codepen.io">CodePen</a>.</iframe><h2 id="箭頭函式的-this"><a href="#箭頭函式的-this" class="headerlink" title="箭頭函式的 this"></a>箭頭函式的 this</h2><p>當 this 出現在箭頭函式中，因為箭頭函式沒有自己的 this ，所以會指向外層。</p><p>一樣設一個全域變數與一個 callHero()函式。</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">var</span> universe <span class="token operator">=</span> <span class="token string">'漫威宇宙'</span><span class="token punctuation">;</span><span class="token comment">// 用 var 才會指向全域</span><span class="token keyword">function</span> <span class="token function">callHero</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>universe<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> spiderMan <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">universe</span> <span class="token operator">:</span> <span class="token string">'蜘蛛人宇宙'</span><span class="token punctuation">,</span>  callHero<span class="token punctuation">,</span>  <span class="token function-variable function">stranger</span><span class="token operator">:</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>universe<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 箭頭函式沒有自己的 this ，所以指向外層，也就是全域  </span><span class="token punctuation">&#125;</span>spiderMan<span class="token punctuation">.</span><span class="token function">callHero</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//蜘蛛人宇宙</span>spiderMan<span class="token punctuation">.</span><span class="token function">stranger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//漫威宇宙</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><iframe height="300" style="width: 100%;" scrolling="no" title="this arrow function" src="https://codepen.io/popeye_ux/embed/jOxoMLg?default-tab=html%2Cresult" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true">  See the Pen <a href="https://codepen.io/popeye_ux/pen/jOxoMLg">  this arrow function</a> by POPEYE (<a href="https://codepen.io/popeye_ux">@popeye_ux</a>)  on <a href="https://codepen.io">CodePen</a>.</iframe><h2 id="callBack-function-中的-this"><a href="#callBack-function-中的-this" class="headerlink" title="callBack function 中的 this"></a>callBack function 中的 this</h2><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">var</span> universe <span class="token operator">=</span> <span class="token string">'漫威宇宙'</span><span class="token punctuation">;</span><span class="token comment">// 用 var 才會指向全域</span><span class="token keyword">function</span> <span class="token function">callHero</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>universe<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> spiderMan <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">universe</span> <span class="token operator">:</span> <span class="token string">'蛛蛛人宇宙'</span><span class="token punctuation">,</span>  <span class="token function-variable function">callHero</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>universe<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 1 蜘蛛人宇宙</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>universe<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 2 漫威宇宙</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 3 window</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>spiderMan<span class="token punctuation">.</span><span class="token function">callHero</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><iframe height="300" style="width: 100%;" scrolling="no" title="callBack this 1" src="https://codepen.io/popeye_ux/embed/abGrpGo?default-tab=html%2Cresult" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true">  See the Pen <a href="https://codepen.io/popeye_ux/pen/abGrpGo">  callBack this 1</a> by POPEYE (<a href="https://codepen.io/popeye_ux">@popeye_ux</a>)  on <a href="https://codepen.io">CodePen</a>.</iframe><hr><p>但是 callBack function 被包在一個物件屬性的函式 callHero 中，當 <code>spiderMan.callHero()</code>，也就是spiderMan 調用 callHero()的時候，setTimeout 是被 callHero 這個函式所調用，這時 this 指向全域的 window。</p><p>同樣的例子，在 setTimeout() 中改用箭頭函式，則 this 會指向外層，也就是調用他的物件– spiderMan 這個物件。</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">var</span> universe <span class="token operator">=</span> <span class="token string">'漫威宇宙'</span><span class="token punctuation">;</span><span class="token comment">// 用 var 才會指向全域</span><span class="token keyword">function</span> <span class="token function">callHero</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>universe<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> spiderMan <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">universe</span> <span class="token operator">:</span> <span class="token string">'蛛蛛人宇宙'</span><span class="token punctuation">,</span>  <span class="token function-variable function">callHero</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>universe<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 1 蜘蛛人宇宙</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>universe<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 2 蛛蛛人宇宙</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 3 &#123;universe: '蛛蛛人宇宙', callHero: ƒ&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>spiderMan<span class="token punctuation">.</span><span class="token function">callHero</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><iframe height="300" style="width: 100%;" scrolling="no" title="callBack this 1" src="https://codepen.io/popeye_ux/embed/MWGdpgM?default-tab=html%2Cresult" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true">  See the Pen <a href="https://codepen.io/popeye_ux/pen/MWGdpgM">  callBack this 1</a> by POPEYE (<a href="https://codepen.io/popeye_ux">@popeye_ux</a>)  on <a href="https://codepen.io">CodePen</a>.</iframe>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript,this,箭頭函式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>getAttributeSetAttribute</title>
    <link href="/2022/07/06/getAttributeSetAttribute/"/>
    <url>/2022/07/06/getAttributeSetAttribute/</url>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/TKSzURm.jpg"><br>Hi,我是POPEYE，今天要來談談 getAttribute 與 setAttribute 。</p><p>getAttribute 與 setAttribute 是兩個我比較容易混淆的 JS 方法，所以我花了一點工夫來研究一下這兩個方法如何使用。</p><p>首先要了解這兩種方法是存取與操作 HTML 標籤屬性的方法，都必須要透過<strong>選取到某個 HTML DOM 節點來操作</strong>，所以寫法上一定是這樣子：</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx">element<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">'屬性名稱'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>element<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">'屬性名稱'</span><span class="token punctuation">,</span><span class="token string">'屬性值'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//屬性名稱為 id 、 class 、 href、 data-** ……等等</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="getAttribute"><a href="#getAttribute" class="headerlink" title="getAttribute"></a>getAttribute</h2><p>getAttribute 用來取得 HTML 標籤的屬性值，如果指定的屬性不存在，則會回傳 null 或 “”。</p><figure><div class="code-wrapper"><pre class="line-numbers language-htmlmixed" data-language="htmlmixed"><code class="language-htmlmixed">&lt;h2 class&#x3D;&quot;title&quot; id&#x3D;&quot;quiet&quot; data-band&#x3D;&quot;Mayday&quot; name&#x3D;&quot;好好&quot;&gt;    最安靜的時刻，回憶總是最喧囂&lt;&#x2F;h2&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">//JavaScript</span><span class="token keyword">const</span> quiet <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.title'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>quiet<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">'class'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// "title"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>quiet<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">'id'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//"quiet"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>quiet<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">'data-band'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//"Mayday"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>quiet<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//"好好"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>所以我們可以把 HTML 節點的屬性值取出，拿來組字串之後，再塞回本來的節點去。</p><figure><div class="code-wrapper"><pre class="line-numbers language-htmlmixed" data-language="htmlmixed"><code class="language-htmlmixed">&lt;h2 class&#x3D;&quot;title&quot; id&#x3D;&quot;quiet&quot; data-band&#x3D;&quot;Mayday&quot; name&#x3D;&quot;好好&quot;&gt;    最安靜的時刻，回憶總是最喧囂&lt;&#x2F;h2&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">//JavaScript</span><span class="token keyword">const</span> quiet <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.title'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> str <span class="token operator">=</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">我最喜歡的歌詞是《</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>quiet<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">'data-band'</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">》唱的《</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>quiet<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">'data-song'</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">》，裡面這一句「</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>quiet<span class="token punctuation">.</span>textContent<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">」</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>quiet<span class="token punctuation">.</span>textContent <span class="token operator">=</span> str<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>quiet<span class="token punctuation">.</span>textContent<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//"我最喜歡的歌詞是《Mayday》唱的《null》，裡面這一句「最安靜的時刻，回憶總是最喧囂」"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>本來 <code>&lt;h2&gt;</code> 標籤中 「最安靜的時刻，回憶總是最喧囂」 ，被改成 「我最喜歡的歌詞是《Mayday》唱的《null》，裡面這一句「最安靜的時刻，回憶總是最喧囂」」囉！！！</p><h2 id="setAttribute"><a href="#setAttribute" class="headerlink" title="setAttribute"></a>setAttribute</h2><p>setAttribute 的功用在於修改 HTML 節的的屬性。</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx">element<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">'屬性名稱'</span><span class="token punctuation">,</span><span class="token string">'屬性值'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//屬性名稱為 id 、 class 、 href、 data-** ……等等</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><p>不囉嗦！來看一下範例：</p><figure><div class="code-wrapper"><pre class="line-numbers language-htmlmixed" data-language="htmlmixed"><code class="language-htmlmixed">&lt;h2 class&#x3D;&quot;title2&quot; data-song&#x3D;&quot;好好&quot; data-band&#x3D;&quot;Mayday&quot;&gt;    最喧囂的時刻，寂寞包圍著孤島&lt;&#x2F;h2&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.blue</span> <span class="token punctuation">&#123;</span>  <span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">//JavaScript</span><span class="token keyword">const</span> noise <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.title2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>noise<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"data-song"</span><span class="token punctuation">,</span><span class="token string">"瘋狂世界"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>noise<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">'class'</span><span class="token punctuation">,</span><span class="token string">'blue'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//字的顏色也變成藍色了</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>noise<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">'data-song'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//瘋狂世界"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>noise<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">'class'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//"blue"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><ul><li><a href="https://codepen.io/popeye_ux/pen/abLmggK">CODEPEN範例</a></li></ul><h2 id="getAttribute-與-setAttribute-的進階使用"><a href="#getAttribute-與-setAttribute-的進階使用" class="headerlink" title="getAttribute 與 setAttribute 的進階使用"></a>getAttribute 與 setAttribute 的進階使用</h2><p>除了用來操作屬性之外，在做事件監聽的時候，也可以利用 getAttribute 來做一些判斷：</p><figure><div class="code-wrapper"><pre class="line-numbers language-htmlmixed" data-language="htmlmixed"><code class="language-htmlmixed">&lt;ul class&#x3D;&quot;item&quot;&gt;  &lt;li class &#x3D;&quot;item1&quot;&gt;item1&lt;&#x2F;li&gt;  &lt;li class &#x3D;&quot;item2&quot;&gt;item2&lt;&#x2F;li&gt;  &lt;li class &#x3D;&quot;item3&quot;&gt;item3&lt;&#x2F;li&gt;  &lt;li class &#x3D;&quot;item4&quot;&gt;item4&lt;&#x2F;li&gt;  &lt;li class &#x3D;&quot;item5&quot;&gt;item5&lt;&#x2F;li&gt;&lt;&#x2F;ul&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.item</span><span class="token punctuation">&#123;</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token selector">.item1, .item2, .item3, .item4, .item5</span><span class="token punctuation">&#123;</span>  <span class="token property">margin-bottom</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.blue</span><span class="token punctuation">&#123;</span>  <span class="token property">color</span> <span class="token punctuation">:</span> blue<span class="token punctuation">;</span>  <span class="token property">margin-bottom</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">const</span> item <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.item'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>item<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">'class'</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'item3'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    e<span class="token punctuation">.</span>target<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">'class'</span><span class="token punctuation">,</span><span class="token string">'blue'</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>在這裡利用 <code>e.target.getAttribute(&#39;class&#39;)</code> 來判斷如果點擊到的 <code>class</code> 屬性如果是 <code>item3</code> ， 則把 e.target 的 class 屬性變成藍色的。</p><p>MDN 有把 getAttribute 與 setAttribute 這兩個節點方法可以操作的 HTML 屬性列出來，有需要時可以參考一下：</p><ul><li><a href="https://developer.mozilla.org/zh-TW/docs/Web/HTML/Attributes">MDN HTML attribute reference</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript, JS直播班</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C3.js基本使用方法</title>
    <link href="/2021/11/29/c3js/"/>
    <url>/2021/11/29/c3js/</url>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/wprOc5M.jpg"></p><p>這一周六角學院 JS 直播班教的是 C3.js 這個畫圖表的套件。</p><p>對於一個畫圖表快二十年的人，看到這個套件感到很親切。不同於手工畫的圖表，C3.js可以透過程式把資料帶入，只要資料更新，圖表也同步更新。</p><p>其實我也使用過另外一套圖表套件 Chart.js，那是在前公司結束前，做了一個 COVID-19 的網頁，裡面圖表就是用 Chart.js 做的，那時還不會串 API ，也不會篩選資料，每天都用手動把資料更新，真的很傻B！</p><p>誠如老師講的，不用真的把文件整個看過才會用，基本上只要抓住一些設定的要點，就可以做出還不錯的圖表。以下就整理了一些我試過可行的設定，方便未來要用時，可以快速上手：</p><h2 id="導入方法"><a href="#導入方法" class="headerlink" title="導入方法"></a>導入方法</h2><p>在HTML中插入以下程式碼：</p><ul><li>CSS要放在自己寫的CSS之前。</li><li>透過CDN抓進來使用的 d3.js 與 c3.js 也要放在自己寫的 JS檔之前。</li></ul><figure><div class="code-wrapper"><pre class="line-numbers language-htmlmixed" data-language="htmlmixed"><code class="language-htmlmixed">&lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;https:&#x2F;&#x2F;cdnjs.cloudflare.com&#x2F;ajax&#x2F;libs&#x2F;c3&#x2F;0.7.18&#x2F;c3.css&quot;&gt;&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdnjs.cloudflare.com&#x2F;ajax&#x2F;libs&#x2F;d3&#x2F;5.16.0&#x2F;d3.js&quot;&gt;&lt;&#x2F;script&gt;&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdnjs.cloudflare.com&#x2F;ajax&#x2F;libs&#x2F;c3&#x2F;0.7.18&#x2F;c3.js&quot;&gt;&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="曲線圖-Line-Chart"><a href="#曲線圖-Line-Chart" class="headerlink" title="曲線圖 Line Chart"></a>曲線圖 Line Chart</h2><p>基本上套件就是一個物件，而所有的圖表的資料與外觀都在 generate 這個屬性的函式參數裡面設定。而  generate 函式的參數也是一個物件。</p><p>可以透過 <code>bindto</code> 這個屬性把圖表綁定到 HTML 的 DOM 元素上。 </p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">var</span> chart <span class="token operator">=</span> c3<span class="token punctuation">.</span><span class="token function">generate</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token literal-property property">bindto</span><span class="token operator">:</span> <span class="token string">".chart"</span><span class="token punctuation">,</span>  <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// x 是設定 x 軸刻度的格式與數據</span>    <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token string">"date"</span><span class="token punctuation">,</span>    <span class="token literal-property property">columns</span><span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token comment">//"date" 綁定到 x 屬性的值"date" ，日期是字串格式</span>      <span class="token punctuation">[</span><span class="token string">"date"</span><span class="token punctuation">,</span> <span class="token string">"2021-11-21"</span><span class="token punctuation">,</span> <span class="token string">"2021-11-22"</span><span class="token punctuation">,</span> <span class="token string">"2021-11-23"</span><span class="token punctuation">,</span> <span class="token string">"2021-11-24"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token comment">//資料部分，可以透過 變數 帶入</span>      <span class="token punctuation">[</span><span class="token string">"data1"</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">400</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">[</span><span class="token string">"data2"</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">]</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token comment">// 顯示線圖上面每一點的資料</span>    <span class="token comment">// labels: true</span>    <span class="token comment">// 每一點的資料顯示 $</span>    <span class="token literal-property property">labels</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">format</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">data1</span><span class="token operator">:</span> d3<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"$"</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">//設定一組色票讓data自己捉 線 的顏色</span>  <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">pattern</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"#ff9896"</span><span class="token punctuation">,</span> <span class="token string">"#9467bd"</span><span class="token punctuation">,</span> <span class="token string">"#c5b0d5"</span><span class="token punctuation">,</span> <span class="token string">"#8c564b"</span><span class="token punctuation">,</span> <span class="token string">"#c49c94"</span><span class="token punctuation">,</span> <span class="token string">"#e377c2"</span><span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">// 設定顯示格線(虛線)</span>  <span class="token literal-property property">grid</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">show</span><span class="token operator">:</span> <span class="token boolean">true</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">show</span><span class="token operator">:</span> <span class="token boolean">true</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">//整體尺寸 不設定的話，圖表可以自適應地伸縮</span>  <span class="token literal-property property">size</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token number">780</span><span class="token punctuation">,</span>    <span class="token literal-property property">height</span><span class="token operator">:</span> <span class="token number">400</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">//padding 會壓縮線圖的大小</span>  <span class="token literal-property property">padding</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">top</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token comment">//right設太小，會讓最右側刻度的日期被遮住</span>    <span class="token literal-property property">right</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span>    <span class="token literal-property property">bottom</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>    <span class="token literal-property property">left</span><span class="token operator">:</span> <span class="token number">100</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">//設定坐標軸格式</span>  <span class="token literal-property property">axis</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">"timeseries"</span><span class="token punctuation">,</span>      <span class="token comment">//刻度</span>      <span class="token literal-property property">tick</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span>        <span class="token literal-property property">format</span><span class="token operator">:</span> <span class="token string">"%Y-%m-%d"</span><span class="token punctuation">,</span>        <span class="token comment">// outer 拿掉圖表最右側多出來的刻度</span>        <span class="token literal-property property">outer</span><span class="token operator">:</span> <span class="token boolean">false</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token comment">// 設定x軸說明 或是 數據 的單位</span>      <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">"日期"</span><span class="token punctuation">,</span>        <span class="token comment">//label 橫式的位置有以下幾種</span>        <span class="token comment">//inner-right [default],inner-center,inner-left,outer-right,outer-center,outer-left</span>        <span class="token literal-property property">position</span><span class="token operator">:</span> <span class="token string">"outer-center"</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">show</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      <span class="token literal-property property">tick</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//label 的位置有以下幾種</span>        <span class="token comment">//inner-right [default],inner-center,inner-left,outer-right,outer-center,outer-left</span>        <span class="token literal-property property">position</span><span class="token operator">:</span> <span class="token string">"inner-center"</span><span class="token punctuation">,</span>        <span class="token comment">// Y軸 數字前面加上 $ 字號</span>        <span class="token literal-property property">format</span><span class="token operator">:</span> d3<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"$,"</span><span class="token punctuation">)</span>        <span class="token comment">//format: function (d) &#123; return "$" + d; &#125;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">"價格"</span><span class="token punctuation">,</span>        <span class="token comment">// inner-right : default, inner-center, inner-left, outer-right, outer-center, outer-left</span>        <span class="token literal-property property">position</span><span class="token operator">:</span> <span class="token string">"outer-middle"</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">//設定圖例</span>  <span class="token literal-property property">legend</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">show</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token comment">//圖例的位置只有 'right' 與 'bottom'</span>    <span class="token literal-property property">position</span><span class="token operator">:</span> <span class="token string">"bottom"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">//圖表的標題</span>  <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">"好心指數"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>CSS設定的部分：</p><figure><div class="code-wrapper"><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">// CSS.c3-title</span> <span class="token punctuation">&#123;</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> 32px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.c3-axis-y text</span> <span class="token punctuation">&#123;</span>  <span class="token property">fill</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> 12px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.c3-axis-x text</span> <span class="token punctuation">&#123;</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> 12px<span class="token punctuation">;</span>  <span class="token property">fill</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.c3-axis-y text</span> <span class="token punctuation">&#123;</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>  <span class="token property">fill</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span>  <span class="token property">letter-spacing</span><span class="token punctuation">:</span> 2px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.c3-axis-y .c3-axis-y-label</span> <span class="token punctuation">&#123;</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>  <span class="token property">fill</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.c3-line</span> <span class="token punctuation">&#123;</span>  <span class="token property">stroke-width</span><span class="token punctuation">:</span> 3px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.c3-circle</span> <span class="token punctuation">&#123;</span>  <span class="token property">fill</span><span class="token punctuation">:</span> blue <span class="token important">!important</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p><a href="https://codepen.io/popeye_ux/pen/WNEqNPO">Line Chart 範例</a></p><h2 id="Bar-Chart-長條圖"><a href="#Bar-Chart-長條圖" class="headerlink" title="Bar Chart 長條圖"></a>Bar Chart 長條圖</h2><p>Bar Chart 的設定大同小異，差別在於 axis 可以設定 <code>rotated: false</code> , 坐標軸翻轉，由垂直轉為水平。</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">var</span> chart <span class="token operator">=</span> c3<span class="token punctuation">.</span><span class="token function">generate</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token literal-property property">bindto</span><span class="token operator">:</span> <span class="token string">".chart"</span><span class="token punctuation">,</span>  <span class="token comment">//是bind，不是bid</span>  <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token string">"x"</span><span class="token punctuation">,</span>    <span class="token literal-property property">columns</span><span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">[</span>        <span class="token string">"x"</span><span class="token punctuation">,</span>        <span class="token string">"2013-01-01"</span><span class="token punctuation">,</span>        <span class="token string">"2013-01-02"</span><span class="token punctuation">,</span>        <span class="token string">"2013-01-03"</span><span class="token punctuation">,</span>        <span class="token string">"2013-01-04"</span><span class="token punctuation">,</span>        <span class="token string">"2013-01-05"</span>      <span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">[</span><span class="token string">"data1"</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">400</span><span class="token punctuation">,</span> <span class="token number">150</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">[</span><span class="token string">"data2"</span><span class="token punctuation">,</span> <span class="token number">130</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">140</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">150</span><span class="token punctuation">]</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token comment">//type 設定圖表類型</span>    <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">"bar"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">bar</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//設定長條圖每一條寬度</span>    <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">ratio</span><span class="token operator">:</span> <span class="token number">0.5</span> <span class="token comment">// this makes bar width 50% of length between ticks</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// or</span>    <span class="token comment">//width: 100 // this makes bar width 100px</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">//設定一組色票讓data自己捉</span>  <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">pattern</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"#ff9896"</span><span class="token punctuation">,</span> <span class="token string">"#9467bd"</span><span class="token punctuation">,</span> <span class="token string">"#c5b0d5"</span><span class="token punctuation">,</span> <span class="token string">"#8c564b"</span><span class="token punctuation">,</span> <span class="token string">"#c49c94"</span><span class="token punctuation">,</span> <span class="token string">"#e377c2"</span><span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">// 設定顯示格線(虛線)</span>  <span class="token literal-property property">grid</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">show</span><span class="token operator">:</span> <span class="token boolean">true</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">show</span><span class="token operator">:</span> <span class="token boolean">true</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">//整體尺寸 不設定的話，圖表可以自適應地伸縮</span>  <span class="token literal-property property">size</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token number">780</span><span class="token punctuation">,</span>    <span class="token literal-property property">height</span><span class="token operator">:</span> <span class="token number">400</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">padding</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">top</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token literal-property property">right</span><span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span>    <span class="token literal-property property">bottom</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>    <span class="token literal-property property">left</span><span class="token operator">:</span> <span class="token number">100</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">axis</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//rotated 設定坐標軸翻轉</span>    <span class="token literal-property property">rotated</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">"category"</span><span class="token punctuation">,</span>      <span class="token comment">// 設定x軸說明 或是 數據 的單位</span>      <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">"日期"</span><span class="token punctuation">,</span>        <span class="token comment">//label 橫式的位置有以下幾種</span>        <span class="token comment">//inner-right [default],inner-center,inner-left,outer-right,outer-center,outer-left</span>        <span class="token literal-property property">position</span><span class="token operator">:</span> <span class="token string">"outer-center"</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">tick</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">position</span><span class="token operator">:</span> <span class="token string">"inner-center"</span><span class="token punctuation">,</span>        <span class="token comment">// Y軸 數字前面加上 $ 字號</span>        <span class="token literal-property property">format</span><span class="token operator">:</span> d3<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"$,"</span><span class="token punctuation">)</span>        <span class="token comment">//format: function (d) &#123; return "$" + d; &#125;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">"價格"</span><span class="token punctuation">,</span>        <span class="token comment">// inner-right : default, inner-center, inner-left, outer-right, outer-center, outer-left</span>        <span class="token literal-property property">position</span><span class="token operator">:</span> <span class="token string">"outer-middle"</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">legend</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">show</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token comment">//圖例的位置 'bottom'</span>    <span class="token literal-property property">position</span><span class="token operator">:</span> <span class="token string">"bottom"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">//圖表的標題</span>  <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">"銷售金額"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p><a href="https://codepen.io/popeye_ux/pen/yLodYmK">Bar Chart 範例</a></p><h3 id="Pie-Chart-餅圖"><a href="#Pie-Chart-餅圖" class="headerlink" title="Pie Chart 餅圖"></a>Pie Chart 餅圖</h3><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">var</span> chart <span class="token operator">=</span> c3<span class="token punctuation">.</span><span class="token function">generate</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token literal-property property">bindto</span><span class="token operator">:</span> <span class="token string">".chart"</span><span class="token punctuation">,</span>  <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// iris data from R</span>    <span class="token literal-property property">columns</span><span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">[</span><span class="token string">"iPhone"</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">[</span><span class="token string">"其他手機"</span><span class="token punctuation">,</span> <span class="token number">120</span><span class="token punctuation">]</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">"pie"</span><span class="token punctuation">,</span>    <span class="token literal-property property">labels</span><span class="token operator">:</span> <span class="token boolean">true</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">//設定一組色票讓data自己捉 線 的顏色</span>  <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">pattern</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"#ff9896"</span><span class="token punctuation">,</span> <span class="token string">"#9467bd"</span><span class="token punctuation">,</span> <span class="token string">"#c5b0d5"</span><span class="token punctuation">,</span> <span class="token string">"#8c564b"</span><span class="token punctuation">,</span> <span class="token string">"#c49c94"</span><span class="token punctuation">,</span> <span class="token string">"#e377c2"</span><span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">//整體尺寸，本來置中，會往畫面左邊靠</span>  <span class="token literal-property property">size</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token number">780</span><span class="token punctuation">,</span>    <span class="token literal-property property">height</span><span class="token operator">:</span> <span class="token number">400</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">//padding 會壓縮線圖的大小</span>  <span class="token literal-property property">padding</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">top</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>        <span class="token literal-property property">right</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span>    <span class="token literal-property property">bottom</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>    <span class="token literal-property property">left</span><span class="token operator">:</span> <span class="token number">100</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">//設定圖例</span>  <span class="token literal-property property">legend</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">show</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token comment">//圖例的位置只有 'right' 與 'bottom'</span>    <span class="token literal-property property">position</span><span class="token operator">:</span> <span class="token string">"bottom"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token comment">//pie 及 donut 圖 label 設定的方式和其他圖不一樣，要注意</span>  <span class="token literal-property property">pie</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">show</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      <span class="token function-variable function">format</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> ratio<span class="token punctuation">,</span> id</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> d3<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"$"</span><span class="token punctuation">)</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">//圖表的標題</span>  <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">"銷售金額比例"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p><a href="https://codepen.io/popeye_ux/pen/PoKrVGe">Pie Chart 範例</a></p><h2 id="Donut-Chart-甜甜圈圖"><a href="#Donut-Chart-甜甜圈圖" class="headerlink" title="Donut Chart 甜甜圈圖"></a>Donut Chart 甜甜圈圖</h2><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">var</span> chart <span class="token operator">=</span> c3<span class="token punctuation">.</span><span class="token function">generate</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token literal-property property">bindto</span><span class="token operator">:</span> <span class="token string">".chart"</span><span class="token punctuation">,</span>  <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// iris data from R</span>    <span class="token literal-property property">columns</span><span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">[</span><span class="token string">"iPhone"</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">[</span><span class="token string">"其他手機"</span><span class="token punctuation">,</span> <span class="token number">120</span><span class="token punctuation">]</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">"donut"</span><span class="token punctuation">,</span>    <span class="token literal-property property">labels</span><span class="token operator">:</span> <span class="token boolean">true</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">//設定一組色票讓data自己捉 線 的顏色</span>  <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">pattern</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"#ff9896"</span><span class="token punctuation">,</span> <span class="token string">"#9467bd"</span><span class="token punctuation">,</span> <span class="token string">"#c5b0d5"</span><span class="token punctuation">,</span> <span class="token string">"#8c564b"</span><span class="token punctuation">,</span> <span class="token string">"#c49c94"</span><span class="token punctuation">,</span> <span class="token string">"#e377c2"</span><span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">//整體尺寸，本來置中，會往畫面左邊靠</span>  <span class="token literal-property property">size</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token number">780</span><span class="token punctuation">,</span>    <span class="token literal-property property">height</span><span class="token operator">:</span> <span class="token number">400</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">//padding 會壓縮線圖的大小</span>  <span class="token literal-property property">padding</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">top</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token comment">//right設太小，會讓最右側刻度的日期被遮住</span>    <span class="token literal-property property">right</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span>    <span class="token literal-property property">bottom</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>    <span class="token literal-property property">left</span><span class="token operator">:</span> <span class="token number">100</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">//設定圖例</span>  <span class="token literal-property property">legend</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">show</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token comment">//圖例的位置只有 'right' 與 'bottom'</span>    <span class="token literal-property property">position</span><span class="token operator">:</span> <span class="token string">"bottom"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">//pie 及 donut 圖 label 設定的方式和其他圖不一樣，要注意</span>  <span class="token literal-property property">donut</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">"地區"</span><span class="token punctuation">,</span>    <span class="token comment">//控制環的粗細</span>    <span class="token literal-property property">width</span><span class="token operator">:</span><span class="token number">80</span><span class="token punctuation">,</span>    <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">show</span><span class="token operator">:</span> <span class="token boolean">true</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">//圖表的外部標題</span>  <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">"銷售金額比例"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p><a href="https://codepen.io/popeye_ux/pen/ExvBMPw">Donut Chart 範例</a></p><p>先整理以上這些基本設定，以後若有新發現在隨時更新！如果有錯誤的地方，也請不吝告訴我。感謝！</p><h3 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h3><ul><li><a href="https://vainolo.com/2019/10/14/learning-c3-js-lesson-3-line-charts/">Learning C3.js – Lesson 3 – Line Charts</a></li><li><a href="https://www.demo2s.com/javascript/javascript-c3-js-x-axis-label-text-position.html">Javascript C3.js X axis label text position</a></li><li><a href="https://codepen.io/travisluong/pen/eNeaMe?editors=1010">CodePen Home C3 Line Chart Demo</a></li><li><a href="https://vainolo.com/2019/10/25/learning-c3-js-lesson-4-bar-charts/">Learning C3.js – Lesson 4 – Bar Charts</a></li><li><a href="https://hackmd.io/@sylviekuo/B1Jr5wNgD">js學習60天-c3.js筆記</a></li><li><a href="https://hsuchihting.github.io/javascript/20200715/3292510004/">JS 筆記 - C3.js 基本認識</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript, JS直播班, C3.js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>表單取值的誤區</title>
    <link href="/2021/11/28/formValueMistake/"/>
    <url>/2021/11/28/formValueMistake/</url>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/5g9rhAh.jpg"></p><h2 id="誤區一：忘記將表單中取出的「數字」由字串轉為數字"><a href="#誤區一：忘記將表單中取出的「數字」由字串轉為數字" class="headerlink" title="誤區一：忘記將表單中取出的「數字」由字串轉為數字"></a>誤區一：忘記將表單中取出的「數字」由字串轉為數字</h2><p>從 <code>input</code> 中取出的值為「字串」，就算 <code>type=number</code> 取出來的值也是字串，不是數字。</p><p>在JS直播班第五周的作業，我就犯了這樣的錯誤。</p><figure><div class="code-wrapper"><pre class="line-numbers language-htmlmixed" data-language="htmlmixed"><code class="language-htmlmixed">&lt;input type&#x3D;&quot;number&quot; id&#x3D;&quot;targetInput&quot; value&#x3D;&#39;123&#39;&gt;&lt;button id&#x3D;&quot;btn&quot;&gt;觸發按鈕&lt;&#x2F;button&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><p>原本的 <code>el.value</code> 顯示為 <code>string</code>，要透過 <code>parseInt</code>之後才會轉為數字。</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">let</span> el <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"#targetInput"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"#btn"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>el<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//"123" 甚麼都不輸入的話，輸出預設值</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> el<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//"string"</span>  <span class="token keyword">let</span> newValue <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>el<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> newValue<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//"number"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="誤區二：-value-getAttribute-39-value-39-兩者大不同"><a href="#誤區二：-value-getAttribute-39-value-39-兩者大不同" class="headerlink" title="誤區二：.value, .getAttribute(&#39;value&#39;) 兩者大不同"></a>誤區二：<code>.value</code>, <code>.getAttribute(&#39;value&#39;)</code> 兩者大不同</h2><p>這一點是我之前沒有思考過的問題。</p><p>在這個例子中，當我們做表單取值的時候，必須把 id 為 <code>&quot;targetInput&quot;</code>的表單元素綁訂到 <code>el</code> 這個變數上。然後利用 <code>el.value</code>去取值。</p><figure><div class="code-wrapper"><pre class="line-numbers language-htmlmixed" data-language="htmlmixed"><code class="language-htmlmixed">&lt;input type&#x3D;&quot;text&quot; id&#x3D;&quot;targetInput&quot; value&#x3D;&quot;123&quot;&gt;&lt;button id&#x3D;&quot;firstBtn&quot;&gt;觸發按鈕&lt;&#x2F;button&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">let</span> el <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#targetInput'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> firstBtn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#firstBtn'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">el.value: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>el<span class="token punctuation">.</span>value<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>firstBtn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">//輸入框填入任何值都會被 "任意填入的值" 取代</span>    el<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">"任意填入的值"</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">el.value: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>el<span class="token punctuation">.</span>value<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//"任意填入的值"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>但是使用 <code>.getAttribute(&#39;value&#39;)</code> 也能取到 <code>input</code> 元素 <code>value</code> 屬性的值，那 <code>.value</code> 和 <code>.getAttribute(&#39;value&#39;)</code> 有甚麼差別呢？</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">let</span> el <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"#targetInput"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> firstBtn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"#firstBtn"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">el.value: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>el<span class="token punctuation">.</span>value<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>firstBtn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//輸入框填入任何值都會被 "任意填入的值" 取代</span>  el<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">"任意填入的值"</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">el.value: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>el<span class="token punctuation">.</span>value<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//"el.value: 任意填入的值"</span>  <span class="token keyword">let</span> getValue <span class="token operator">=</span> el<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"value"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//getAttribute 取到的是 input 的預設值 ，而非 user 輸入的值</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>getValue<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//"123"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p><code>el.value</code> 會去捉取表單輸入的值，如果沒有輸入的話，就會去捉預設值。而 <code>.getAttribute(&#39;value&#39;)</code> 則不管使用者輸入甚麼，都會去捉預設值，而要改變預設值的話必須使用 <code>el.setAttribute(&#39;value&#39;, &#39;456&#39;)</code>。</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">let</span> el <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"#targetInput"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> firstBtn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"#firstBtn"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">el.value: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>el<span class="token punctuation">.</span>value<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>firstBtn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//輸入框填入任何值都會被 "任意填入的值" 取代</span>  el<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">"任意填入的值"</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">el.value: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>el<span class="token punctuation">.</span>value<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//"el.value: 任意填入的值"</span>  el<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">'value'</span><span class="token punctuation">,</span> <span class="token string">'456'</span><span class="token punctuation">)</span>  <span class="token keyword">let</span> getValue <span class="token operator">=</span> el<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"value"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//getAttribute 取到的是 input 的預設值 ，而非 user 輸入的值</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>getValue<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// "456"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>所以結論是表單取值不能使用 <code>el.getAttribute(&quot;value&quot;)</code>。</p><p>六角學院助教的提醒：</p><ul><li>el.value 對應的是 input 欄位目前「輸入的值」</li><li>el.getAttribute(‘value’) 對應的是 input 欄位的「預設屬性值」</li><li>修改 el.value 並不會影響 input 標籤的 value 預設屬性，使用 setAttribute() 才會。</li></ul><p>真的每天都要花時間做每日任務，常常會發現自己不懂的地方。</p><h2 id="誤區三：-el-value-不等於-e-target-value"><a href="#誤區三：-el-value-不等於-e-target-value" class="headerlink" title="誤區三： el.value 不等於 e.target.value"></a>誤區三： el.value 不等於 e.target.value</h2><p>今天看每日任務的時候有一瞬間被混淆了。</p><p><code>e.target.value</code> 的 <code>e</code> 是事件監聽的事件物件，例如滑鼠點擊按鈕時會產生一個事件物件，<code>e.target.value</code> 是點擊事件所帶的資訊。</p><p><code>el.value</code> 則是我們綁定表單元素，當輸入資訊時就會夾帶在 <code>value</code> 上。<br>兩者並不相同。</p><p><a href="https://codepen.io/popeye_ux/pen/mdMzvZp">今天的每日任務</a> 。</p>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript, JS直播班</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS直播班 作業檢討--旅遊套票作業</title>
    <link href="/2021/11/27/travelticket/"/>
    <url>/2021/11/27/travelticket/</url>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/9DdScYX.jpg"></p><p>這是六角學院JS直播班第五周作業的檢討。</p><p>作業有現成的 HTML 與 CSS模板，是一個旅遊促銷套票的網站，可以新增套票會同步渲染到畫面上。</p><span id="more"></span><p><a href="https://codepen.io/popeye_ux/pen/PoKQMyL">我的作業CODE PEN</a></p><p>這也是我第一次抓資料渲染到網頁上，有些笨拙，也有些地方思慮不周，更有些地方根本沒有注意到就犯錯了。</p><p>所以我後來又去看了同學的作業，針對自己沒做好的地方改進，以下就是我的檢討：</p><h2 id="Level-2-把資料渲染到畫面上"><a href="#Level-2-把資料渲染到畫面上" class="headerlink" title="Level 2 把資料渲染到畫面上"></a>Level 2 把資料渲染到畫面上</h2><p>原本我是用字串累加，之後再innerHTML到綁定的DOM元素上：</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">renderScene</span><span class="token punctuation">(</span><span class="token parameter">datas</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> info <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>  datas<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    info <span class="token operator">+=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;li  class="ticketCard">&lt;div class="ticketCard-img">      &lt;a href="#">        &lt;img src="</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>item<span class="token punctuation">.</span>imgUrl<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">" alt="</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>item<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">">      &lt;/a>      &lt;div class="ticketCard-region"></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>item<span class="token punctuation">.</span>area<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&lt;/div>      &lt;div class="ticketCard-rank"></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>item<span class="token punctuation">.</span>rate<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&lt;/div>    &lt;/div>    &lt;div class="ticketCard-content">      &lt;div>        &lt;h3>          &lt;a href="#" class="ticketCard-name"></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>item<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&lt;/a>        &lt;/h3>        &lt;p class="ticketCard-description">        </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>item<span class="token punctuation">.</span>description<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">        &lt;/p>      &lt;/div>      &lt;div class="ticketCard-info">        &lt;p class="ticketCard-num">          &lt;span>&lt;i class="fas fa-exclamation-circle">&lt;/i>&lt;/span>          剩下最後 &lt;span id="ticketCard-num"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>item<span class="token punctuation">.</span>group<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> &lt;/span> 組        &lt;/p>        &lt;p class="ticketCard-price">          TWD &lt;span id="ticketCard-price"></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>item<span class="token punctuation">.</span>price<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&lt;/span>        &lt;/p>      &lt;/div>    &lt;/div>  &lt;/li></span><span class="token template-punctuation string">`</span></span>  <span class="token punctuation">&#125;</span>  <span class="token punctuation">)</span>  ticketInfo<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> info<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>後來看到同學更好的作法：</p><ul><li>把要渲染到畫面上的卡片，單獨做成一個函式，回傳( return ) HTML 碼的字串。</li><li>再用陣列 reduce 的方法，把卡片渲染出來。</li></ul><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">cardTemplate</span><span class="token punctuation">(</span><span class="token parameter">dataObj</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">    &lt;li class="ticketCard">        &lt;div class="ticketCard-img">          &lt;a href="#">            &lt;img src="</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>dataObj<span class="token punctuation">.</span>imgUrl<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">" alt="圖片">          &lt;/a>          &lt;div class="ticketCard-region"></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>dataObj<span class="token punctuation">.</span>area<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&lt;/div>          &lt;div class="ticketCard-rank"></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>dataObj<span class="token punctuation">.</span>rate<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&lt;/div>        &lt;/div>        &lt;div class="ticketCard-content">          &lt;div>            &lt;h3>              &lt;a href="#" class="ticketCard-name"></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>dataObj<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&lt;/a>            &lt;/h3>            &lt;p class="ticketCard-description">              </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>dataObj<span class="token punctuation">.</span>description<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">            &lt;/p>          &lt;/div>          &lt;div class="ticketCard-info">            &lt;p class="ticketCard-num">              &lt;span>&lt;i class="fas fa-exclamation-circle">&lt;/i>&lt;/span>              剩下最後 &lt;span id="ticketCard-num"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>dataObj<span class="token punctuation">.</span>group<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> &lt;/span> 組            &lt;/p>            &lt;p class="ticketCard-price">              TWD &lt;span id="ticketCard-price">$ </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>dataObj<span class="token punctuation">.</span>price<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&lt;/span>            &lt;/p>          &lt;/div>        &lt;/div>      &lt;/li>    </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>用陣列的reduce方法累加，把版型組起來。</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token parameter">newData <span class="token operator">=</span> data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  ticketCardArea<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> newData<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">accumulator<span class="token punctuation">,</span> currentValue</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newData<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> accumulator <span class="token operator">+</span> <span class="token function">cardTemp</span><span class="token punctuation">(</span>currentValue<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><ul><li>初始值設為 ‘’ 空字串，傳入累加器 prev 。</li><li>第二個參數則帶入 ticketData 陣列裡的物件，讓它們傳入 cardTemplate 這個函式去累加。</li></ul><p>這種方法把版型的資料跟組版的方法分開，我覺得更有邏輯。</p><p>版型在網頁一載進來時，data陣列中的資料就要渲染在卡片上，所以要在 JS 程式碼中先呼叫 render 函式。</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h2 id="LEVEL-3-利用表單新增票卡"><a href="#LEVEL-3-利用表單新增票卡" class="headerlink" title="LEVEL 3 利用表單新增票卡"></a>LEVEL 3 利用表單新增票卡</h2><p>這部分我的錯誤比較多：</p><ul><li>成功新增套票後，所有的輸入欄位可以做清空。</li><li>套票組數欄位輸入值新增進去會呈現 undefined，程式碼第 108 行在抓取 HTML 元素時有誤，應該是抓取組數欄位的 input 標籤 id 元素。</li><li>ticketObj 物件變數缺少了 rate 套票星級屬性。</li><li>金額、組數、星級的 type 都需要為 Number，建議可以在程式碼第 124~126 行做轉型。</li></ul><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">//新增套票邏輯</span><span class="token comment">//綁定表單輸入框的元素</span><span class="token keyword">const</span> ticketName <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#ticketName'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> ticketImgUrl <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#ticketImgUrl'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> ticketRegion <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#ticketRegion'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> ticketPrice <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#ticketPrice'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> ticketNum <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#ticketNum'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> ticketRate <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#ticketRate'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> ticketDescription <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#ticketDescription'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//綁掉輸送按鈕</span><span class="token keyword">const</span> addBtn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.addTicket-btn'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//對按鈕做事件監聽</span>addBtn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>ticketName<span class="token punctuation">.</span>value <span class="token operator">===</span> <span class="token string">''</span> <span class="token operator">||</span> ticketImgUrl<span class="token punctuation">.</span>value <span class="token operator">===</span> <span class="token string">''</span> <span class="token operator">||</span> ticketRegion<span class="token punctuation">.</span>value <span class="token operator">===</span> <span class="token string">''</span> <span class="token operator">||</span> ticketDescription<span class="token punctuation">.</span>value <span class="token operator">===</span> <span class="token string">''</span> <span class="token operator">||</span> ticketDescription<span class="token punctuation">.</span>value <span class="token operator">===</span> <span class="token string">''</span> <span class="token operator">||</span> ticketNum<span class="token punctuation">.</span>value <span class="token operator">===</span> <span class="token string">''</span> <span class="token operator">||</span> ticketPrice<span class="token punctuation">.</span>value <span class="token operator">===</span> <span class="token string">''</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'有些資訊沒有填寫！！！'</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>ticketDescription<span class="token punctuation">.</span>value<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'套票描述的字數超過 100 字！！！'</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>ticketRate<span class="token punctuation">.</span>value <span class="token operator">></span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'套票星級要在 10 (含10) 以下！！！'</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">let</span> ticketObj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  ticketObj<span class="token punctuation">.</span>id <span class="token operator">=</span> data<span class="token punctuation">.</span>length<span class="token punctuation">;</span>  ticketObj<span class="token punctuation">.</span>name <span class="token operator">=</span> ticketName<span class="token punctuation">.</span>value<span class="token punctuation">;</span>  ticketObj<span class="token punctuation">.</span>imgUrl <span class="token operator">=</span> ticketImgUrl<span class="token punctuation">.</span>value<span class="token punctuation">;</span>  ticketObj<span class="token punctuation">.</span>area <span class="token operator">=</span> ticketRegion<span class="token punctuation">.</span>value<span class="token punctuation">;</span>  ticketObj<span class="token punctuation">.</span>description <span class="token operator">=</span> ticketDescription<span class="token punctuation">.</span>value<span class="token punctuation">;</span>  ticketObj<span class="token punctuation">.</span>group <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span>ticketNum<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>  ticketObj<span class="token punctuation">.</span>price <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span>ticketPrice<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>  ticketObj<span class="token punctuation">.</span>rate <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span>ticketRate<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>  data<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>ticketObj<span class="token punctuation">)</span><span class="token punctuation">;</span>  data<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">renderScene</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> form <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.addTicket-form'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  form<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>為了要捉到表單的資料，我綁定了許多輸入框的DOM元素，結果還少捉了一個，真的是眼花了。</p><p>後來發現同學的方法非常聰明，監聽整個 <code>&lt;form&gt;</code> 元素，而不是一個一個的輸入框，然後用陣列的展開運算子(…)，把每個輸入框的元素轉為一個一個物件，再用 foreEach() 去取輸入的值，這樣就大功告成了，不用再一一去綁定輸入框的DOM元素來取值。</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">addData</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> formArray <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>e<span class="token punctuation">.</span>target<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">//展開運算子(...) 會把每個輸入框變成一個物件，捉進陣列</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>formArray<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//最後一個物件是 submit 按鈕，所以要把它去除掉</span>    formArray<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">id</span><span class="token operator">:</span> ticketData<span class="token punctuation">.</span>length<span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token comment">//必須去HTML改name的內容，讓它對應到資料的物件</span>    formArray<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      obj<span class="token punctuation">[</span>item<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> item<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//把數字的字串轉為數字</span>    obj<span class="token punctuation">.</span>group <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>group<span class="token punctuation">)</span><span class="token punctuation">;</span>    obj<span class="token punctuation">.</span>price <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>price<span class="token punctuation">)</span><span class="token punctuation">;</span>    obj<span class="token punctuation">.</span>rate <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>rate<span class="token punctuation">)</span>    <span class="token comment">//表單驗證</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>description<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'套票描述的字數超過 100 字！！！'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token punctuation">.</span>description <span class="token operator">===</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'套票描述沒有填'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>rate <span class="token operator">></span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'套票星級要在 10 (含10) 以下！！！'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    ticketData<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    regionSearch<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>    formEl<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="LEVEL3-城市選單：選擇城市-變換網頁內容"><a href="#LEVEL3-城市選單：選擇城市-變換網頁內容" class="headerlink" title="LEVEL3 城市選單：選擇城市 變換網頁內容"></a>LEVEL3 城市選單：選擇城市 變換網頁內容</h2><p>這個部分，我目前的程度寫出來是這樣子：</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">//選取城市，渲染出符合城市條件的卡片</span><span class="token keyword">function</span> <span class="token function">selectCity</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token comment">// ''空字串布林值為 false，利用!反轉變成 true</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">render</span><span class="token punctuation">(</span>ticketData<span class="token punctuation">)</span>      searchResultText<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">本次搜尋共 </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>ticketData<span class="token punctuation">.</span>length<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> 筆資料</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">let</span> selectedCity <span class="token operator">=</span> ticketData<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value <span class="token operator">===</span> item<span class="token punctuation">.</span>area<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>selectedCity<span class="token punctuation">)</span><span class="token punctuation">;</span>      searchResultText<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">本次搜尋共 </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>selectedCity<span class="token punctuation">.</span>length<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> 筆資料</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>      <span class="token function">render</span><span class="token punctuation">(</span>selectedCity<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>但是我也有看到同學利用「三元運算子」寫出很簡短的程式碼：</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">selectCity</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> filterStr <span class="token operator">=</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">;</span>    filterStr <span class="token operator">===</span> <span class="token string">''</span> <span class="token operator">?</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">render</span><span class="token punctuation">(</span>ticketData<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=></span> item<span class="token punctuation">.</span>area <span class="token operator">===</span> filterStr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>他山之石可以攻錯，如果可以學習別人好的地方，來讓自己進步，就可以讓自己離目標更近一點。</p><p><a href="https://codepen.io/popeye_ux/pen/VwzExxo">修改過後的作業</a></p><h3 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h3><ul><li><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Operators/Spread_syntax">MDN Spread syntax (…)</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript, JS直播班, array</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS直播班 作業檢討--高雄里長OPEN DATA作業</title>
    <link href="/2021/11/25/villageOpenData/"/>
    <url>/2021/11/25/villageOpenData/</url>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/f7TZ3LP.jpg"></p><p>六角學院JS直播班第五周的小組任務，是要撈 《高雄的里長資訊》，我自己做完作業之後，再參考同學寫的code，我認為自己可以再改進優化：</p><span id="more"></span><p>作業要求的任務如下：</p><ul><li>里長男女生人數比例</li><li>前鎮區有幾個里長</li><li>三民區有幾個女性里長</li><li>無黨籍、民主進步黨、中國國民黨各佔幾位？</li><li>所有區里長人數都整理在一個物件裡</li></ul><p><a href="https://codepen.io/popeye_ux/pen/dyzeLbG">我的高雄市里長資訊作業</a></p><p>資料格式是一個陣列包著物件的JSON檔，物件的屬性為中文命名：</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span>    <span class="token literal-property property">區別</span><span class="token operator">:</span> <span class="token string">"鹽埕區"</span><span class="token punctuation">,</span>    <span class="token literal-property property">里別</span><span class="token operator">:</span> <span class="token string">"藍橋里"</span><span class="token punctuation">,</span>    <span class="token literal-property property">里長姓名</span><span class="token operator">:</span> <span class="token string">"陳本興"</span><span class="token punctuation">,</span>    <span class="token literal-property property">性別</span><span class="token operator">:</span> <span class="token string">"男"</span><span class="token punctuation">,</span>    <span class="token literal-property property">生日</span><span class="token operator">:</span> <span class="token string">"0380817"</span><span class="token punctuation">,</span>    <span class="token literal-property property">辦公室電話</span><span class="token operator">:</span> <span class="token string">"075219559"</span><span class="token punctuation">,</span>    <span class="token literal-property property">住家電話</span><span class="token operator">:</span> <span class="token string">"075219559"</span><span class="token punctuation">,</span>    <span class="token literal-property property">手機</span><span class="token operator">:</span> <span class="token string">"0921236319"</span><span class="token punctuation">,</span>    <span class="token literal-property property">信箱</span><span class="token operator">:</span> <span class="token string">"kh01001@kcg.gov.tw"</span><span class="token punctuation">,</span>    <span class="token literal-property property">辦公室</span><span class="token operator">:</span> <span class="token string">"鹽埕區藍橋里建國四路344號1樓"</span><span class="token punctuation">,</span>    <span class="token literal-property property">黨籍</span><span class="token operator">:</span> <span class="token string">"其他"</span><span class="token punctuation">,</span>    <span class="token literal-property property">經歷</span><span class="token operator">:</span> <span class="token string">"改制後第3.4屆,合併後第1.2屆"</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//以下省略</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>以下一一來檢討：</p><h2 id="任務一：里長男女生人數比例"><a href="#任務一：里長男女生人數比例" class="headerlink" title="任務一：里長男女生人數比例"></a>任務一：里長男女生人數比例</h2><p>我的做法是用陣列的 filter 方法，分別撈出男、女里長的資訊，再來算百分比就好了。</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">//里長人數等於陣列長度</span><span class="token keyword">let</span> villageChiefNum <span class="token operator">=</span> data<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token comment">//filter 方法撈出 ["性別"]為男性的里長</span><span class="token keyword">let</span> maleNum <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=></span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> item<span class="token punctuation">[</span><span class="token string">"性別"</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">"男"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">//filter 方法撈出 ["性別"]為女性的里長</span><span class="token keyword">let</span> femaleNum <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> item<span class="token punctuation">[</span><span class="token string">"性別"</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">"女"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">let</span> malePercent <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>maleNum<span class="token punctuation">.</span>length<span class="token operator">/</span>villageChiefNum<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> femalePercent <span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">(</span>femaleNum<span class="token punctuation">.</span>length<span class="token operator">/</span>villageChiefNum<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">高雄市的男性里長有 </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>maleNum<span class="token punctuation">.</span>length<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> 位，佔所有里長 </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>malePercent<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> %的比例；女性里長有 </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>femaleNum<span class="token punctuation">.</span>length<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> 位，佔所有里長 </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>femalePercent<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> %的比例</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token comment">//高雄市的男性里長有 704 位，佔所有里長 79.01 %的比例；</span><span class="token comment">//女性里長有 187 位，佔所有里長 20.99 %的比例</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>而同學的做法如下：</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">const</span> <span class="token function-variable function">genderRatioCalc</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">//設定初始值  </span>    <span class="token keyword">let</span> maleNum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> femaleNum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">//用if else來處理男女人數</span>    data<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">[</span><span class="token string">'性別'</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">'男'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            maleNum <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            femaleNum <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">let</span> malePercent <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>maleNum <span class="token operator">/</span> villageChiefNum<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> femalePercent <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>femaleNum <span class="token operator">/</span> villageChiefNum<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">高雄市的男性里長有 </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>maleNum<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> 位，佔所有里長 </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>malePercent<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> %的比例；    女性里長有 </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>femaleNum<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> 位，佔所有里長 </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>femalePercent<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> %的比例</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token function">genderRatioCalc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="任務一檢討："><a href="#任務一檢討：" class="headerlink" title="任務一檢討："></a>任務一檢討：</h3><ul><li>我沒有先用 if else 去想，而事先想用 filter 撈出陣列，跳過邏輯判斷的部分。</li><li>沒用 input output 的觀念來思考，以至於忽略了可以封裝成一個函式。</li></ul><hr><h2 id="任務二：前鎮區有幾個里長"><a href="#任務二：前鎮區有幾個里長" class="headerlink" title="任務二：前鎮區有幾個里長"></a>任務二：前鎮區有幾個里長</h2><p>我這樣做：</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">let</span> villageArr <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=></span> item<span class="token punctuation">[</span><span class="token string">"區別"</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">"前鎮區"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">前鎮區里長有</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>villageArr<span class="token punctuation">.</span>length<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">位</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><h2 id="任務三：-三民區有幾個女性里長"><a href="#任務三：-三民區有幾個女性里長" class="headerlink" title="任務三： 三民區有幾個女性里長"></a>任務三： 三民區有幾個女性里長</h2><p>我這樣做：</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">let</span> sanminDistrictFemale <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>item<span class="token punctuation">[</span><span class="token string">"區別"</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">"三民區"</span> <span class="token operator">&amp;&amp;</span> item<span class="token punctuation">[</span><span class="token string">"性別"</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">"女"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">三民區女性區長有</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>sanminDistrictFemale<span class="token punctuation">.</span>length<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">位</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>同學把任務二跟三包裝成一個函式來處理：</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">villageChief</span><span class="token punctuation">(</span>villageName<span class="token punctuation">,</span> sex <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//設一個空陣列</span>    <span class="token keyword">let</span> villageArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">//如果性別為空字串(沒有查詢)，只要處理 里長的人數</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>sex <span class="token operator">===</span> <span class="token string">''</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        villageArr <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=></span> item<span class="token punctuation">[</span><span class="token string">'區別'</span><span class="token punctuation">]</span> <span class="token operator">===</span> villageName<span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>villageArr<span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>villageName<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">里長有</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>villageArr<span class="token punctuation">.</span>length<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">位</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//否則 里長的人數 與 性別都做處理</span>        villageArr <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=></span> item<span class="token punctuation">[</span><span class="token string">"區別"</span><span class="token punctuation">]</span> <span class="token operator">===</span> villageName <span class="token operator">&amp;&amp;</span> item<span class="token punctuation">[</span><span class="token string">"性別"</span><span class="token punctuation">]</span> <span class="token operator">===</span> sex<span class="token punctuation">)</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>villageName<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">有</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>villageArr<span class="token punctuation">.</span>length<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">位</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>sex<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">里長</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">villageChief</span><span class="token punctuation">(</span><span class="token string">'前鎮區'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">villageChief</span><span class="token punctuation">(</span><span class="token string">'三民區'</span><span class="token punctuation">,</span><span class="token string">'女'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="任務二、三檢討："><a href="#任務二、三檢討：" class="headerlink" title="任務二、三檢討："></a>任務二、三檢討：</h3><ul><li>沒用 input output 的觀念來思考。</li><li>根本沒想到 兩個任務可以合併來寫。</li><li>忽略了參數屬值的設定( sex &#x3D;&#x3D;&#x3D; ‘’ )，可以拿來做 if else 判斷，這個要學起來。</li></ul><hr><h2 id="任務四：無黨籍、民主進步黨、中國國民黨各佔幾位？"><a href="#任務四：無黨籍、民主進步黨、中國國民黨各佔幾位？" class="headerlink" title="任務四：無黨籍、民主進步黨、中國國民黨各佔幾位？"></a>任務四：無黨籍、民主進步黨、中國國民黨各佔幾位？</h2><p>因為有指定黨籍，所以我這麼做：</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">let</span> party <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string-property property">"國民黨"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token string-property property">"民主進步黨"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token string-property property">"中國國民黨"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>data<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    party<span class="token punctuation">[</span>item<span class="token punctuation">[</span><span class="token string">"黨籍"</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">高雄無黨籍有</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>party<span class="token punctuation">[</span><span class="token string">"無黨籍"</span><span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">位</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">高雄民主進步黨有</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>party<span class="token punctuation">[</span><span class="token string">"民主進步黨"</span><span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">位</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">高雄中國國民黨有</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>party<span class="token punctuation">[</span><span class="token string">"中國國民黨"</span><span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">位</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>但是同學這樣做：</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">const</span> <span class="token function-variable function">partChiefCount</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">party</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> partyChiefNum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    data<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">[</span><span class="token string">'黨籍'</span><span class="token punctuation">]</span> <span class="token operator">===</span> party<span class="token punctuation">)</span> partyChiefNum <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>party<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">共有</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>partyChiefNum<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">位里長</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">partChiefCount</span><span class="token punctuation">(</span><span class="token string">'無黨籍'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">partChiefCount</span><span class="token punctuation">(</span><span class="token string">'民主進步黨'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">partChiefCount</span><span class="token punctuation">(</span><span class="token string">'中國國民黨'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><ul><li>一樣是忽略了 input 與 output。</li><li>如果今天不是指定要那些黨，我就要改變做法了。</li></ul><h3 id="任務五：所有區里長人數都整理在一個物件裡"><a href="#任務五：所有區里長人數都整理在一個物件裡" class="headerlink" title="任務五：所有區里長人數都整理在一個物件裡"></a>任務五：所有區里長人數都整理在一個物件裡</h3><p>作業要求最後輸出時要變成以下的樣子：</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">let</span> total <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string-property property">"前鎮區"</span><span class="token operator">:</span><span class="token number">30</span><span class="token punctuation">,</span>    <span class="token string-property property">"三民區"</span><span class="token operator">:</span><span class="token number">50</span><span class="token punctuation">,</span>    <span class="token string-property property">"苓雅區"</span><span class="token operator">:</span><span class="token number">79</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>我的想法：</p><ol><li>撈出資料中所有的區，把它放入一個空陣列中。</li><li>過濾掉重複的區 ，變成一個新的陣列 distArry</li><li>把各區的名字變成物件 distObj 的屬性</li><li>把data的區別屬性，與distObj的區別屬性比對，兩者相同就加一<figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">//撈出資料中所有的區，放入一個空陣列中：</span><span class="token keyword">let</span> dist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>data<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    distName <span class="token operator">=</span> item<span class="token punctuation">[</span><span class="token string">"區別"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    dist<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>distName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">//過濾掉重複的區</span><span class="token keyword">let</span> distArry <span class="token operator">=</span> dist<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> dist<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">===</span> index<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">//把所有的區名變成物件屬性，預設值為 0</span><span class="token keyword">let</span> distObj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>distArry<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    distObj<span class="token punctuation">[</span>item<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">//跑data陣列物件與distObj物件比對，區別的值與物件的屬性一樣，那物件那邊的屬性值就加一</span><span class="token comment">//三角關係：data，distArry,distObj</span>data<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    distObj<span class="token punctuation">[</span>item<span class="token punctuation">[</span><span class="token string">'區別'</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure></li></ol><p>同學的做法，又快又簡單：</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">let</span> total <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token function-variable function">organizeChiefOfVillage</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    data<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token comment">//如果物件沒有該屬性的話，則設置屬性，並給初始值數值 1</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>total<span class="token punctuation">[</span>item<span class="token punctuation">[</span><span class="token string">'區別'</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            total<span class="token punctuation">[</span>item<span class="token punctuation">[</span><span class="token string">'區別'</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 如果物件有屬性，則直接+1</span>            total<span class="token punctuation">[</span>item<span class="token punctuation">[</span><span class="token string">'區別'</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">organizeChiefOfVillage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>total<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="任務五檢討"><a href="#任務五檢討" class="headerlink" title="任務五檢討"></a>任務五檢討</h3><p>可能是剛做完陣列方法的筆記，對於 filter 的印象太過深刻，所以思考路徑會一直往 filter 跑，完全忘記用 if else 也可以篩選，還有是物件取值的方法不夠熟練，所以不會往那邊去想解決方法。</p><p>最後要做的時候要想 input 與 output，盡量想想怎樣可以更完整的解決問題。</p>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript, JS直播班, array</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>實用陣列操作大全-進階使用方法</title>
    <link href="/2021/11/20/arrayAdvance/"/>
    <url>/2021/11/20/arrayAdvance/</url>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/1HmPkkR.jpg"><br>陣列裡是有順序的集合，每個元素因為有索引。所以可以用迴圈的方法來遍歷陣列裡的元素，來進行有條件的篩選。</p><span id="more"></span><p>最常用的就是 for 迴圈處理陣列元素的遍歷問題。</p><p>它的撰寫規則如下：</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">[</span>initialization<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token punctuation">[</span>condition<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token punctuation">[</span>final<span class="token operator">-</span>expression<span class="token punctuation">]</span><span class="token punctuation">)</span>   statement<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><ul><li>initialization：初始表達式，也就是按下計數器，從條件的初始值開始計算。</li><li>condition：判斷條件成不成立，如果回傳 true ,則迴圈繼續執行；如果為 false 則迴圈終止。</li><li>final-expression：遞增表達式，每次迴圈執行完，判斷條件加 1 ，直到判斷條件不成立。</li></ul><p>假設我們要依序印出 avangers 這個超級英雄的陣列元素，用 for 迴圈可以這樣做：</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">const</span> avengers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'鋼鐵人'</span><span class="token punctuation">,</span> <span class="token string">'美國隊長'</span><span class="token punctuation">,</span> <span class="token string">'浩克'</span><span class="token punctuation">,</span> <span class="token string">'雷神'</span><span class="token punctuation">,</span> <span class="token string">'驚奇隊長'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> avengers<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i <span class="token operator">+</span> avengers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 依序印出：</span><span class="token comment">// 0鋼鐵人</span><span class="token comment">// 1美國隊長</span><span class="token comment">// 2浩克</span><span class="token comment">// 3雷神</span><span class="token comment">// 4驚奇隊長</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>可以看出 for 迴圈是依照條件，不斷地透過索引去撈出陣列中對應的元素（遍歷整個陣列），然後一次一次印出迴圈中的元素。直到條件不符合，才終止迴圈的執行。</p><p>但是現在操作陣列不用那麼麻煩，ES5之後，新增了許多操作陣列的方法，讓我們一起來看看吧！</p><h2 id="Array-prototype-forEach"><a href="#Array-prototype-forEach" class="headerlink" title="Array.prototype.forEach()"></a>Array.prototype.forEach()</h2><blockquote><p>forEach() 方法會將陣列內的每個元素，皆傳入並執行給定的函式一次。<br>直接修改原本的陣列。</p></blockquote><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx">arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">currentValue<span class="token punctuation">[</span><span class="token punctuation">,</span> index<span class="token punctuation">[</span><span class="token punctuation">,</span> array<span class="token punctuation">]</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//your iterator</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><ul><li>function ： 給定的函式，是一個 callBack function，會把陣列中的每個元素當作參數帶入陣列中，每個元素執行一次。</li><li>currentValue ： 這個參數代表陣列中輪到被函式處理的元素。</li><li>index ： 這個參數代表陣列中正在被函式處理的元素的索引值。可省略。</li><li>array ： 代表被執行的陣列。可省略。</li></ul><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">const</span> avengers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'鋼鐵人'</span><span class="token punctuation">,</span> <span class="token string">'美國隊長'</span><span class="token punctuation">,</span> <span class="token string">'浩克'</span><span class="token punctuation">,</span> <span class="token string">'雷神'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> newArray <span class="token operator">=</span> avengers<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span>index<span class="token punctuation">,</span>array</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>item<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> 的索引值是 </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>index<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">，陣列的內容是 [</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>array<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">]</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// 鋼鐵人 的索引值是 0，陣列的內容是 [鋼鐵人,美國隊長,浩克,雷神]</span><span class="token comment">// 美國隊長 的索引值是 1，陣列的內容是 [鋼鐵人,美國隊長,浩克,雷神]</span><span class="token comment">// 浩克 的索引值是 2，陣列的內容是 [鋼鐵人,美國隊長,浩克,雷神]</span><span class="token comment">// 雷神 的索引值是 3，陣列的內容是 [鋼鐵人,美國隊長,浩克,雷神]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newArray<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// undefined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>和 for 迴圈比較起來， forEach 不用設定任何條件，也不用初始化，就可以把每個元素傳入函式中執行。</p><p>要注意的是 forEach 方法不會回傳任何的值，所以 console.log 的值是「 Uncaught ReferenceError: newArray is not defined 」。</p><p>另外，for 迴圈可以使用 break 跳出，但是 forEach()如果使用break會紅字報錯。</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">const</span> avengers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'鋼鐵人'</span><span class="token punctuation">,</span> <span class="token string">'美國隊長'</span><span class="token punctuation">,</span> <span class="token string">'浩克'</span><span class="token punctuation">,</span> <span class="token string">'雷神'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>avengers<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>item <span class="token operator">===</span><span class="token string">'美國隊長'</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token comment">//Uncaught SyntaxError: Illegal break statement </span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>forEach也不會理會使用return的方法中止程式執行，會一路跑完。</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">const</span> avengers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'鋼鐵人'</span><span class="token punctuation">,</span> <span class="token string">'美國隊長'</span><span class="token punctuation">,</span> <span class="token string">'浩克'</span><span class="token punctuation">,</span> <span class="token string">'雷神'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>avengers<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>item <span class="token operator">===</span><span class="token string">'美國隊長'</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>avengers<span class="token punctuation">)</span><span class="token comment">//["鋼鐵人","美國隊長","浩克","雷神"]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="array-prototype-map"><a href="#array-prototype-map" class="headerlink" title="array.prototype.map"></a>array.prototype.map</h2><blockquote><p>map() 方法會建立一個新的陣列，其內容為原陣列的每一個元素經由回呼函式運算後所回傳的結果之集合。</p></blockquote><p>也就是我們使用 map() 的時候，會透過給定的函式條件處理原來的陣列，再回傳一個新的陣列。</p><p>語法：</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">let</span> new_array <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">callback</span><span class="token punctuation">(</span> <span class="token parameter">currentValue<span class="token punctuation">[</span><span class="token punctuation">,</span> index<span class="token punctuation">[</span><span class="token punctuation">,</span> array<span class="token punctuation">]</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// return element for new_array</span><span class="token punctuation">&#125;</span><span class="token punctuation">[</span><span class="token punctuation">,</span> thisArg<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><ul><li>function ： 給定的函式是一個回呼函式。會把陣列中的每個元素當作參數帶入陣列中，每個元素執行一次。</li><li>index ： 處理中的元素索引。</li><li>array ： 當前函式處理的陣列。</li></ul><p>範例：找出名字的字串長度是2的超級英雄。</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">const</span> avengers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'鋼鐵人'</span><span class="token punctuation">,</span> <span class="token string">'美國隊長'</span><span class="token punctuation">,</span> <span class="token string">'浩克'</span><span class="token punctuation">,</span> <span class="token string">'雷神'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> newArray <span class="token operator">=</span> avengers<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> item<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newArray<span class="token punctuation">)</span><span class="token comment">//[undefined, undefined, '浩克', '雷神']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>map() 的特色是：</p><ol><li>適合用來篩選特定資料。</li><li>map() 所帶函式回傳的值，會組成一個新的陣列回傳。</li><li>不會改變原來的陣列。</li><li>回傳的陣列長度會等於原始的陣列長度。</li><li>如果沒有回傳值，則元素的值為undefined。</li></ol><p>上面的範例，如果寫法照搬，只把 map 改成 forEach：</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">const</span> avengers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'鋼鐵人'</span><span class="token punctuation">,</span> <span class="token string">'美國隊長'</span><span class="token punctuation">,</span> <span class="token string">'浩克'</span><span class="token punctuation">,</span> <span class="token string">'雷神'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> newArray <span class="token operator">=</span> avengers<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> item<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newArray<span class="token punctuation">)</span><span class="token comment">//undefined</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>avengers<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">"鋼鐵人"</span><span class="token punctuation">,</span><span class="token string">"美國隊長"</span><span class="token punctuation">,</span><span class="token string">"浩克"</span><span class="token punctuation">,</span><span class="token string">"雷神"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>forEach 方法不會回傳值，所以 newArray 查詢的結果是 undefined。而 avengers 原始陣列也沒有被改變。</p><p>如果要改變原始陣列的話，要這樣子寫：</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">const</span> avengers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'鋼鐵人'</span><span class="token punctuation">,</span> <span class="token string">'美國隊長'</span><span class="token punctuation">,</span> <span class="token string">'浩克'</span><span class="token punctuation">,</span> <span class="token string">'雷神'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> newArray <span class="token operator">=</span> avengers<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span>index<span class="token punctuation">,</span>array</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        array<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> item<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>      array<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"undefined"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newArray<span class="token punctuation">)</span><span class="token comment">//undefined</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>avengers<span class="token punctuation">)</span><span class="token comment">//['undefined', 'undefined', '浩克', '雷神']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>因為forEach不會回傳值， let newArray &#x3D; 這一段其實不用寫了，寫出來只是為了方便比較。</p><h2 id="Array-prototype-filter"><a href="#Array-prototype-filter" class="headerlink" title="Array.prototype.filter()"></a>Array.prototype.filter()</h2><blockquote><p>filter() 方法會建立一個經指定之函式運算後，由原陣列中通過該函式檢驗之元素所構成的新陣列。</p></blockquote><p>語法如下：</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">var</span> newArray <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token function">callback</span><span class="token punctuation">(</span>element<span class="token punctuation">[</span><span class="token punctuation">,</span> index<span class="token punctuation">[</span><span class="token punctuation">,</span> array<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">,</span> thisArg<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><ul><li>element ： 當前處理到的元素。</li><li>index ： 給定函式目前處理的元素索引。可省略。</li><li>array ： 給定函式目前處理的陣列。可省略。</li></ul><p>範例：</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">const</span> avengers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'鋼鐵人'</span><span class="token punctuation">,</span> <span class="token string">'美國隊長'</span><span class="token punctuation">,</span> <span class="token string">'浩克'</span><span class="token punctuation">,</span> <span class="token string">'雷神'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> newArray <span class="token operator">=</span> avengers<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> item<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">2</span> <span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newArray<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">"浩克"</span><span class="token punctuation">,</span><span class="token string">"雷神"</span><span class="token punctuation">]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>avengers<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">"鋼鐵人"</span><span class="token punctuation">,</span><span class="token string">"美國隊長"</span><span class="token punctuation">,</span><span class="token string">"浩克"</span><span class="token punctuation">,</span><span class="token string">"雷神"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>可以觀察到 filter 過濾出字串長度為 2 的陣列元素，並回傳一個新的陣列。而原來的陣列沒被改變。</p><p>filter()也可以用來過濾掉陣列中的重複值：</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">const</span> avengers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'鋼鐵人'</span><span class="token punctuation">,</span> <span class="token string">'美國隊長'</span><span class="token punctuation">,</span> <span class="token string">'浩克'</span><span class="token punctuation">,</span><span class="token string">'鋼鐵人'</span><span class="token punctuation">,</span> <span class="token string">'雷神'</span><span class="token punctuation">,</span><span class="token string">'美國隊長'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> newArray <span class="token operator">=</span> avengers<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span>index<span class="token punctuation">,</span>array</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>avengers<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//回傳第一個找到的元素索引</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//函式當前處理的元素索引</span>    <span class="token keyword">return</span> avengers<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">===</span> index<span class="token punctuation">;</span>    <span class="token comment">//當第一個找到的元素索引等於函式目前處理的元素索引</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newArray<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//["鋼鐵人","美國隊長","浩克","雷神"]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">const</span> avengers <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span>        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'鋼鐵人'</span><span class="token punctuation">,</span>        <span class="token literal-property property">firePower</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>        <span class="token literal-property property">bodyForce</span><span class="token operator">:</span> <span class="token number">5</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span>        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'美國隊長'</span><span class="token punctuation">,</span>        <span class="token literal-property property">firePower</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>        <span class="token literal-property property">bodyForce</span><span class="token operator">:</span> <span class="token number">8</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span>        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'浩克'</span><span class="token punctuation">,</span>        <span class="token literal-property property">firePower</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>        <span class="token literal-property property">bodyForce</span><span class="token operator">:</span> <span class="token number">10</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token keyword">const</span>  newAvengers<span class="token operator">=</span> avengers<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">member</span> <span class="token operator">=></span> member<span class="token punctuation">.</span>firePower <span class="token operator">>=</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newAvengers<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>回傳值為一個新的陣列，陣列裡有 2 個物件， firePower 都大於或等於 5 ：<br><img src="https://i.imgur.com/buYi4MP.png"></p><h2 id="Array-prototype-every"><a href="#Array-prototype-every" class="headerlink" title="Array.prototype.every()"></a>Array.prototype.every()</h2><blockquote><p>every() 方法會測試陣列中的所有元素是否都通過了由給定之函式所實作的測試。<br>回傳值為布林值， true 或 false。</p></blockquote><p>every() 方法可以用來檢測陣列中的元素是否符合特定條件。</p><p>語法：</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">var</span> newArray <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span><span class="token function">callback</span><span class="token punctuation">(</span>currentValue<span class="token punctuation">[</span><span class="token punctuation">,</span> index<span class="token punctuation">[</span><span class="token punctuation">,</span> array<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">,</span> thisArg<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><ul><li>currentValue ： 目前正被回呼函式處理的元素。</li><li>index ： 目前被處理元素的陣列索引。可省略。</li><li>array ： 目前被處理的陣列。可省略。<figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">const</span> avengers <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span>        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'鋼鐵人'</span><span class="token punctuation">,</span>        <span class="token literal-property property">firePower</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>        <span class="token literal-property property">bodyForce</span><span class="token operator">:</span> <span class="token number">5</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span>        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'美國隊長'</span><span class="token punctuation">,</span>        <span class="token literal-property property">firePower</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>        <span class="token literal-property property">bodyForce</span><span class="token operator">:</span> <span class="token number">8</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span>        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'浩克'</span><span class="token punctuation">,</span>        <span class="token literal-property property">firePower</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>        <span class="token literal-property property">bodyForce</span><span class="token operator">:</span> <span class="token number">10</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token keyword">const</span>  isGoodPower<span class="token operator">=</span> avengers<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">member</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> member<span class="token punctuation">.</span>firePower <span class="token operator">>=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>isGoodPower<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false 並不是所有超級英雄的武裝火力都超過 5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure></li></ul><h2 id="Array-prototype-some"><a href="#Array-prototype-some" class="headerlink" title="Array.prototype.some()"></a>Array.prototype.some()</h2><blockquote><p>some() 方法會透過給定函式、測試陣列中是否至少有一個元素，通過該函式所實作的測試。這方法回傳的是布林值。</p></blockquote><p>也就是陣列中只要有一個元素符合指定函式的條件，就回傳 true ，否則就回傳 false 。</p><p>語法：</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">var</span> newArray <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token function">callback</span><span class="token punctuation">(</span>currentValue<span class="token punctuation">[</span><span class="token punctuation">,</span> index<span class="token punctuation">[</span><span class="token punctuation">,</span> array<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">,</span> thisArg<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><ul><li>currentValue ： 目前正被回呼函式處理的元素。</li><li>index ： 目前被處理元素的陣列索引。可省略。</li><li>array ： 目前被處理的陣列。可省略。</li></ul><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">const</span> avengers <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span>        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'鋼鐵人'</span><span class="token punctuation">,</span>        <span class="token literal-property property">firePower</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>        <span class="token literal-property property">bodyForce</span><span class="token operator">:</span> <span class="token number">5</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span>        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'美國隊長'</span><span class="token punctuation">,</span>        <span class="token literal-property property">firePower</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>        <span class="token literal-property property">bodyForce</span><span class="token operator">:</span> <span class="token number">8</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span>        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'浩克'</span><span class="token punctuation">,</span>        <span class="token literal-property property">firePower</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>        <span class="token literal-property property">bodyForce</span><span class="token operator">:</span> <span class="token number">10</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token keyword">const</span>  isGoodPower<span class="token operator">=</span> avengers<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">member</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> member<span class="token punctuation">.</span>firePower <span class="token operator">>=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>isGoodPower<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="Array-prototype-reduce"><a href="#Array-prototype-reduce" class="headerlink" title="Array.prototype.reduce()"></a>Array.prototype.reduce()</h2><p>MDN上寫著：</p><blockquote><p>reduce() 方法將一個累加器及陣列中每項元素（由左至右）傳入回呼函式，將陣列化為單一值。</p></blockquote><p>通常用來做陣列中數字的累加。</p><p>語法為：</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx">arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span>callback<span class="token punctuation">[</span>accumulator<span class="token punctuation">,</span> currentValue<span class="token punctuation">,</span> currentIndex<span class="token punctuation">,</span> array<span class="token punctuation">]</span><span class="token punctuation">,</span> initialValue<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><ul><li>accumulator：累加器，個別 currentValue 加總的累計值，如果是第一次呼叫，就看有沒有初始值來決定累加器一開始的值。</li><li>currentValue：陣列的個別元素</li><li>currentIndex：陣列的個別元素索引</li><li>array：回呼函式處理的陣列，可省略。</li><li>initialValue：預設值，可省略。</li></ul><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">const</span> avengers <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span>        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'鋼鐵人'</span><span class="token punctuation">,</span>        <span class="token literal-property property">firePower</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>        <span class="token literal-property property">bodyForce</span><span class="token operator">:</span> <span class="token number">5</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span>        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'美國隊長'</span><span class="token punctuation">,</span>        <span class="token literal-property property">firePower</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>        <span class="token literal-property property">bodyForce</span><span class="token operator">:</span> <span class="token number">8</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span>        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'浩克'</span><span class="token punctuation">,</span>        <span class="token literal-property property">firePower</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>        <span class="token literal-property property">bodyForce</span><span class="token operator">:</span> <span class="token number">10</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token keyword">let</span> reduceAvenger <span class="token operator">=</span> avengers<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">accumulator<span class="token punctuation">,</span> currentValue</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> accumulator <span class="token operator">+</span> currentValue<span class="token punctuation">.</span>firePower<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reduceAvenger<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[object Object]50  !!!!</span><span class="token comment">//因為未提供初始值，預設 陣列 第一個值，作為初始值。</span><span class="token comment">//第一個值為一個 Object，結果造成非預期的錯誤</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>因為未提供初始值，所以出現了錯誤。</p><p>沒有預設值的話，accumulator（累計值）會取陣列的第一個元素當作預設值。所以我們加上預設值，再來一次。</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">const</span> avengers <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span>        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'鋼鐵人'</span><span class="token punctuation">,</span>        <span class="token literal-property property">firePower</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>        <span class="token literal-property property">bodyForce</span><span class="token operator">:</span> <span class="token number">5</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span>        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'美國隊長'</span><span class="token punctuation">,</span>        <span class="token literal-property property">firePower</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>        <span class="token literal-property property">bodyForce</span><span class="token operator">:</span> <span class="token number">8</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span>        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'浩克'</span><span class="token punctuation">,</span>        <span class="token literal-property property">firePower</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>        <span class="token literal-property property">bodyForce</span><span class="token operator">:</span> <span class="token number">10</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token keyword">let</span> reduceAvenger <span class="token operator">=</span> avengers<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">accumulator<span class="token punctuation">,</span> currentValue</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> accumulator <span class="token operator">+</span> currentValue<span class="token punctuation">.</span>firePower<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reduceAvenger<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//15</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>reduce()也可以拿來合併陣列：</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">let</span> avengers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'鋼鐵人'</span><span class="token punctuation">,</span><span class="token string">'蜘蛛人'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'浩克'</span><span class="token punctuation">,</span><span class="token string">'雷神'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'美國隊長'</span><span class="token punctuation">,</span><span class="token string">'黑寡婦'</span><span class="token punctuation">]</span><span class="token punctuation">]</span>newAvengers <span class="token operator">=</span> avengers<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">accumulator<span class="token punctuation">,</span>currentValue</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> accumulator<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>currentValue<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newAvengers<span class="token punctuation">)</span><span class="token comment">//['鋼鐵人', '蜘蛛人', '浩克', '雷神', '美國隊長', '黑寡婦']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h3><ul><li><a href="https://wcc723.github.io/development/2020/10/05/js-for-loop-vs-for-each/">for 迴圈與 forEach 有什麼不同</a></li><li><a href="https://realdennis.medium.com/array-%E5%8E%9F%E5%9E%8B%E7%9A%84-foreach-%E6%9C%89%E5%A4%9A%E5%A5%BD%E7%94%A8-%E5%AD%B8%E6%9C%83%E9%AB%98%E9%9A%8E%E5%87%BD%E6%95%B8%E4%B9%8B%E5%BE%8C%E9%83%BD%E4%B8%8D%E6%83%B3%E5%AF%AB-javascript-%E4%BB%A5%E5%A4%96%E7%9A%84%E7%A8%8B%E5%BC%8F%E8%AA%9E%E8%A8%80%E4%BA%86-dc4b594a045a">Array 原型的 forEach 有多好用？ 學會高階函數之後都不想寫 JavaScript 以外的程式語言了</a></li><li><a href="https://dotblogs.com.tw/supershowwei/2020/10/19/094424">在 JavaScript 的 Array.prototype.forEach() 方法實現 continue; 及 break; 的效果</a></li><li><a href="https://blog.csdn.net/lihefei_coder/article/details/76736296">Javascript Array forEach()中无法return和break，代替方法some()与every()</a></li><li><a href="https://medium.com/jass-note/%E5%89%8D%E7%AB%AF%E7%AD%86%E8%A8%98-%E6%97%85%E9%81%8A%E7%B6%B2%E4%B9%8B%E8%A1%8C%E6%94%BF%E5%8D%80%E9%81%B8%E5%96%AE-%E5%88%86%E9%A0%81%E5%8A%9F%E8%83%BD%E5%AF%A6%E4%BD%9C-2d32f731c3ed">【JS】旅遊網之行政區選單、分頁功能實作</a></li><li><a href="https://wcc723.github.io/javascript/2017/06/29/es6-native-array/">JavaScript 陣列處理方法 [filter(), find(), forEach(), map(), every(), some(), reduce()]</a></li><li><a href="https://noob.tw/js-every-some/">JavaScript 陣列中兩個冷門的方法：Every、Some</a></li><li><a href="https://w3c.hexschool.com/blog/a2cb755f">JavaScript reduce 在做什麼？</a></li><li><a href="https://medium.com/unalai/%E8%AA%8D%E8%AD%98-javascript-reduce-940806267bfb">認識 JavaScript Reduce</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript, JS直播班, array</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>實用陣列操作大全-基礎篇</title>
    <link href="/2021/11/16/arrayBasic/"/>
    <url>/2021/11/16/arrayBasic/</url>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/hR5Botp.jpg"><br>陣列可以被視為是一種特別的「物件」，和物件一樣，是零到多個屬性的集合，而且沒限制甚麼東西不能放進去，所以陣列裡面可以是字串、數字等基本型別，也可以是物件、函式，甚至是另一個陣列。</p><span id="more"></span><p>而陣列與物件的差別在於，陣列是有順序的集合，能夠透過中括號<code>[]</code>加上索引來存取。也因為這種特性，所以陣列有許多的方法可以使用。</p><p><img src="https://i.imgur.com/wKVr3U7.jpg"><br>圖片來源：codingyuri</p><p>這次就來談談如何運用陣列的基本方法：</p><h2 id="Array-prototype-push"><a href="#Array-prototype-push" class="headerlink" title="Array.prototype.push()"></a>Array.prototype.push()</h2><blockquote><p>使用 <strong>push()</strong> 方法可以在<strong>陣列尾端</strong>新增一個值。<br><strong>push()</strong> 方法回傳的值為<strong>陣列長度</strong>。</p></blockquote><p>這一天有一塊巨大的隕石往地球飛來，超級英雄們緊急集合，要把隕石推出太陽系，但是隕石太大顆，所以又找了驚奇隊長來幫忙。</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">let</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'鋼鐵人'</span><span class="token punctuation">,</span><span class="token string">'美國隊長'</span><span class="token punctuation">,</span><span class="token string">'浩克'</span><span class="token punctuation">,</span><span class="token string">'雷神'</span><span class="token punctuation">]</span><span class="token keyword">let</span> value <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'驚奇隊長'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//['鋼鐵人', '美國隊長', '浩克', '雷神', '驚奇隊長']</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>push() 適用的在類似搶頭香的情境中。</p><h2 id="Array-prototype-unshift"><a href="#Array-prototype-unshift" class="headerlink" title="Array.prototype.unshift()"></a>Array.prototype.unshift()</h2><blockquote><p>使用 <strong>unshift()</strong> 可以在把想要新增的元素插入在<strong>陣列第一個元素</strong>的位置，也就是 index 為 0 的位置。<br><strong>unshift()</strong> 回傳的值也是<strong>陣列長度</strong>。</p></blockquote><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">let</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'鋼鐵人'</span><span class="token punctuation">,</span><span class="token string">'美國隊長'</span><span class="token punctuation">,</span><span class="token string">'浩克'</span><span class="token punctuation">,</span><span class="token string">'雷神'</span><span class="token punctuation">]</span><span class="token keyword">let</span> value <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token string">'黑寡婦'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//['黑寡婦', '鋼鐵人', '美國隊長', '浩克', '雷神']</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//'黑寡婦'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>unshift() 則適用於新聞類的排序，越新的新聞排到越前面。</p><h2 id="Array-prototype-pop"><a href="#Array-prototype-pop" class="headerlink" title="Array.prototype.pop()"></a>Array.prototype.pop()</h2><blockquote><p>如果要把陣列尾端的元素刪除，可以使用 pop() 方法。<br>pop() 方法回傳的值為被刪除的元素。</p></blockquote><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">let</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'鋼鐵人'</span><span class="token punctuation">,</span><span class="token string">'美國隊長'</span><span class="token punctuation">,</span><span class="token string">'浩克'</span><span class="token punctuation">,</span><span class="token string">'雷神'</span><span class="token punctuation">]</span><span class="token keyword">let</span> value <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//['鋼鐵人', '美國隊長', '浩克', ]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// '雷神'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>pop 是取自 Popping 這個單字，意思是彈出。不是流行音樂的意思。</p><h2 id="Array-prototype-shift"><a href="#Array-prototype-shift" class="headerlink" title="Array.prototype.shift()"></a>Array.prototype.shift()</h2><blockquote><p>如果要把陣列第一個元素刪除，可以使用 shift() 方法。<br>shift() 方法回傳的值為被刪除的元素。</p></blockquote><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">let</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'鋼鐵人'</span><span class="token punctuation">,</span><span class="token string">'美國隊長'</span><span class="token punctuation">,</span><span class="token string">'浩克'</span><span class="token punctuation">,</span><span class="token string">'雷神'</span><span class="token punctuation">]</span><span class="token keyword">let</span> value <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//['美國隊長', '浩克', '雷神']</span><span class="token comment">//array[0]的鋼鐵人被刪除了</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// '鋼鐵人'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="Array-prototype-splice"><a href="#Array-prototype-splice" class="headerlink" title="Array.prototype.splice"></a>Array.prototype.splice</h2><blockquote><p>splice()可以刪除指定位置的陣列元素，或新增指定位置的陣列元素。<br>回傳一個<strong>新的陣列</strong>，裡面放著<strong>被刪除的元素</strong>。</p></blockquote><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx">array<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>startIndex<span class="token punctuation">[</span><span class="token punctuation">,</span> deleteCount<span class="token punctuation">[</span><span class="token punctuation">,</span> item1<span class="token punctuation">[</span><span class="token punctuation">,</span> item2<span class="token punctuation">[</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><ol><li>startIndex ：要開始修改的索引位置。</li><li>deleteCount ：要刪除的元素數量(從startIndex位置的原四開始算)。</li><li>item1,item2… ：新增的元素，由startIndex開始新增。這個選項可以選擇性使用。</li></ol><p>來個情境題：這一天復仇者聯盟的超級英雄們舉辦派對，結果不小心混入了兩個正義聯盟的英雄，請問要如何把他們找出來，並且叫一台車把他們裝在一起送回家？</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">let</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'鋼鐵人'</span><span class="token punctuation">,</span><span class="token string">'蜘蛛人'</span><span class="token punctuation">,</span><span class="token string">'超人'</span><span class="token punctuation">,</span><span class="token string">'蝙蝠俠'</span><span class="token punctuation">,</span><span class="token string">'浩克'</span><span class="token punctuation">,</span><span class="token string">'雷神'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> newArray <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//['鋼鐵人', '蜘蛛人', '浩克', '雷神']</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newArray<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//['超人', '蝙蝠俠']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>原本由超人與蝙蝠俠占用的名額由’驚奇隊長’跟’緋紅女巫’來代表。</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">let</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'鋼鐵人'</span><span class="token punctuation">,</span><span class="token string">'蜘蛛人'</span><span class="token punctuation">,</span><span class="token string">'浩克'</span><span class="token punctuation">,</span><span class="token string">'雷神'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> newArray <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">'驚奇隊長'</span><span class="token punctuation">,</span><span class="token string">'緋紅女巫'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//['鋼鐵人', '蜘蛛人', '驚奇隊長', '緋紅女巫', '浩克', '雷神']</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newArray<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[]回傳空陣列</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="Array-prototype-sort"><a href="#Array-prototype-sort" class="headerlink" title="Array.prototype.sort()"></a>Array.prototype.sort()</h2><p>MDN上的解釋：</p><blockquote><p>來看一下MDN上關於sort()的解說：<br>sort() 方法會原地（in place）對一個陣列的所有元素進行排序，並回傳此陣列。排序不一定是穩定的（stable）。預設的排序順序是根據字串的 Unicode 編碼位置（code points）而定。</p></blockquote><p>什麼?根據 Unicode 編碼位置（code points）來決定順序，這是甚麼東西?</p><p>來看看MDN上的範例：</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">const</span> months <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'March'</span><span class="token punctuation">,</span> <span class="token string">'Jan'</span><span class="token punctuation">,</span> <span class="token string">'Feb'</span><span class="token punctuation">,</span> <span class="token string">'Dec'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>months<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>months<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// expected output: Array ["Dec", "Feb", "Jan", "March"]</span><span class="token keyword">const</span> array1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">100000</span><span class="token punctuation">]</span><span class="token punctuation">;</span>array1<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>array1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// expected output: Array [1, 100000, 21, 30, 4]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>不是由大到小，也不是由小到大，這實在是讓人一頭霧水呀？？？</p><p>MDN上面sort()方法的撰寫規則如下：</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx">arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">[</span>compareFunction<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>也就是說如果你沒用一個判別大小的函式來做判斷，才會使用Unicode 編碼位置（code points）來決定順序。</p><p>如果你真的像要為數字排大小(當比較的是數字的時候)，可以寫一個函式來判別：</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">var</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>numbers<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">></span> b<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">&lt;</span> b<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 2, 3, 4, 5]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>上面的判斷式也就是把陣列元素一一拿來當作a與b兩個參數，傳入判斷式做比較：</p><ul><li>如果回傳的值小於 0，則 a 的索引位置比 b 的小，也就是 a 在 b 前面。</li><li>如果回傳的值大於 0，則 b 的索引位置 比 b 的大，也就是 a 在 b 後面。</li><li>如果等於 0，則 a 與 b 的位置不會改變，但會與陣列其他元素繼續比較。</li></ul><p><img src="https://i.imgur.com/4FVXjkC.png"></p><p>至於是陣列索引小的當a，還是大的當a，則倚賴個瀏覽器廠商的實作。</p><p>compareFunction要更簡潔一些，可以這樣寫：</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">var</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>numbers<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> a <span class="token operator">-</span> b<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// [1, 2, 3, 4, 5]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><blockquote><p>MDN也寫了：由於依賴執行環境的實作，所以並不能保證排序的時間及空間複雜度。</p></blockquote><p>也就是，sort() 這個方法，每家瀏覽器背後運作的原理都不相同。</p><p>像是Chrome瀏覽器，一般是使用快速排序法( Quick Sort )，但是在陣列裡面的元素小於10的時候是使用插入排序法( Insertion Sort)，還使用了二分搜尋法 Binary Search 來優化排序。( 詳細說明可以參考： <a href="https://medium.com/@leokao0726/%E6%B7%BA%E8%AB%87-js-sort-%E5%88%B0%E8%83%8C%E5%BE%8C%E6%8E%92%E5%BA%8F%E6%96%B9%E6%B3%95-1035f5b8cde8">淺談 JS sort() 到背後排序方法</a> )</p><p>我認為 sort() 是可以深入再研究的一個陣列方法，但是身為一個陣列大全，就先點到為止。</p><h2 id="Array-prototype-indexOf"><a href="#Array-prototype-indexOf" class="headerlink" title="Array.prototype.indexOf()"></a>Array.prototype.indexOf()</h2><p>MDN上的解釋：</p><blockquote><p>回傳給定元素於陣列中第一個被找到之索引位置，若不存在於陣列中則回傳 -1。<br>適合用來確認陣列中那個元素是否存在。</p></blockquote><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx">array<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>searchElement<span class="token punctuation">,</span>fromIndex<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><ul><li>searchElement：要找的元素。</li><li>fromIndex：要從第幾個元素開始找，預設為0。這個參數可以不設。</li></ul><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">let</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'鋼鐵人'</span><span class="token punctuation">,</span><span class="token string">'蜘蛛人'</span><span class="token punctuation">,</span><span class="token string">'浩克'</span><span class="token punctuation">,</span><span class="token string">'雷神'</span><span class="token punctuation">,</span><span class="token string">'鋼鐵人'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> value <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'浩克'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 2</span><span class="token keyword">let</span> value1 <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'鋼鐵人'</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 4 因為是從 [2] 的浩克開始往後面找。</span><span class="token keyword">let</span> value2 <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'美國隊長'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// -1  美國隊長沒有在陣列中</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="Array-prototype-lastIndexOf"><a href="#Array-prototype-lastIndexOf" class="headerlink" title="Array.prototype.lastIndexOf()"></a>Array.prototype.lastIndexOf()</h2><p>MDN上的解釋：</p><blockquote><p>回傳給定元素於陣列中最後一個被找到之索引，若不存在於陣列中則回傳 -1。<br>搜尋的方向為由陣列尾部向後（即向前）尋找，啟始於 fromIndex。</p></blockquote><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">let</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'鋼鐵人'</span><span class="token punctuation">,</span><span class="token string">'蜘蛛人'</span><span class="token punctuation">,</span><span class="token string">'浩克'</span><span class="token punctuation">,</span><span class="token string">'雷神'</span><span class="token punctuation">,</span><span class="token string">'鋼鐵人'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> value <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">'浩克'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 2</span><span class="token keyword">let</span> value1 <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">'鋼鐵人'</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 0 因為是從'浩克'往前找，找到的'鋼鐵人'是在索引[0] 的位置</span><span class="token keyword">let</span> value2 <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">'美國隊長'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// -1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="Array-prototype-prototype-findIndex"><a href="#Array-prototype-prototype-findIndex" class="headerlink" title="Array.prototype.prototype.findIndex()"></a>Array.prototype.prototype.findIndex()</h3><p>MDN上的解釋：</p><blockquote><p>findIndex()方法傳回陣列中滿足測試函式的第一個元素的索引。<br>如果沒找到對應元素就回傳 -1。</p></blockquote><p>findIndex()與indexOf()相似，但是findIndex()可以帶入函式來判斷陣列中是否有滿足函式條件的元素。</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">const</span> avengers <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span>        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'鋼鐵人'</span><span class="token punctuation">,</span>        <span class="token literal-property property">firePower</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>        <span class="token literal-property property">bodyForce</span><span class="token operator">:</span> <span class="token number">5</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span>        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'美國隊長'</span><span class="token punctuation">,</span>        <span class="token literal-property property">firePower</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>        <span class="token literal-property property">bodyForce</span><span class="token operator">:</span> <span class="token number">8</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span>        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'浩克'</span><span class="token punctuation">,</span>        <span class="token literal-property property">firePower</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>        <span class="token literal-property property">bodyForce</span><span class="token operator">:</span> <span class="token number">10</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token keyword">let</span> <span class="token function-variable function">isFirePower</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">element</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> element<span class="token punctuation">.</span>firePower <span class="token operator">===</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>avengers<span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span>isFirePower<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="Array-prototype-reverse"><a href="#Array-prototype-reverse" class="headerlink" title="Array.prototype.reverse()"></a>Array.prototype.reverse()</h2><p>MDN上的解釋：</p><blockquote><p>反轉（reverses）一個陣列。陣列中的第一個元素變為最後一個，而最後一個元素則變成第一個。<br>回傳的值為反轉的陣列本身。</p></blockquote><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">let</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'鋼鐵人'</span><span class="token punctuation">,</span><span class="token string">'蜘蛛人'</span><span class="token punctuation">,</span><span class="token string">'浩克'</span><span class="token punctuation">,</span><span class="token string">'雷神'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> newArray <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//['雷神', '浩克', '蜘蛛人', '鋼鐵人']</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newArray<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//['雷神', '浩克', '蜘蛛人', '鋼鐵人']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="Array-join"><a href="#Array-join" class="headerlink" title="Array.join"></a>Array.join</h2><blockquote><p>會將陣列（或一個類陣列（array-like）物件）中所有的元素連接、合併成一個字串，並回傳這個字串。</p></blockquote><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx">arr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">[</span>separator<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><ul><li>separator：用來隔開每個元素的字串，預設是英文逗號 (,) ，如果separator使用空字串的話，合併之後，元素之間不會有任何區隔。</li></ul><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">let</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'鋼鐵人'</span><span class="token punctuation">,</span><span class="token string">'蜘蛛人'</span><span class="token punctuation">,</span><span class="token string">'浩克'</span><span class="token punctuation">,</span><span class="token string">'雷神'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> newArray <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'*'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newArray<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//鋼鐵人*蜘蛛人*浩克*雷神</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="Array-prototype-concat"><a href="#Array-prototype-concat" class="headerlink" title="Array.prototype.concat"></a>Array.prototype.concat</h2><p>MDN上的解釋：</p><blockquote><p>用來合併兩個或多個陣列。<br>不會改變現有的陣列，回傳一個包含呼叫者陣列本身的新陣列。</p></blockquote><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">var</span> new_array <span class="token operator">=</span> old_array<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>value1<span class="token punctuation">[</span><span class="token punctuation">,</span> value2<span class="token punctuation">[</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">[</span><span class="token punctuation">,</span> valueN<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>範例：</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">let</span> justice <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'超人'</span><span class="token punctuation">,</span><span class="token string">'蝙蝠俠'</span><span class="token punctuation">,</span><span class="token string">'神力女超人'</span><span class="token punctuation">]</span><span class="token keyword">let</span> avangers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'鋼鐵人'</span><span class="token punctuation">,</span><span class="token string">'蜘蛛人'</span><span class="token punctuation">,</span><span class="token string">'浩克'</span><span class="token punctuation">,</span><span class="token string">'雷神'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> justiceAvangers <span class="token operator">=</span> justice<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>avangers<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>justiceAvangers<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//['超人', '蝙蝠俠', '神力女超人', '蜘蛛人', '浩克', '雷神', '鋼鐵人']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>也可以陣列合併字串：</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">let</span> avengers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'鋼鐵人'</span><span class="token punctuation">,</span><span class="token string">'蜘蛛人'</span><span class="token punctuation">,</span><span class="token string">'浩克'</span><span class="token punctuation">,</span><span class="token string">'雷神'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> newAvengers <span class="token operator">=</span> avengers<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token string">'黑寡婦'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newAvengers<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//['鋼鐵人', '蜘蛛人', '浩克', '雷神', '黑寡婦']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="Array-prototype-slice"><a href="#Array-prototype-slice" class="headerlink" title="Array.prototype.slice"></a>Array.prototype.slice</h2><p>MDN上的解釋：</p><blockquote><p>取出起始索引到結束索引的元素，並回傳由取出元素所組成的新陣列。<br>原有陣列不會被修改</p></blockquote><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx">arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">[</span>begin<span class="token punctuation">[</span><span class="token punctuation">,</span> end<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">const</span> avengers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'鋼鐵人'</span><span class="token punctuation">,</span><span class="token string">'蜘蛛人'</span><span class="token punctuation">,</span><span class="token string">'浩克'</span><span class="token punctuation">,</span><span class="token string">'雷神'</span><span class="token punctuation">,</span><span class="token string">'奇異博士'</span><span class="token punctuation">,</span><span class="token string">'黑豹'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> newAvengers <span class="token operator">=</span> avengers<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newAvengers<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//['浩克', '雷神']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="Array-prototype-includes"><a href="#Array-prototype-includes" class="headerlink" title="Array.prototype.includes()"></a>Array.prototype.includes()</h2><blockquote><p>includes() 方法會判斷陣列是否包含特定的元素，並以此來回傳 true 或 false。</p></blockquote><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">const</span> avengers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'鋼鐵人'</span><span class="token punctuation">,</span><span class="token string">'蜘蛛人'</span><span class="token punctuation">,</span><span class="token string">'浩克'</span><span class="token punctuation">,</span><span class="token string">'雷神'</span><span class="token punctuation">,</span><span class="token string">'奇異博士'</span><span class="token punctuation">,</span><span class="token string">'黑豹'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>avengers<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">'雷神'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>avengers<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">'黑寡婦'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="Array-prototype-toString"><a href="#Array-prototype-toString" class="headerlink" title="Array.prototype.toString()"></a>Array.prototype.toString()</h3><p>MDN上的解釋：</p><blockquote><p>toString() 方法將回傳一個可以表達該陣列及其元素的字串。<br>陣列的每個元素將被轉為字串，並以<code>,</code>連接，同時會回傳該字串。</p></blockquote><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">const</span> avengers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'鋼鐵人'</span><span class="token punctuation">,</span><span class="token string">'蜘蛛人'</span><span class="token punctuation">,</span><span class="token string">'浩克'</span><span class="token punctuation">,</span><span class="token string">'雷神'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> newAvengers <span class="token operator">=</span> avengers<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newAvengers<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//"鋼鐵人,蜘蛛人,浩克,雷神"</span><span class="token comment">//每個元素被轉為字串，並以逗號連接。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h3><p>-<a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array/sort">MDN : Array.prototype.sort</a><br>-<a href="https://realdennis.medium.com/javascript-%E5%BE%9Earray%E7%9A%84sort%E6%96%B9%E6%B3%95-%E8%81%8A%E5%88%B0%E5%90%84%E5%AE%B6%E7%80%8F%E8%A6%BD%E5%99%A8%E7%9A%84%E5%AF%A6%E4%BD%9C%E7%AE%97%E6%B3%95-c23a335b1b80">從 Array 的 sort 方法，聊到各瀏覽器的實作，沒想到 Chrome 和FireFox 的排序如此不同</a><br>-<a href="https://medium.com/@leokao0726/%E6%B7%BA%E8%AB%87-js-sort-%E5%88%B0%E8%83%8C%E5%BE%8C%E6%8E%92%E5%BA%8F%E6%96%B9%E6%B3%95-1035f5b8cde8">淺談 JS sort() 到背後排序方法</a></p>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript, JS直播班, array</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>何謂 hoisting(向上提升)？以 let、const、var、function 為例</title>
    <link href="/2021/11/12/hoisting/"/>
    <url>/2021/11/12/hoisting/</url>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/oUu94vQ.png"></p><p>向上提升( Hoisting )指的是 JavaScript 允許函式與變數在宣告之前，就可以叫用而不會出錯的一種情況。</p><span id="more"></span><p>以上就是我本來了解的「向上提升( Hoisting )」，我以為自己懂了，寫這篇筆記查資料時，我才發現自己並不懂。</p><p>先來談談變數的「向上提升( Hoisting )」。</p><h2 id="變數的向上提升-hoisting"><a href="#變數的向上提升-hoisting" class="headerlink" title="變數的向上提升(hoisting)"></a>變數的向上提升(hoisting)</h2><p>在 JavaScript 中建立變數包含2個動作：</p><ul><li>宣告：就是給變數一個名稱。</li><li>初始化：給變數一個初始值。</li></ul><p>ES6 的 let 與 const 出現之前，在 JavaScript 中都使用 var 來宣告變數。 程式碼的執行過程中，用var宣告變數可以在前面就先使用，後面才宣告。宣告之前叫用不會出現錯誤，只是會給變數 undefined 的值而已。</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>superMan<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Uncaught ReferenceError: superMan is not defined</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>wonderWoman<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Uncaught ReferenceError: wonderWoman is not defined</span>wonderWoman <span class="token operator">=</span> <span class="token string">'黛安娜'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>batMan<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//undefined  在程式碼的前面呼叫</span><span class="token keyword">var</span> batMan <span class="token operator">=</span> <span class="token string">'布魯斯·韋恩'</span><span class="token punctuation">;</span> <span class="token comment">//後面才宣告賦值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>在上面的範例中， superMan 沒有被宣告，所以JavaScript在程式碼中找不到這個變數，直接報錯： Uncaught ReferenceError: superMan is not defined。</p><p>wonderWoman 雖然有宣告，但是並沒有使用 var 來宣告，在提前叫用的時候，console.log的結果也是： Uncaught ReferenceError: wonderWoman is not defined。</p><h3 id="var宣告的變數只會提升宣告，不會提升賦值"><a href="#var宣告的變數只會提升宣告，不會提升賦值" class="headerlink" title="var宣告的變數只會提升宣告，不會提升賦值"></a>var宣告的變數只會提升宣告，不會提升賦值</h3><p><strong>使用var來宣告的變數在JavaScript中有特別待遇</strong>，上面的範例用var宣告 superMan 之前，console.log(superMan)並不會報錯，而是出現 ‘undefined’。這是因為JavaScript在執行時發現有沒被宣告的變數，它會先在程式碼中找一找看是否在後面被宣告了，如果有宣告，那就把宣告「提升(Hosting)」到前面。</p><p>要注意的是： var 宣告的變數，宣告的部分會提升，但是賦值的部分不會提升，所以 console.log() 時雖然不會報錯，而是會出現 ‘undefined’，呈現一種沒有給值的狀態。</p><p>那提升的過程中發生了甚麼事呢？以上面的batMan為例：</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>batMan<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//undefined</span><span class="token keyword">var</span> batMan <span class="token operator">=</span> <span class="token string">'布魯斯·韋恩'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><p>其實是變成這樣：</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">var</span> batMan<span class="token punctuation">;</span> <span class="token comment">//宣告被提前了</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>batMan<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//undefined</span>batMan <span class="token operator">=</span> <span class="token string">'布魯斯·韋恩'</span><span class="token punctuation">;</span> <span class="token comment">//但是賦值還在後面</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><p>var宣告變數的提升(Hoisting)其實就是把宣告與賦值拆成兩個部分，宣告提到前面執行，賦值則還在後面本來的位置上。</p><p>but…在《<a href="https://blog.techbridge.cc/2018/11/10/javascript-hoisting/">我知道你懂 hoisting，可是你了解到多深？</a>》看到兩個範例，我把它改寫一下，來增強自己的記憶，先看這個：</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">var</span> batMan <span class="token operator">=</span> <span class="token string">'布魯斯·韋恩'</span><span class="token punctuation">;</span><span class="token keyword">var</span> batMan<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>batMan<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//布魯斯·韋恩</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><p>嗯，結果不是 ‘undefined’ 喔，而是 ‘布魯斯·韋恩’！<br>上面那個例子，還是可以切分為「宣告」與「賦值」這兩部分：</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">var</span> batMan<span class="token punctuation">;</span><span class="token keyword">var</span> batMan<span class="token punctuation">;</span>batMan <span class="token operator">=</span> <span class="token string">'布魯斯·韋恩'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>batMan<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//布魯斯·韋恩</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>再來看這個範例：</p><figure><div class="code-wrapper"><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">batManWeapon</span><span class="token punctuation">(</span><span class="token parameter">arm</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arm<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> arm <span class="token operator">=</span> <span class="token string">'蝙蝠摩托'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">batManWeapon</span><span class="token punctuation">(</span><span class="token string">'蝙蝠車'</span><span class="token punctuation">)</span> <span class="token comment">// '蝙蝠車'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>答案是蝙蝠車喔！</p><p>這個過程是這樣的：</p><figure><div class="code-wrapper"><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">batManWeapon</span><span class="token punctuation">(</span><span class="token parameter">arm</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> arm <span class="token operator">=</span> <span class="token string">'蝙蝠車'</span><span class="token punctuation">;</span> <span class="token comment">//batManWeapon('蝙蝠車')呼叫函式，帶入的參數。</span>    <span class="token keyword">var</span> arm<span class="token punctuation">;</span>  <span class="token comment">//變數提升</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arm<span class="token punctuation">)</span>    arm <span class="token operator">=</span> <span class="token string">'蝙蝠摩托'</span><span class="token punctuation">&#125;</span><span class="token function">batManWeapon</span><span class="token punctuation">(</span><span class="token string">'蝙蝠車'</span><span class="token punctuation">)</span> <span class="token comment">// '蝙蝠車'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>這是變數提升(Hosting)需要特別注意的地方。</p><h3 id="let與const宣告的變數有被提升的待遇嗎"><a href="#let與const宣告的變數有被提升的待遇嗎" class="headerlink" title="let與const宣告的變數有被提升的待遇嗎?"></a>let與const宣告的變數有被提升的待遇嗎?</h3><p>我們來看看用let與const宣告的變數是否會有「向上提升」的待遇：</p><figure><div class="code-wrapper"><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>superMan<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//Uncaught ReferenceError: batMan is not defined</span><span class="token keyword">let</span> superMan <span class="token operator">=</span> <span class="token string">'克拉克'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>batMan<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> batMan <span class="token operator">=</span> <span class="token string">'布魯斯.偉恩'</span> <span class="token comment">//Uncaught ReferenceError: batMan is not defined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>console.log的結果都是 “Uncaught ReferenceError: batMan is not defined”,這樣我們是否可以說用 let 與 const 宣告的變數沒有「向上提升」的待遇？</p><p>再來看一下這個範例：</p><figure><div class="code-wrapper"><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> superMan <span class="token operator">=</span> <span class="token string">'克拉克'</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">superHero</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>superMan<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span><span class="token function">superHero</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//'克拉克'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>superHero()函式的作用域中沒有宣告superMan，所以函式外的全域環境去找這個變數，找到 let superMan &#x3D; ‘克拉克’ ，就把這個同名的變數捉進函式內使用。</p><p>那如果題目改成這樣呢？</p><figure><div class="code-wrapper"><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> superMan <span class="token operator">=</span> <span class="token string">'克拉克'</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">superHero</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>superMan<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">let</span> superMan <span class="token operator">=</span> <span class="token string">'攝影記者'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">superHero</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//Uncaught ReferenceError: Cannot access 'superMan' before initialization</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>這一題出現紅字：意思是 superMan 這個變數在初始化之前，無法使用。</p><p>這就有一個問題：如果 superHero 函式內的 superMan 變數沒被提升，那應該會去捉函式外部的  superMan &#x3D; ‘克拉克’ 這個變數，而不是跑出 Uncaught ReferenceError: Cannot access ‘superMan’ before initialization 這樣的紅字結果。</p><p>所以JavaScript在執行的時候，一定也有在函式內部找，找到在 console.log 後面有宣告 superMan這個變數，既然作用域裡面有宣告，就不去外面找，所以就給你報錯的結果：Uncaught ReferenceError: Cannot access ‘superMan’ before initialization。</p><p>差別只在 用var宣告的變數「提升」時會被賦予 ‘undefined’，但是用 let 與 const 宣告的變數「提升」時卻是紅字報錯，讓程式中斷執行不下去?</p><h3 id="暫時死區Temporal-Dead-Zone"><a href="#暫時死區Temporal-Dead-Zone" class="headerlink" title="暫時死區Temporal Dead Zone"></a>暫時死區Temporal Dead Zone</h3><p>let宣告的變數在尚未賦值之前，不像var一樣會以undefined初始化，所以let與const宣告的變數從宣告到初始化之間，將會無法操作，這段時間稱為「暫時死區」(Temporal Dead Zone)。</p><p>const因為宣告時，必須給值，且之後不能再改變，所以沒有TDZ的問題。</p><h2 id="函式的向上提升"><a href="#函式的向上提升" class="headerlink" title="函式的向上提升"></a>函式的向上提升</h2><p>函式可以分為兩種：</p><ul><li>以「函式宣告」定義的函式</li><li>函式運算式</li></ul><p>其中以「函式宣告」定義的函式，可以在函式宣告前就使用，這就稱為「函式提升」。隨叫隨到，不管身在何方，真的是 JavaScript 裡面的超級英雄。</p><figure><div class="code-wrapper"><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">batMan</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//布魯斯‧韋恩</span><span class="token keyword">function</span> <span class="token function">batMan</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'布魯斯‧韋恩'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>但是，函式運算式在宣告前呼叫函式就會報錯。</p><figure><div class="code-wrapper"><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">batMan</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//Uncaught ReferenceError: batMan is not defined</span><span class="token keyword">let</span> <span class="token function-variable function">batMan</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'布魯斯‧韋恩'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>而且函式的提升，不像 var 宣告變數那樣用 ‘undefined’ 暫時充代，而是整個內容都被提升。</p><h2 id="為什麼函式需要「向上提升」呢？"><a href="#為什麼函式需要「向上提升」呢？" class="headerlink" title="為什麼函式需要「向上提升」呢？"></a>為什麼函式需要「向上提升」呢？</h2><p>之前對於「提升」( Hoisting )這個題目只是硬背了起來，直到這次寫筆記與作 BMI KATA 的練習才恍然大悟。</p><p>這是因為<strong>方便函式之間彼此呼叫使用</strong>，在前面宣告的函式可以去叫後面才宣告的函式來使用。如果沒有「提升」( Hosisting )的話，函式的使用會疊床架屋，十分冗長。</p><p>最後來個情境題，假設噗攏共星球的外星人來攻打地球，需要呼叫超級英雄們來幫忙，當然是不管在哪裡呼叫，都能把超級英雄叫來，是最方便的：</p><figure><div class="code-wrapper"><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">crisis</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Superman</span><span class="token comment">//Wonder woman</span><span class="token comment">//Batman</span><span class="token keyword">function</span> <span class="token function">callSuperMan</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Superman'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">callwonderWoman</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">crisis</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">callSuperMan</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">callBatMan</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">callBatMan</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Batman'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">callwonderWoman</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Wonder woman'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>這樣不管函式在前面還是後面都可以叫的到，還可以在函式內呼叫別的函式。</p><p>地球的危機就解除了！</p><h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><ul><li>var 宣告的變數只會提升宣告，不會提升賦值，所以提升時，值會是 ‘undefined’。</li><li>let 與 const 宣告的變數，如果在宣告前使用，會報出錯誤。</li><li>只有「函式宣告」享有「向上提升」的待遇。</li><li>函式的提升是整個內容都被提升，可以在宣告之前就呼叫使用。</li><li>函式的提升是為了提供函式之間互相呼叫的便利性。</li></ul><p>最後，養成好習慣，變數與函式應該先定義好再呼叫，避免誤用「 hoisting 」這項好設計！</p><p>參考資料：</p><ul><li><a href="https://developer.mozilla.org/zh-TW/docs/Glossary/Hoisting">MDN 提升(Hoisting)</a>)</li><li><a href="https://blog.techbridge.cc/2018/11/10/javascript-hoisting/">我知道你懂 hoisting，可是你了解到多深？</a></li><li><a href="https://wcc723.github.io/javascript/2017/12/16/javascript-hoisting/">鐵人賽：JavaScript Function 與 Hoisting</a></li><li><a href="https://yakimhsu.com/project/project_w17_advancedJS_02_Hoisting.html">[第十七週] JavaScript 進階：從 EC 來理解 Hoisting</a></li><li><a href="https://ithelp.ithome.com.tw/articles/10213660">【JavaScript 核心】函式提升</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript, JS直播班, hoisting</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>何謂物件取值？在什麼時機上會用到？</title>
    <link href="/2021/11/10/objectKeyAndValue/"/>
    <url>/2021/11/10/objectKeyAndValue/</url>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/WOYKnde.jpg"><br>先來談談何謂物件？</p><p>在JavaScript中，所有基本型別( Primitive )以外的變數值，都是物件( Object )。</p><span id="more"></span><p>物件是 0 到多組屬性的集合。屬性是一對鍵( Key )與值( Value )的關聯，又稱 Key-Value pair。屬性的值可以是基本型別的字串、數字、布林…也可以是陣列、函式甚至是另一個物件。</p><p>當然物件也可以是瀏覽器或是執行環境是先定義好的，例如全域物件 window 或是用來取得日期的 Date 物件等等。</p><p>那要怎麼建立一個物件呢？</p><p>一般會使用「物件實字」的方式，或是透過 new 關鍵字建立物件。</p><h2 id="物件實字-Object-literal"><a href="#物件實字-Object-literal" class="headerlink" title="物件實字( Object literal)"></a>物件實字( Object literal)</h2><p>所謂的「物件實字」就是使用<code>&#123;&#125;</code>來建立一個新的物件，並指定屬性給物件。屬性之間以逗號( , )隔開，如果屬性名稱( key )有使用到符號字串則必須用 <code>&#39;&#39;</code>( 或是 <code>&quot;&quot;</code> )將 key 包起來。</p><p>這也是JSON格式的核心語法。</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">//使用「物件實字」建立一個郭靖(guoJing)的物件</span><span class="token keyword">let</span> guoJing <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'郭靖'</span><span class="token punctuation">,</span><span class="token literal-property property">gender</span><span class="token operator">:</span> <span class="token string">'male'</span><span class="token punctuation">,</span><span class="token literal-property property">kungFu</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'降龍十八掌'</span><span class="token punctuation">,</span><span class="token string">'空明拳'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token function-variable function">useKungFu</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>kungFu<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p><img src="https://i.imgur.com/o3VPe4H.png"></p><p>看看上面那張圖，鍵與值的配對關係就很清楚了。</p><p>在這裡小結一下：</p><ul><li>key： 就是屬性的名稱，任何字串都可以作為 key，</li><li>value： 在 value 中可以放入任何型別的值，當然也包括物件。</li></ul><h2 id="透過-new-關鍵字建立物件"><a href="#透過-new-關鍵字建立物件" class="headerlink" title="透過 new 關鍵字建立物件"></a>透過 new 關鍵字建立物件</h2><p>另一種方法則是透過 new 關鍵字建立物件，再把屬性一一指定給物件。範例如下：</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">let</span> guoJing <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//建立物件</span>guoJing<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'郭靖'</span><span class="token punctuation">;</span>  <span class="token comment">//指定屬性</span>guoJing<span class="token punctuation">.</span>gender <span class="token operator">=</span> <span class="token string">'male'</span><span class="token punctuation">;</span>guoJing<span class="token punctuation">.</span>kungFu <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'降龍十八掌'</span><span class="token punctuation">,</span><span class="token string">'空明拳'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>guoJing<span class="token punctuation">.</span><span class="token function-variable function">useKungFu</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>kungFu<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>說到這裡，你應該對物件的結構十分了解了。所謂的「物件取值」，也就是要把物件的「值」給取出來，那要怎麼做呢？可以使用這兩種方法：</p><ul><li>使用「.」(點)來存取屬性的值</li><li>透過<code> [ ]</code> (中括號)來存取屬性的值</li></ul><h2 id="使用「-」-點-來存取屬性的值"><a href="#使用「-」-點-來存取屬性的值" class="headerlink" title="使用「.」(點)來存取屬性的值"></a>使用「.」(點)來存取屬性的值</h2><p>透過「<code>.</code>」(點)來存取屬性的值是最單純方便的方式。語法如下：</p><p><strong>物件名稱 .屬性名稱</strong></p><p>以前面的範例來說明：</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">let</span> guoJing <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'郭靖'</span><span class="token punctuation">,</span><span class="token literal-property property">gender</span><span class="token operator">:</span> <span class="token string">'male'</span><span class="token punctuation">,</span><span class="token literal-property property">kungFu</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'降龍十八掌'</span><span class="token punctuation">,</span><span class="token string">'空明拳'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token function-variable function">useKungFu</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>kungFu<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>guoJing<span class="token punctuation">.</span>gender<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//'male'</span>guoJing<span class="token punctuation">.</span><span class="token function">useKungFu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 警告視窗跳出'降龍十八掌'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>透過「.」(點)來存取屬性的值雖然方便直觀，但是也有它的限制，例如當物件的屬性名稱是數字或是特殊字元的時候，會出現錯誤，這時另一種存取物件屬性的方法就可以派上用場了。</p><h2 id="透過-中括號-來存取屬性的值"><a href="#透過-中括號-來存取屬性的值" class="headerlink" title="透過 [ ] (中括號)來存取屬性的值"></a>透過 <code>[ ]</code> (中括號)來存取屬性的值</h2><p>物件的屬性也可以使用<code> [ ]</code> 來存取，<code> [ ]</code> 裡面可以放字串也可以帶入變數 ，語法如下：</p><p><strong>物件<code>[&quot;屬性名稱&quot;]</code></strong></p><p>先來看一下範例：</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">let</span> guoJing <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'郭靖'</span><span class="token punctuation">,</span><span class="token literal-property property">gender</span><span class="token operator">:</span> <span class="token string">'male'</span><span class="token punctuation">,</span><span class="token literal-property property">kungFu</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'降龍十八掌'</span><span class="token punctuation">,</span><span class="token string">'空明拳'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token function-variable function">useKungFu</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>kungFu<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>guoJing<span class="token punctuation">[</span><span class="token string">'gender'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//'male'</span>guoJing<span class="token punctuation">[</span><span class="token string">'useKungFu'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 警告視窗跳出'降龍十八掌'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>乍看之下 <code>[ ]</code> 跟用點 . 沒有兩樣，讓我們改一下題目，把 kungFu 這個陣列拆成 01kungFu 跟 02kungFu 兩個屬性。屬性名稱的開頭使用數字的話，程式會報錯。前面有提到只要是字串都可以當作屬性名稱，所以在這裡把 01kungFu 跟 02kungFu 這兩個屬性名稱加上 <code>&#39;&#39;</code>( <code>&quot;&quot;</code> ) ,讓它們變成字串，這時就不能使用 點( <code>.</code> )來存取屬性了，而要改用可以放入字串的 <code>[ ]</code> 來取值。</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">let</span> guoJing <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'郭靖'</span><span class="token punctuation">,</span>  <span class="token literal-property property">gender</span><span class="token operator">:</span> <span class="token string">'male'</span><span class="token punctuation">,</span>  <span class="token string-property property">'01kungFu'</span><span class="token operator">:</span> <span class="token string">'降龍十八掌'</span><span class="token punctuation">,</span>  <span class="token string-property property">'02kungFu'</span><span class="token operator">:</span> <span class="token string">'空明拳'</span><span class="token punctuation">,</span>  <span class="token function-variable function">useKungFu</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">[</span><span class="token string">'01kungFu'</span><span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>guoJing<span class="token punctuation">[</span><span class="token string">"01kungFu"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//"降龍十八掌"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>guoJing<span class="token punctuation">[</span><span class="token string">"02kungFu"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//"空明拳"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>使用 物件 <code>[&quot;屬性名稱&quot;]</code> 的方式就可以正常抓到屬性的值了。</p><p>前面提到中括號 <code>[ ]</code> 裡面可以放入變數，所以我們可以把屬性名稱賦值給變數，用 物件 <code>[&quot;變數&quot;]</code> 的方法來取得屬性的值。</p><p>讓我們再用上面的例子做一些變化：</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">let</span> guoJing <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'郭靖'</span><span class="token punctuation">,</span>  <span class="token literal-property property">gender</span><span class="token operator">:</span> <span class="token string">'male'</span><span class="token punctuation">,</span>  <span class="token string-property property">'01kungFu'</span><span class="token operator">:</span> <span class="token string">'降龍十八掌'</span><span class="token punctuation">,</span>  <span class="token string-property property">'02kungFu'</span><span class="token operator">:</span> <span class="token string">'空明拳'</span><span class="token punctuation">,</span>  <span class="token function-variable function">useKungFu</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">[</span><span class="token string">'01kungFu'</span><span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">let</span> sex <span class="token operator">=</span> <span class="token string">"gender"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>guoJing<span class="token punctuation">.</span>sex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//undefined</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>guoJing<span class="token punctuation">.</span>gender<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//"male"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>guoJing<span class="token punctuation">[</span>sex<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//"male"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>sex 這個變數雖然存著 “ gender “ 這個值，但是和 guoJing 這個物件並非指向相同的記憶體空間，所以取不到 guoJing.gender 的值，直接報出了 “ undefined “。</p><p>而 guoJing<code>[sex]</code> 這裡sex變數存的是”gender”字串，所以 guoJing<code>[sex]</code> 等於 guoJing<code>[&quot;gender&quot;]</code>，所以就成功取到 “ male “ 的值了。</p><h2 id="新增物件屬性"><a href="#新增物件屬性" class="headerlink" title="新增物件屬性"></a>新增物件屬性</h2><p>如何新增物件的屬性呢？可以直接使用( . )也可以用 <code>[ ]</code> 的方式。</p><ul><li>物件.屬性名稱 &#x3D; 值;</li><li>物件<code>[ &#39;屬性名稱&#39; ]</code> &#x3D; 值;</li></ul><p>讓我們看看範例：</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">let</span> guoJing <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'郭靖'</span><span class="token punctuation">,</span>  <span class="token literal-property property">gender</span><span class="token operator">:</span> <span class="token string">'male'</span><span class="token punctuation">,</span>  <span class="token string-property property">'01kungFu'</span><span class="token operator">:</span> <span class="token string">'降龍十八掌'</span><span class="token punctuation">,</span>  <span class="token string-property property">'02kungFu'</span><span class="token operator">:</span> <span class="token string">'空明拳'</span><span class="token punctuation">,</span>  <span class="token function-variable function">useKungFu</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">[</span><span class="token string">'01kungFu'</span><span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>guoJing<span class="token punctuation">.</span>wife <span class="token operator">=</span> <span class="token string">'黃蓉'</span><span class="token punctuation">;</span>guoJing<span class="token punctuation">[</span><span class="token string">'pet'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'白雕'</span><span class="token punctuation">;</span>guoJing<span class="token punctuation">[</span><span class="token string">'03kungFu'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'九陰真經'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>guoJing<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="刪除物件屬性"><a href="#刪除物件屬性" class="headerlink" title="刪除物件屬性"></a>刪除物件屬性</h2><p>要刪除物件的屬性可以使用 delete 指令來刪除。</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">let</span> guoJing <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'郭靖'</span><span class="token punctuation">,</span>  <span class="token literal-property property">gender</span><span class="token operator">:</span> <span class="token string">'male'</span><span class="token punctuation">,</span>  <span class="token string-property property">'01kungFu'</span><span class="token operator">:</span> <span class="token string">'降龍十八掌'</span><span class="token punctuation">,</span>  <span class="token string-property property">'02kungFu'</span><span class="token operator">:</span> <span class="token string">'空明拳'</span><span class="token punctuation">,</span>  <span class="token literal-property property">pet</span> <span class="token operator">:</span> <span class="token string">'白雕'</span><span class="token punctuation">,</span>  <span class="token function-variable function">useKungFu</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">[</span><span class="token string">'01kungFu'</span><span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">delete</span> guoJing<span class="token punctuation">.</span>pet<span class="token punctuation">;</span><span class="token keyword">delete</span> guoJing<span class="token punctuation">[</span><span class="token string">'02kungFu'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>guoJing'<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>參考資料：</p><ul><li><a href="https://ithelp.ithome.com.tw/articles/10193605">JavaScript - 物件 與 屬性</a></li><li><a href="https://medium.com/@yining1204/javascript-%E6%A0%B8%E5%BF%83%E7%AF%87-%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98-chap-30-%E7%89%A9%E4%BB%B6%E5%8F%96%E5%80%BC-%E6%96%B0%E5%A2%9E%E8%88%87%E5%88%AA%E9%99%A4-b7a3a37a6bd7">JavaScript 核心篇 學習筆記: Chap.30 — 物件取值，新增與刪除</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript, JS直播班, 物件</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>何謂運算式( Expression )與陳述式( Statement )？</title>
    <link href="/2021/11/05/expressionAndStatement/"/>
    <url>/2021/11/05/expressionAndStatement/</url>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/uHRcIGn.jpg"><br>電腦程式是由一堆命令電腦執行的「指示」所構成。就像人類日常溝通的語言，不同的語言有不同的文法結構；在不同的程式語言，指示電腦執行命令的語法也不相同，程式語言的文法稱為 syntax ，一個程式語言要能運作一定要按照規定的 syntax 來寫。</p><span id="more"></span><p>JavaScript的語法可以分成兩種：</p><ul><li>陳述式( Statement )</li><li>表達式( Expression )，也被稱為表示式或運算式。</li></ul><h2 id="陳述式"><a href="#陳述式" class="headerlink" title="陳述式"></a>陳述式</h2><p>MDN 對於陳述式( Statement )的定義：</p><blockquote><p><strong>陳述式與宣告</strong><br>JavaScript 應用程式由<strong>適當的陳述式</strong>組成。一個單一的陳述式可以跨用好幾行。 多個陳述式也可以藉由分號分隔來寫在同一行。 這不是一個關鍵字，而是一群關鍵字。</p></blockquote><p>這段字每個字都看得懂，但是組在一起卻像是文言文，讓人看好幾次，還是一頭霧水。</p><p>讓我吃掉哆啦A夢的翻譯年糕來解釋一下，陳述式就是由一些程式碼所組成的指示，最重要的是<strong>陳述式執行後，不會回傳結果</strong>。像是變數的宣告．．．</p><p>簡單來說，就是陳述式(Statement)所傳的訊息，都被瀏覽器「已讀不回」。</p><p>陳述式常見的類型： </p><ul><li>宣告(var、let及const)</li><li>流程控制：如if…else….、switch …等等</li><li>迴圈</li><li>函式(function)</li><li>區塊(block)</li><li>其他</li></ul><p>我們繼續用《射鵰英雄歪傳》來模擬陳述式的運作：</p><p>有一天歐陽克想要約黃蓉吃飯，古代可能要飛鴿傳書，現代則只要傳 Line，但是結果都是一樣的，鴿子被射下來烤乳鴿，傳 Line 被蓉妹「已讀不回」。</p><p><img src="https://i.imgur.com/1eHJJIy.png"></p><p>讓我們把上面的對話寫成JavaScript的程式碼，在瀏覽器的console視窗測試一下，看看會有甚麼結果：</p><p><img src="https://i.imgur.com/M8iU3Vm.png"></p><p>以上的那些程式碼都是陳述式(Statement)，都對瀏覽器做了某些指示，但是執行完畢，沒有回傳任何數值。所以上面那張圖裡面說了一大串，但是圖的最下面只跑出了undefined。</p><p>不過最後的if(…)那邊有貓膩喔？這點我在運算式的部分再深入解釋。</p><h2 id="運算式-Expression"><a href="#運算式-Expression" class="headerlink" title="運算式(Expression)"></a><strong>運算式</strong>(Expression)</h2><p>Expression ，中文有人翻譯成表達式、表示式或運算式，MDN 的定義如下：</p><blockquote><p><strong>運算式</strong><br>運算式是任何一段可以取得一個值的程式碼。<br>任何合乎語法的運算式都能取得一個值，概念上， 有兩種不同型態的運算式: 有副作用的 (例如: 將一個值指定給一個變數) 以及只為了取得值而解析的運算式。</p></blockquote><p>上面那段話最重要的地方就是<strong>「任何一段可以取得一個值的程式碼」，運算式(Expression)執行後一定會回傳一個值</strong>。這也是<strong>運算式</strong>( Expression )與陳述式( Statement )最大的不同。</p><p>在這裡繼續用《射鵰英雄歪傳》來模擬運算式的運作(筆者一定要這樣亂入嗎???)：</p><p>運算式就像是郭靖傳Line約黃蓉吃飯一樣，戀情正火熱燒著，就算是吃滷肉飯，黃蓉也會秒回答應！！不會「已讀不回」！</p><p><img src="https://i.imgur.com/4uzoCDM.png"></p><p>在這裡也讓我們用console來模擬一下上面那一串對話：</p><p><img src="https://i.imgur.com/7e9P8tF.png"></p><p>比較需要注意的是if(…)的(…)，需要布林值 true 、 false 來判斷條件會不會成立，所以(…)裡面會放運算式( Expression )，但 if (…){…} 這段程式碼本身是陳述句，不會回傳任何值，也無法將它賦值給變數。</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">if</span> <span class="token punctuation">(</span>condition<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token comment">//statement1</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>   statement2<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>由此可知運算式可能會混在陳述式之中，例如變數宣告本身式陳述式，但是 ＝ 號右側的部分卻屬於運算式。</p><p>要注意的是，我們這一段 if (…) 述句，執行之後雖然在 console 視窗下出現結果，不過那不是回傳一個值(存在記憶體中)，而是執行了 console.log() 印出的指令，印在 console 視窗上，這一個小小的坑在我剛學 JavaScript 時困惑了一陣子。</p><p>而且該放陳述式的地方是不允許放運算式的，例如 if (…) 的 (…) 裡面如果是陳述式，if述句就不知道該怎麼執行了。所以在一個會產生值的地方，是不能放入陳述式( Statement )。</p><p><img src="https://i.imgur.com/bNE5NxC.png"></p><p>最後整理一下重點：</p><p>JavaScript 的語法可以分為兩種，分別是陳述式( Statement )與運算式( Expression )，兩者的區分如下：</p><ul><li>陳述式( Statement )會執行一個指令，產生一個動作，但是不會回傳一個「值」。(已讀不回)。</li><li>運算式( Expression )會回傳一個值。</li><li>陳述式( Statement )中可以放入運算式來進行判斷，但是預期要放入運算式( Expression )的地方，也就是預期會產生一個值的地方，不能放入陳述式。</li></ul><p>我是初踏入前端領域的老學徒，如果有寫錯的地方還請大家包涵與指正，謝謝大家！</p><p>參考資料</p><p><a href="https://andyyou.github.io/2016/03/06/expressions-vs-statements-in-js/">重讀 Axel 的 Javascript 中的 Expression vs Statement 一文</a></p><p><a href="https://ithelp.ithome.com.tw/articles/10192146?sc=pt">Day16　函式陳述句與函式表示式</a></p><p><a href="https://www.w3schools.com/js/js_statements.asp">https://www.w3schools.com/js/js_statements.asp</a></p><p><a href="https://wcc723.github.io/development/2020/09/17/js-expression/">JavaScript 表達式觀念及運用 - JS Expression</a></p><p><a href="https://medium.com/@yining1204/javascript-%E6%A0%B8%E5%BF%83%E7%AF%87-%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98-chap-17-%E9%99%B3%E8%BF%B0%E5%BC%8F%E8%88%87%E8%A1%A8%E9%81%94%E5%BC%8F-c51f4b395180">JavaScript 核心篇 學習筆記: Chap.17 — 陳述式與表達式</a></p><p><a href="https://ithelp.ithome.com.tw/articles/10218937">JS 原力覺醒 Day07 - 陳述式 表達式</a></p>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript,JS直播班</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>何謂強制轉型、以及如何作到轉換型別？</title>
    <link href="/2021/10/28/typeConversions/"/>
    <url>/2021/10/28/typeConversions/</url>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/80LCkl5.jpg"><br>我們都知道JavaScript的基本型別有以下幾種：</p><span id="more"></span><ol><li>String ：字串，由一連串的字符 (characters) 組成。</li><li>Number ：數值，為 floating point number。</li><li>Boolean ：true 或 false。</li><li>undefined ：表示現在還沒有給值。</li><li>null ：不知道之前有沒有值，但是現在沒有值。</li><li>Symbol ：ES6 出現的新型別。</li></ol><p>JavaScript 的型別不在於變數本身，而在於變數被賦予的值。</p><p>如果以上那些你都知道，那你該來看看JavaScript變態的部分—「強制轉型」( <strong>coercion</strong> )。</p><p>斯斯有兩種，「強制轉型」也有兩種：</p><ul><li>隱含的強制轉型 — <strong>implicit coercion</strong></li><li>明確的強制傳型（explicit coercion）</li></ul><h2 id="隱含的強制轉型-—-implicit-coercion"><a href="#隱含的強制轉型-—-implicit-coercion" class="headerlink" title="隱含的強制轉型 — implicit coercion"></a>隱含的強制轉型 — <strong>implicit coercion</strong></h2><p>剛剛提到 JavaScript 的型別不在於變數本身，而在於<strong>變數被賦予的值</strong>。</p><p>JavaScript 在運算的時候，如果看到兩個不同型別的值，就會自動判斷，把值轉換為相同型別，再做運算。很親切(變態)吧!!??</p><p>不多說，讓我們看一下例子，比較容易進入狀況：</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token string">"1"</span><span class="token punctuation">;</span>      <span class="token comment">//字串</span>a <span class="token operator">=</span> a <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token comment">//'12'， a為字串"1"，數字2與字串相加，被轉型為字串"2"</span>a <span class="token operator">=</span> a<span class="token operator">*</span><span class="token number">2</span>           <span class="token comment">//24 ， 在乘法的時候，字串"12"與2相乘，字串被轉型為數值，得出的結果是數值 12</span>a <span class="token operator">=</span> a <span class="token operator">+</span> <span class="token boolean">true</span>      <span class="token comment">//25， 布林值遇到數值，被轉為數字1，相加後變成25</span>a <span class="token operator">=</span> a <span class="token operator">*</span> <span class="token keyword">null</span>      <span class="token comment">//0 ， null遇到數值被轉為0，數值與0相乘變成0</span>a <span class="token operator">=</span> a <span class="token operator">/</span> <span class="token keyword">undefined</span> <span class="token comment">//NaN， undefined無法再被轉型為數字</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>以上這些「我變我變我變變變」的情形就是 JavaScript 變數的「強制轉型」，而且是 JavaScript 親切的、自動的、在背後運作的、<strong>「隱含的強制轉型」（ implicit coercion ）</strong>。一下變字串，一下有變成數字、一下變成布林值…比孫悟空72變還厲害。</p><p>這種「隱含的轉型」（ implicit coercion ）基本上可以轉成三種型別：</p><ul><li>自動轉換為布林值( ToBoolean )</li><li>自動轉換為數值( ToNumber )</li><li>自動轉換為字串( ToString )</li></ul><h3 id="四則運算時的強制轉型"><a href="#四則運算時的強制轉型" class="headerlink" title="四則運算時的強制轉型"></a>四則運算時的強制轉型</h3><p>JavaScript在做四則運算的時候跟小學課本教的一樣，由左而右「先乘除後加減」。</p><p>其中以加法（＋）最需要注意！</p><p>如果是數值的運算，那沒有轉型的問題。「字串」的相加也沒有轉型的問題。</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//3</span><span class="token keyword">var</span> y <span class="token operator">=</span> <span class="token string">'歐陽鋒是'</span> <span class="token operator">+</span> <span class="token string">'一隻癩哈蟆'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//歐陽鋒是一隻癩哈蟆</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p><em>只有在不同型別的狀況下才有轉型的問題：</em></p><ul><li>當加號 + 兩側有一個是字串的情形下，會將「非字串」的那一邊「自動轉型」為字串，再將兩個字串連接在一起。如果另一方為 number 、 boolean 、 object 的情況下， number 、 boolean 、 object 會去叫用它們的** .toString 「原型方法」**，把自己變成字串，再去和另一個字串組合。</li><li>當一邊是數字，一邊是 undefined 的時候， undefined 會被試著轉為數字，變成 NaN ，任何數字與 NaN 相加都是 NaN 。</li><li>當一邊是數字，加號另一邊是 null 的時候， null 會被轉為數字 0 。</li></ul><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">//數字與字串相加</span><span class="token number">77</span> <span class="token operator">+</span> <span class="token string">'49'</span>         <span class="token comment">//'7749'</span><span class="token number">77</span> <span class="token operator">+</span> <span class="token string">'四十九'</span>      <span class="token comment">//'77四十九'</span><span class="token comment">//字串與字串相加</span><span class="token string">'七七'</span> <span class="token operator">+</span> <span class="token string">'四十九'</span>  <span class="token comment">//'七七四十九'</span><span class="token number">77</span> <span class="token operator">+</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>           <span class="token comment">//'77[object object]'</span><span class="token comment">//當數字要跟undefined相加的時候，udefined會被嘗試轉為數字，也就是NaN，還記得NaN的型別是number嗎？</span><span class="token number">77</span> <span class="token operator">+</span> unfined      <span class="token comment">//NaN</span><span class="token string">'七七'</span> <span class="token operator">+</span> unfined   <span class="token comment">//'七七undefined'</span><span class="token comment">//當數字要與null相加時，null會被轉成數字 0 ;</span><span class="token number">77</span> <span class="token operator">+</span> <span class="token keyword">null</span>          <span class="token comment">//77</span><span class="token string">'七七'</span> <span class="token operator">+</span> <span class="token keyword">null</span>       <span class="token comment">//77null</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>而如果是減乘除法（ － ＊ ／ ）的情況，除了數值以外的其他基本型別都會透過 Number() 方法轉為數字。物件則在乘除的時候會透過 Number() 方法，轉為數字，在減法時透過 valueOf() 方法轉為數字。</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token number">49</span> <span class="token operator">-</span> <span class="token string">'36'</span>   <span class="token comment">//13</span><span class="token comment">//字串會被轉為數字，也就是NaN</span><span class="token number">49</span> <span class="token operator">-</span> <span class="token string">'abc'</span> <span class="token comment">//NaN</span><span class="token comment">//布林值的true，會被轉行為數字 1</span><span class="token number">49</span> <span class="token operator">-</span> <span class="token boolean">true</span>  <span class="token comment">//48</span><span class="token comment">//布林值的false，會被轉行為數字 0</span><span class="token number">49</span> <span class="token operator">-</span> <span class="token boolean">false</span>  <span class="token comment">//49</span><span class="token number">49</span> <span class="token operator">-</span> <span class="token keyword">undefined</span>  <span class="token comment">//NaN</span><span class="token comment">//null會轉為數字0</span><span class="token number">49</span> <span class="token operator">-</span> <span class="token keyword">null</span>       <span class="token comment">//49</span><span class="token number">49</span> <span class="token operator">-</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>   　　　<span class="token comment">//NaN</span><span class="token number">49</span> <span class="token operator">*</span> <span class="token string">'10'</span>       <span class="token comment">//490</span><span class="token number">49</span> <span class="token operator">*</span>  <span class="token string">'四十九'</span>   <span class="token comment">//NaN</span><span class="token number">49</span> <span class="token operator">*</span> <span class="token boolean">true</span>       <span class="token comment">// 49</span><span class="token number">49</span> <span class="token operator">*</span> <span class="token boolean">false</span>      <span class="token comment">//0</span><span class="token number">49</span> <span class="token operator">*</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>         <span class="token comment">//NaN</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>下面附上變數在四則運算時的「自動轉型」規則：</p><table><thead><tr><th>四則運算</th><th align="left">數字</th><th align="left">基本型別非數字</th><th align="left">物件</th></tr></thead><tbody><tr><td>減法</td><td align="left">正常運算</td><td align="left">Number()方法轉為數字</td><td align="left">透過valueOf()轉為數字</td></tr><tr><td>乘法</td><td align="left">正常運算</td><td align="left">Number()方法轉為數字</td><td align="left">Number()方法轉為數字</td></tr><tr><td>除法</td><td align="left">正常運算</td><td align="left">Number()方法轉為數字</td><td align="left">Number()方法轉為數字</td></tr><tr><td>加法</td><td align="left">正常運算</td><td align="left">如果是number、boolean透過toString()方法轉為字串，null或undefined透過String()轉為字串</td><td align="left">toString()轉為字串</td></tr></tbody></table><h3 id="比較運算子的強制轉型"><a href="#比較運算子的強制轉型" class="headerlink" title="比較運算子的強制轉型"></a>比較運算子的強制轉型</h3><p>比較運算子用來比較兩側的數值，比較之後得到布林值 true 或 false。</p><p>一個等號 &#x3D;，我們知道是「指定、賦值」的意思。</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">49</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>在JavaScript中， <code>==</code> 是相等的意思，而 <code>===</code> 是全等的意思。</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">49</span><span class="token punctuation">;</span>   <span class="token comment">//數字</span><span class="token keyword">var</span> y <span class="token operator">=</span> <span class="token string">'49'</span><span class="token punctuation">;</span> <span class="token comment">//字串</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x <span class="token operator">==</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true，因為 == 在比較兩側的變數是否相等的時候，會自動幫變數轉型。</span><span class="token boolean">true</span> <span class="token operator">==</span> <span class="token string">'1'</span><span class="token punctuation">;</span>   <span class="token comment">//true</span><span class="token boolean">false</span> <span class="token operator">==</span> <span class="token string">'0'</span><span class="token punctuation">;</span>   <span class="token comment">//true</span><span class="token boolean">true</span> <span class="token operator">===</span> <span class="token string">'1'</span><span class="token punctuation">;</span>   <span class="token comment">//false</span><span class="token boolean">false</span> <span class="token operator">===</span> <span class="token string">'0'</span><span class="token punctuation">;</span>  <span class="token comment">//false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>使用 <code>==</code> 相等的時候，會自動替兩側的變數轉型。</p><p>當使用 <code>===</code> 全等的時候，不會替變數自動轉型，是比較嚴謹的模式，也是比較推薦使用的方法。</p><p>比較特別的是，NaN不等於NaN，不管是 <code>==</code>  還是 <code>===</code>，都是一樣 NaN 不等於 NaN 。</p><p>&#x3D;&#x3D;的自動轉型規則：</p><ul><li>當遇到「字串」與「數字」做比較的時候，字串會透過 Number() 嘗試轉為數字，再進行比較。</li><li>如果比較的一方為布林值，則 true 會轉為 1 ， false 會轉為 0 。</li><li>當<code>==</code> 的一側為物件型別，另一側為基本型別，物件型別會透過 valueOf() ，轉為對應的基本型別進行比較。</li></ul><p>不等於<code>!=</code> 與 <code>!==</code></p><p><code>!=</code> 與「! &#x3D;&#x3D;」兩者都是不等於，但是 <code>!=</code> 會替變數做自動轉型，而 <code>!==</code> 不會替變數自動轉型，推薦使用 <code>!==</code> 。</p><h3 id="大於＞與小於＜的強制轉型"><a href="#大於＞與小於＜的強制轉型" class="headerlink" title="大於＞與小於＜的強制轉型"></a>大於＞與小於＜的強制轉型</h3><p>我有看到一個數字比大小的有趣例子，借來筆記一下：</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;</span> <span class="token number">2</span> <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">&lt;</span> <span class="token number">2</span> <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><p>天哪！怎麼會是這樣的結果！ 3 &lt; 2 &lt; 1 的布林值竟然是 true ．．．天要塌了！</p><p>其實是因為 ＜ 是由左向右( left to right )去做比較，下面來解釋一下：</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;</span> <span class="token number">2</span> <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">1</span><span class="token operator">&lt;</span><span class="token number">2</span> <span class="token comment">//true</span><span class="token boolean">true</span> <span class="token operator">&lt;</span> <span class="token number">3</span> <span class="token comment">//true轉為數字1，1&lt;3，結果為true。</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">&lt;</span> <span class="token number">2</span> <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token number">3</span> <span class="token operator">&lt;</span> <span class="token number">2</span> <span class="token comment">//false</span><span class="token boolean">false</span> <span class="token operator">&lt;</span> <span class="token number">1</span> <span class="token comment">// false轉為數字0，0&lt;1，所以結果為true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>所以才會得出 console.log( 3 &lt; 2 &lt; 1 );會變成 true 的結果。</p><p><img src="https://i.imgur.com/EMhtQsq.png"></p><h3 id="Boolean的強制傳型"><a href="#Boolean的強制傳型" class="headerlink" title="Boolean的強制傳型"></a>Boolean的強制傳型</h3><p>邏輯運算子( Logical Operator )有 <code>AND &amp;&amp;</code> 、 <code>OR ||</code> 、<code>NOT !</code> 三種。運算子兩側的值經過 ToBoolean 轉換後會得到一個布林值，再由邏輯運算子比較後傳回其中一個值。</p><p><code>&amp;&amp;</code> 以及 <code>||</code> 進行判斷時，會對左邊的數值進行檢查，如果原本是布林值，就進行後續判斷。如果不是，則透過 ToBoolean 轉換為 true 或 false 。</p><ul><li>AND &amp;&amp; ：(條件&#x2F;運算式 A ) &amp;&amp; (條件&#x2F;運算式 B )，如果兩側的值都為 true ，得到 true 的結果；如果其中一方為 false ，則得到 false 。<br>如果第一個值轉換為true，則回傳第二個值，否則回傳第一個值。</li><li>OR || ：(條件&#x2F;運算式A) || (條件&#x2F;運算式B)，兩側的值只要有一側為 true ，就得到 true 的結果；如果兩側都為 false ，才得到 false 。<br>如果第一個值轉換為true，則回傳第一個值，否則回傳第二個值。</li><li>NOT ! ： true 的結果透過 ! 轉換會得到 false ，而 false 的結果會變成 true。</li></ul><p>那些經過ToBoolean轉換後會得到true的狀況太多，而會得到false的值只有以下五種：</p><ul><li>undefined</li><li>Null</li><li>+0、-0</li><li>NaN</li><li>空字串””或’’</li></ul><p>其他的值都會轉為true。</p><h2 id="明確的強制傳型（explicit-coercion）"><a href="#明確的強制傳型（explicit-coercion）" class="headerlink" title="明確的強制傳型（explicit coercion）"></a>明確的強制傳型（explicit coercion）</h2><p>也就是透過JavaScript提供的函式來進行變數型別轉換，例如：</p><ul><li>轉換為數值型別： Number() 、 parseInt() 、 parseFloat()</li><li>轉換為字串型別： toString() 、 String()</li><li>轉換為布林型別： Boolean()</li></ul><h3 id="Number-、parseInt-、parseFloat"><a href="#Number-、parseInt-、parseFloat" class="headerlink" title="Number()、parseInt()、parseFloat()"></a>Number()、parseInt()、parseFloat()</h3><p>Number()可以將值「嘗試轉型」為「數值型別」，但要並非每種物件都可以順利轉成 number 型別，如果轉型失敗就會變成 NaN (非數值的數值)！</p><p>parseInt(str [, radix]) 函式能將輸入的字串轉成整數，第二個參數 radix 代表使用哪種進位制轉換。</p><p>它會忽略前後空白，在遇到字元被無法解析時，會忽略那個字元與後面的所有字元，停止解析，並回傳目前為止的結果。</p><p>如果第一個字元就無法被解析，會回傳 NaN。</p><p>parseFloat(str)能將字串轉換為以十進位表示的浮點數。</p><p>來看一下範例：</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">'123'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//123</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">'華山論劍'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//NaN</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">'9陰真經'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//NaN</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//0</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>          <span class="token comment">//1</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">//0</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">//1</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//NaN</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">//NaN</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">'9陰真經'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//9</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">'九陰真經'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//NaN</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token number">101010</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//42</span><span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">'3.1416'</span><span class="token punctuation">)</span>  <span class="token comment">//3.1416</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="toString-、String"><a href="#toString-、String" class="headerlink" title=".toString()、String()"></a>.toString()、String()</h3><p>String() 與 .toString() 都可以將值轉換為字串型別，差別在於 .toString() 在收到 null 、 undefined 和數字時會報錯。</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token function">String</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span>          <span class="token comment">//'123'</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>         <span class="token comment">//'null'</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token string">'undefined'</span><span class="token punctuation">)</span>  <span class="token comment">//'undefined'</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>         <span class="token comment">//'true'</span><span class="token boolean">true</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token comment">//'true'</span><span class="token number">123.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//Uncaught SyntaxError: Invalid or unexpected token</span><span class="token keyword">null</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//Uncaught TypeError: Cannot read properties of null (reading 'toString')</span>    <span class="token keyword">undefined</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//Uncaught TypeError: Cannot read properties of undefined (reading 'toString')</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="Boolean"><a href="#Boolean" class="headerlink" title="Boolean()"></a>Boolean()</h3><p>Boolean() 可以用來將其他的資料型態轉型成布林值型態。還記得前面提過幾種會變成 false 的值嗎?</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>       <span class="token comment">//true</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token string">'100'</span><span class="token punctuation">)</span>     <span class="token comment">//true</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>        <span class="token comment">//false</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>     <span class="token comment">//false</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token comment">//false</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>      <span class="token comment">//false</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token string">'""'</span><span class="token punctuation">)</span>      <span class="token comment">//true</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token string">'false'</span><span class="token punctuation">)</span>   <span class="token comment">//true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>本來以為這個題目很好寫…..結果寫得一點都不輕鬆，也找不到方法寫得很有趣。幾乎每個知識點都有再深入研究的餘地，就像《浪人劍客》裡面老人對宮本武藏說的：「技是無限的，卻有鑽研的餘地！」</p><p>重點整理一下，如果可以掌握一些概念，之後還可以再仔細琢磨：</p><p>強制轉型分為兩種：</p><ul><li>隱含的強制轉型：就是 JavaScript 在運算的過程中，依照它的規則在背地裡把值的型別轉換成其他類的型別。<ul><li>四則運算中加法如果遇到「字串」的轉型最需要留意，其他的減乘除都會試圖轉換成數字來處理。</li><li>使用「＝＝＝」相等的時候，會自動替兩側的變數轉型。當使用「＝＝＝」全等的時候，不會替變數自動轉型，建議使用「＝＝＝」來進行比較。</li><li>在布林值的轉型部分，請記得： undefined 、 Null 、 +0 、 -0 、 NaN 、空字串都會轉換成 false。</li></ul></li><li>明顯的強制轉型：透過 JavaScript 提供的函式來進行變數型別轉換。<ul><li>轉換為數值型別： Number() 、 parseInt() 、 parseFloat()</li><li>轉換為字串型別： toString() 、 String()</li><li>轉換為布林型別： Boolean()</li></ul></li></ul><p>我是初踏入前端領域的老學徒，如果有寫錯的地方還請大家包涵與指正，謝謝大家！</p><p>參考資料</p><ul><li><p><a href="https://cythilya.github.io/2018/10/15/coercion/">你懂 JavaScript 嗎？#8 強制轉型（Coercion）</a></p></li><li><p><a href="https://medium.com/stuarthsu/javascript-%E5%85%A8%E6%94%BB%E7%95%A5-%E5%85%8B%E6%9C%8D-js-%E7%9A%84%E5%A5%87%E6%80%AA%E9%83%A8%E5%88%86-cf44d08ffc0">JavaScript 全攻略：克服 JS 的奇怪部分</a></p></li><li><p><a href="https://www.itread01.com/content/1546084624.html">Javascript型別轉換的技巧</a></p></li><li><p><a href="https://www.uj5u.com/qiye/254374.html">JavaScript資料型別轉換</a></p></li><li><p><a href="https://jimmywei01.github.io/2019/05/28/JS-%E7%B4%80%E9%8C%842-%E5%8C%85%E8%A3%B9%E7%89%A9%E4%BB%B6%E3%80%81%E8%87%AA%E5%8B%95%E8%BD%89%E5%9E%8B/">https://jimmywei01.github.io/2019/05/28/JS-紀錄2-包裹物件、自動轉型/</a></p></li><li><p><a href="https://medium.com/unalai/%E8%AA%8D%E8%AD%98-parseint-parsefloat-%E8%88%87-number-%E8%BD%89%E6%8F%9B%E6%88%90%E6%95%B8%E5%AD%97%E7%9A%84%E4%B8%89%E7%A8%AE%E6%96%B9%E6%B3%95-276640aedb4e">認識 parseInt、parseFloat 與 Number 轉換成數字的三種方法</a></p></li><li><p><a href="https://blog.miniasp.com/post/2020/02/21/JavaScript-Numbers-Deep-Dive">前端工程研究：關於 JavaScript 中 Number 型別的常見地雷與建議作法</a></p></li><li><p><a href="https://codertw.com/%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC/254123/">淺談JS中String()與 .toString()的區別</a></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript, JS直播班</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>if else 與 switch 的使用時機</title>
    <link href="/2021/10/27/ifElseAndSwitch/"/>
    <url>/2021/10/27/ifElseAndSwitch/</url>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/Kz9NhXd.jpg"></p><p>日常生活中充滿了各式各樣的邏輯判斷：「如果」怎樣，就去做某件事，「否則」就去做另外一件事。</p><p>「如果降雨機率超過30%，就帶傘！」每天早上出門要做的判斷。</p><p>「如果肚子餓了，就吃香蕉！」這是猴子也會的事情！</p><span id="more"></span><p>而上帝也教你怎麼做判斷，古早的聖經就說了：</p><p>「如果有人打你的右臉，連左臉也轉過來由他打！」我的臉好腫呀！</p><p><img src="https://i.imgur.com/Jr0NGg7.jpg"></p><h2 id="if…else"><a href="#if…else" class="headerlink" title="if…else"></a>if…else</h2><p>「如果 A 條件成立，就做甲這件事！否則就做乙這件事！」這句話，其實是一個條件式，可以轉換為布林值來判斷：</p><ul><li>「如果A條件成立」就是 A 條件為true的情況。</li><li>「否則…」就是 A 條件為 false 的情況。</li></ul><p>寫成JavaScript就會是這樣子：</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">if</span> <span class="token punctuation">(</span>條件式<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//條件成立(true)的話，執行&#123; 甲 &#125;區塊內的內容</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token comment">//如果條件不成立(false)，執行&#123;  乙 &#125;區塊中的內容</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>如果條件不只一個，可以使用 else…if 來新增條件。</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">if</span> <span class="token punctuation">(</span>條件式 <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//條件1成立(true)的話，執行&#123; 甲 &#125;區塊內的內容</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>條件式 <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//條件2成立(true)的話，執行&#123; 乙 &#125;區塊內的內容</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>條件式 <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//條件3成立(true)的話，執行&#123; 丙 &#125;區塊內的內容</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token comment">//如果上面的條件都不成立(false)，執行&#123; 丁 &#125;區塊中的內容</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p><img src="https://i.imgur.com/KmopoxF.png"></p><p>補充一點， if 跟 else 在一個邏輯判斷流程中只能使用一次，但是 else if 卻可以使用很多次。</p><p>讓我們繼續請郭靖….他爹來示範「if….else….」的用法：</p><p>話說郭靖他爹郭嘯天與楊康他爹楊鐵心在妻子懷孕的時候就約定，如果孩子生出來都是男生，就結拜為兄弟；如果是一男一女就結為夫妻。</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">//guoChildSex代表郭家的孩子，yangChildSex代表楊家的孩子，因為孩子未出生，還不知性別。</span><span class="token keyword">let</span> guoChildSex <span class="token operator">=</span> <span class="token string">'male'</span><span class="token punctuation">;</span><span class="token keyword">let</span> yangChildSex <span class="token operator">=</span> <span class="token string">'female'</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span> guoChildSex <span class="token operator">===</span> yangChildSex <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'郭家孩子與楊家孩子結拜為金蘭'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'郭家孩子與楊家孩子結為夫妻'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//考慮到多元成家的話，邏輯會更複雜，這個....我們就先停在這裡</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>這是一個簡單的雙向分歧決策，但是如果是更複雜的情況呢？我們看看下個例子：</p><p>話說在《射鵰英雄傳》中，長春子丘處機在嘉興酒樓和江南七怪比賽喝酒這一段十分精彩。但是七怪有七個人，到底要派誰出去呢？猜拳嗎？</p><p><img src="https://i.imgur.com/wkEmGhs.png"></p><p>讓我們請 JavaScript 來幫我們決定人選吧！</p><p>我想隨機選出 1 到 7 之間的數字，從七個人中選出一個來跟丘處機鬥酒，例如數字等於1就印出「飛天蝙蝠–柯鎮惡出來喝酒」，數字等於2就印出「妙手書生–朱聰出來喝酒」，依此類推。</p><p>Math.random() 會隨機產生 0 到 1 之間的小數。 而 Math.ceil(x) 會將x無條件進位。</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">//Math.random() 會隨機產生 0 到 1 之間的小數。 而 Math.ceil(x) 會將x無條件進位。</span><span class="token keyword">let</span> drinkWineOrder <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>drinkWineOrder<span class="token operator">===</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'飛天蝙蝠--柯鎮惡出來喝酒'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>drinkWineOrder<span class="token operator">===</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'妙手書生--朱聰出來喝酒'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>drinkWineOrder<span class="token operator">===</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'馬王神--韓寶駒出來喝酒'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>drinkWineOrder<span class="token operator">===</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'南山樵子--南希仁出來喝酒'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>drinkWineOrder<span class="token operator">===</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'笑彌陀--張阿生出來喝酒'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>drinkWineOrder<span class="token operator">===</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'鬧市俠隱--全金發出來喝酒'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'越女劍--韓小瑩出來喝酒'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>寫了這麼落落長的一段，看得眼都花了，if … else … 跑了7次小括號裡面的條件，也判斷了 7 次，這種邏輯判斷稱之為「多向分歧決策」。</p><h2 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h2><p>JavaScript 還有另一種的 switch 條件判斷式，比較適合這樣的情況，它的寫法是這樣的：</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">switch</span> <span class="token punctuation">(</span>expression<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">case</span> <span class="token literal-property property">value1</span><span class="token operator">:</span>        <span class="token comment">//當 expression 的值符合 value1</span>        <span class="token comment">//要執行的陳述句</span>    <span class="token punctuation">[</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">]</span>  <span class="token keyword">case</span> <span class="token literal-property property">value2</span><span class="token operator">:</span>        <span class="token comment">//當 expression 的值符合 value2</span>        <span class="token comment">//要執行的陳述句</span>    <span class="token punctuation">[</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">]</span>  <span class="token operator">...</span>  <span class="token keyword">case</span> <span class="token literal-property property">valueN</span><span class="token operator">:</span>        <span class="token comment">//當 expression 的值符合 valueN</span>        <span class="token comment">//要執行的陳述句</span>    <span class="token punctuation">[</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">]</span>  <span class="token punctuation">[</span><span class="token keyword">default</span><span class="token operator">:</span>        <span class="token comment">//當 expression 的值都不符合上述條件</span>        <span class="token comment">//要執行的陳述句</span>    <span class="token punctuation">[</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p><strong>switch 括號中可以放入「運算式」( switch 語句會先執行指定的 expression ，得到一個值)、「變數」或「值」，然後一一去和 case 後面的值比對，如果兩者相吻合，就得出一個 true 的值，然後執行 true 那個 case 區塊的程式敘述。如果每個 case 都不符合則執行 default 區塊的程式敘述。</strong></p><p>當滿足 case 列出來的條件，執行完程式敘述之後，break 指令會中止流程判斷，不去執行後面的 case 條件判斷。</p><p><img src="https://i.imgur.com/qE12F15.png"></p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">switch</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'飛天蝙蝠--柯鎮惡出來喝酒'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'妙手書生--朱聰出來喝酒'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'馬王神--韓寶駒出來喝酒'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'南山樵子--南希仁出來喝酒'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token keyword">case</span> <span class="token number">5</span><span class="token operator">:</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'笑彌陀--張阿生出來喝酒'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token keyword">case</span> <span class="token number">6</span><span class="token operator">:</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'鬧市俠隱--全金發出來喝酒'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token keyword">case</span> <span class="token number">7</span><span class="token operator">:</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'越女劍--韓小瑩出來喝酒'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token keyword">default</span><span class="token operator">:</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'七個人都喝醉了，認輸！！'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>使用 switch 之後，程式碼沒有夾雜一堆()與{}，看起來簡潔、清楚多了。</p><h1 id="if…else-與-switch的差別"><a href="#if…else-與-switch的差別" class="headerlink" title="if…else 與 switch的差別"></a>if…else 與 switch的差別</h1><p>前面簡單介紹了 if…else 與 switch 的語法，現在來看看兩者的差異。</p><h3 id="「範圍取值」適合使用if…else，「確定取值」則使用switch"><a href="#「範圍取值」適合使用if…else，「確定取值」則使用switch" class="headerlink" title="「範圍取值」適合使用if…else，「確定取值」則使用switch"></a>「範圍取值」適合使用if…else，「確定取值」則使用switch</h3><p>如果是「範圍取值」，也就是判斷的示範為區間，適合使用 if… else 語句。</p><p>如果是「確定取值」，也就是判斷的結果有明確的值，則使用 switch 是一個不錯的選擇。</p><p>讓我們看看下面的這個範例：</p><p>郭靖為了與黃蓉約會參加桃花島主黃藥師的考試，依考試成績的範圍，有不一樣的獎賞。</p><p>如果用 if….else if 要這樣寫：</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">//郭靖參加桃花島的黃藥師的考試，考試成績超過85分可以娶黃蓉，不及格就去白陀山養癩蛤蟆</span><span class="token keyword">let</span> guoScore <span class="token operator">=</span> <span class="token number">87</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>guoScore <span class="token operator">>=</span> <span class="token number">85</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'郭靖可以得到跟黃蓉約會的資格'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>guoScore <span class="token operator">&lt;</span> <span class="token number">85</span> <span class="token operator">&amp;&amp;</span> guoScore <span class="token operator">>=</span> <span class="token number">70</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'郭靖可以學得黃藥師的一樣功夫'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>guoScore <span class="token operator">&lt;</span> <span class="token number">70</span> <span class="token operator">&amp;&amp;</span> guoScore <span class="token operator">>=</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'郭靖可以桃花島一日遊'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'郭靖考試不及格，去白駝山養養癩蛤蟆'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//郭靖可以得到跟黃蓉約會的資格</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>使用 switch 的寫法，如果原樣照搬 if…else 的寫法的話，會變成這樣：</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">let</span> guoScore <span class="token operator">=</span><span class="token number">87</span><span class="token punctuation">;</span><span class="token keyword">switch</span><span class="token punctuation">(</span>guoScore<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">case</span> <span class="token punctuation">(</span>guoScore <span class="token operator">>=</span> <span class="token number">85</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token comment">//87 !== true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'郭靖可以得到跟黃蓉約會的資格'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token punctuation">(</span>guoScore <span class="token operator">&lt;</span> <span class="token number">85</span> <span class="token operator">&amp;&amp;</span> guoScore <span class="token operator">>=</span> <span class="token number">70</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//87 !== false  </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'郭靖可以學得黃藥師的一樣功夫'</span><span class="token punctuation">)</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token punctuation">(</span>guoScore <span class="token operator">&lt;</span> <span class="token number">70</span> <span class="token operator">&amp;&amp;</span> guoScore <span class="token operator">>=</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token comment">//87 !== false  </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'郭靖可以桃花島一日遊'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">default</span><span class="token operator">:</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'郭靖考試不及格，去白駝山養癩蛤蟆'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//郭靖考試不及格，去白陀山養養癩蛤蟆</span><span class="token comment">//switch()小括號帶入的是變數guoScore，會判斷為全部條件都不吻合，直接去執行default區塊。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>什麼！明明郭靖考了87分，怎麼還要去白陀山養癩蛤蟆！！！這一定有黑幕！！！</p><p>等等！別急著打我！讓我來解說一下！</p><p>先記得這件事： switch() 括號中的條件跟 case 後面的值比較的結果必須為 true ，才會去執行case 後面的程式碼區塊。</p><p>因為每個 case 括號裡的 guoScore 是去跟外面的 let guoScore &#x3D; 87 比較，比較的結果不是 true 就是 false，其中只有「 case (guoScore &gt;&#x3D; 85) 」為 true ，其他的範圍區間都是false。</p><p>而 switch() 小括號所帶入變數 guoScore 的值為 87 ，去跟每個 case 的布林值比對， 87 不等於true，也不等於false，當然找不到符合的條件，所以就直接去執行所有條件都不成立的 default 區塊。</p><p>如果要讓這個 switch 區塊能夠執行，就要這樣寫：</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">let</span> guoScore <span class="token operator">=</span> <span class="token number">87</span><span class="token punctuation">;</span><span class="token keyword">switch</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">case</span> <span class="token punctuation">(</span>guoScore <span class="token operator">>=</span> <span class="token number">85</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token comment">//true == true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'郭靖可以得到跟黃蓉約會的資格'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token punctuation">(</span>guoScore <span class="token operator">&lt;</span> <span class="token number">85</span> <span class="token operator">&amp;&amp;</span> guoScore <span class="token operator">>=</span> <span class="token number">70</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token comment">//true !== false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'郭靖可以學得黃藥師的一樣功夫'</span><span class="token punctuation">)</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token punctuation">(</span>guoScore <span class="token operator">&lt;</span> <span class="token number">70</span> <span class="token operator">&amp;&amp;</span> guoScore <span class="token operator">>=</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token comment">//true !== false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'郭靖可以桃花島一日遊'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">default</span><span class="token operator">:</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'郭靖考試不及格，去白駝山養癩蛤蟆'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//'郭靖可以得到跟黃蓉約會的資格'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>由上面可以看出 switch() 的小括號裡帶入的就不是郭靖的分數 guoScore 了，而是布林值 true ，這時去和 case 後面的布林值比對，才會在「 case (guoScore &lt; 80 &amp;&amp; guoScore &gt;&#x3D; 60) 」得到 true &#x3D;&#x3D;&#x3D; true 相等的結果，進而得到「’郭靖可以得到跟黃蓉約會的資格’」的結果。</p><p>這種情況之下，使用 switch 就不如 if…else if… 直觀了。</p><p>所以在這裡我們得到的重點是：</p><ul><li>「 if…else if … 」適合使用在不同的條件區間的判斷，如果都沒符合條件，則執行「 else 」的程式碼。</li><li>而「switch」適合使用在有明確的「值」的情況下。</li></ul><h2 id="switch-是用嚴謹模式-x3D-x3D-x3D-在比對-case-後面的數值"><a href="#switch-是用嚴謹模式-x3D-x3D-x3D-在比對-case-後面的數值" class="headerlink" title="switch 是用嚴謹模式( &#x3D;&#x3D;&#x3D; )在比對 case 後面的數值"></a>switch 是用嚴謹模式( &#x3D;&#x3D;&#x3D; )在比對 case 後面的數值</h2><p>最後讓我們用情境題來解釋一下這個情形：</p><p>黃藥師對於郭靖考到 87 分非常不爽，於是拿出了三個信封，上面分別寫了”1”、”2”、”3”，要郭靖從裡面挑一個。</p><p>讓我們看一下 if…else if 怎麼寫：</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">let</span> guoPick <span class="token operator">=</span> <span class="token string">"3"</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>guoPick <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'到東海餵鯊魚！'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>guoPick <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'到南海騎烏龜'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>guoPick <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'在桃花島當島主'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'去白駝山養癩蛤蟆'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">//在桃花島當島主</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>運氣好！你打我呀！挑到”3”，可以’在桃花島當島主’。</p><p>讓我們看看用 switch 來判斷，會發生甚麼悲劇…</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">let</span> guoPick <span class="token operator">=</span> <span class="token string">"3"</span><span class="token punctuation">;</span><span class="token keyword">switch</span><span class="token punctuation">(</span>guoPick<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'到東海餵鯊魚！'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'到南海騎烏龜'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'在桃花島當島主'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">default</span><span class="token operator">:</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'去白駝山養癩蛤蟆'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//去白陀山養癩蛤蟆</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>蛤！為甚麼挑到”3”，還要’去白駝山養癩蛤蟆’！</p><p><img src="https://i.imgur.com/6ugbrVi.png"></p><p>郭靖的拳頭又硬了！</p><p>這是因為switch判斷式是使用嚴格模式，遇到 ‘3’ 這種狀況，會把它當字串處理，所以才會所有  case 條件都不符合，直接去執行 default 區塊。</p><p>講了那麼多，前面說的忘記了沒關係，讓我們重點整理一下， switch 與 if…else 的差別與使用時機：</p><ul><li>if…else 適合「單向決策」與「雙向分歧決策」； switch 適合「多向分歧決策」。</li><li>「範圍取值」適合使用 if…else ；「確定取值」則適合使用 switch 。</li><li>switch 是用嚴謹模式( &#x3D;&#x3D;&#x3D; )在比對 case 後面的數值</li></ul><p>我不是老司機，而是初踏入前端領域的老學徒，如果有寫錯的地方還請大家包涵與指正，謝謝大家！</p><p>參考資料</p><p><a href="https://ithelp.ithome.com.tw/articles/10211561">JavaScript 基礎知識-switch &amp; if else 的判別差異</a></p><p><a href="https://www.javascripttutorial.net/javascript-switch-case/">JavaScript switch case</a></p><p><a href="https://www.fooish.com/javascript/switch-case.html">JavaScript switch 語法</a></p><p><a href="https://ithelp.ithome.com.tw/articles/10210319">Javascript 中 switch 的彈性用法</a></p><p><a href="https://hsiangfeng.github.io/javascript/20200117/3217748743/?fbclid=IwAR099rUd-l2VYJ4eyJmXxgOFQh1O7d2pVqecpGZUEA3z7420mVuPszQWmh8">JavaScript 的 if 跟 switch 效能</a></p><p><a href="https://yuwensaf.github.io/68afa98c/">switch - 程式碼教學</a></p><p><a href="https://javascript.alphacamp.co/condition.html">流程控制 if&#x2F;else 條件判斷</a></p><p><a href="https://iter01.com/195048.html">switch…case &amp;&amp; if…else效率比較和優化</a></p>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript, JS直播班</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>null 與 undefined 的差別</title>
    <link href="/2021/10/23/nullUndefined/"/>
    <url>/2021/10/23/nullUndefined/</url>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/WIxDLyl.jpg"></p><p>undefined是基本型別之一，指的是「變數目前還沒有給值」，如果宣告一個變數，卻沒有初始化(沒有給值)，那變數的值就預設為undefined。</p><span id="more"></span><figure><div class="code-wrapper"><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> a<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token comment">//undefined</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//NaN</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">+</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//NaN</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//'undefined'</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false，在求布林值時會轉成false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>null也是基本型別之一，指的是「不管前500年，還是後500年有沒有值，總之現在沒有值」。</p><p>在指定DOM元素時，如果那個DOM元素不存在，也會回傳null。</p><figure><div class="code-wrapper"><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//null</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token comment">//0</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">+</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//0,1 + 0 =1</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token comment">//'object'</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token comment">//false，在求布林值時會轉成false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>但是要注意的是：</p><figure><div class="code-wrapper"><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">null</span> <span class="token operator">==</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span> <span class="token comment">//true，因為在JS中用布林去查詢null跟undefined都是falsy</span><span class="token keyword">null</span> <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span> <span class="token comment">//false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><p>最後的重點整理：</p><h3 id="undefined和null相似處"><a href="#undefined和null相似處" class="headerlink" title="undefined和null相似處:"></a>undefined和null相似處:</h3><ul><li>都没有屬性和方法，也不能額外添加屬性方法</li><li>皆為Falsy Value(Boolean判斷時為false)</li><li>皆為原始型別(Primitive Type)</li></ul><h3 id="undefined和null相異之處："><a href="#undefined和null相異之處：" class="headerlink" title="undefined和null相異之處："></a>undefined和null相異之處：</h3><ul><li><code>typeof null</code> 會回傳 object ; <code>typeof undefined</code> 會回傳 undefined。</li><li>當要取用一個物件的屬性或陣列的元素時，若該屬性&#x2F;元素不存在，回傳undefined。或原本一個函數需要傳入參數，但是調用函數時卻沒有傳入參數，則回傳值將會是undefined。</li><li>在做DOM元素操作時，若要獲取的DOM元素不存在，則會回傳null。</li></ul><p>參考資料</p><ul><li><p><a href="https://www.jstips.co/zh_tw/javascript/differences-between-undefined-and-null/">undefined 和 null 的差別</a></p></li><li><p><a href="https://snh90100.medium.com/javascript%E4%B8%ADundefined%E5%92%8Cnull%E7%9A%84%E5%B7%AE%E5%88%A5-1f48e9be5e02">Javascript中undefined和null的差異</a></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript, JS直播班</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>by reference (傳參考)、by value(傳值)的差別</title>
    <link href="/2021/10/15/byReferenceByValue/"/>
    <url>/2021/10/15/byReferenceByValue/</url>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/k3INsPA.jpg"></p><p>在參加鐵人賽的時候，因為這個題目了解的朦朦朧朧、似懂非懂，所以不敢寫這個題目。直到JS直播班聽了老師的解說，才一秒突破盲腸，恍然大悟。</p><span id="more"></span><p>談這個題目之前，先來做一下六角學院JS直播班第一週的周末作業《記憶體接龍》，以了解變數與記憶體儲存位置的關係，這樣對於by reference (傳參考)、by value(傳值)會有更深入的了解。</p><h2 id="第-1-題"><a href="#第-1-題" class="headerlink" title="第 1 題"></a><strong>第 1 題</strong></h2><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">// 1. console.log 的值為？</span><span class="token comment">// 2.出現幾個變數、型別、記憶體空間?</span><span class="token keyword">let</span> a <span class="token punctuation">;</span>a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>a <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token comment">//答案1：console.log 的值為 hello</span><span class="token comment">//答案2：1個變數a；3個型別(undefined、number、string)；3個記憶體空間</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>記憶體空間畫圖來表示：<br><img src="https://i.imgur.com/HUjYFXP.jpg"></p><p>備註： let a ;的值為 “ undefined “ ，也會佔記憶體空間。<br>所以答案2應該是： 1 個變數， 3 個型別， 3 個記憶體空間</p><p>助教的回答：let a因為並沒有宣告a的值，所以a會有一個undefined 的值，並且佔了一個記憶體空間，所以這題答案應該是1個變數， 3 個型別（數字、字串、 undefined ）， 3 個記憶體空間。</p><h2 id="第-2-題"><a href="#第-2-題" class="headerlink" title="第 2 題"></a><strong>第 2 題</strong></h2><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">// 1. console.log 值為？</span><span class="token comment">// 2.出現幾個變數、型別、記憶體空間?</span><span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token number">3</span> <span class="token punctuation">;</span>b<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">let</span> c <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>b<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">;</span>c<span class="token operator">=</span>c<span class="token operator">+</span>b<span class="token punctuation">;</span><span class="token keyword">let</span> d <span class="token operator">=</span> b<span class="token operator">+</span>c<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token comment">//答案1：console.log 的值為「Uncaught ReferenceError: e is not defined」</span><span class="token comment">//答案2：3個變數；1個型別(number)；6個記憶體空間</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>記憶體空間畫圖來表示：<br><img src="https://github.com/popeye-ux/ztock/blob/master/JS-live/w1/q2-w2.jpg?raw=true"></p><h2 id="第-3-題"><a href="#第-3-題" class="headerlink" title="第 3 題"></a><strong>第 3 題</strong></h2><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">// 1. console.log 值為？</span><span class="token comment">// 2. 出現幾個變數、型別、記憶體空間?</span><span class="token keyword">let</span> e<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>e <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>e <span class="token operator">=</span> <span class="token string">"hello"</span>e <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>e <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>e<span class="token operator">+=</span><span class="token number">1</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token comment">//答案 1：console.log 的值為 4</span><span class="token comment">//答案 2： 1 個變數； 3 個型別(number、string、boolean)； 7 個記憶體空間</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>記憶體空間畫圖來表示：<br><img src="https://github.com/popeye-ux/ztock/blob/master/JS-live/w1/q3-w3%20-1.jpg?raw=true"></p><p>我們由上面的作業可以發現，不同的變數指向不同的記憶體位置，只要變數重新賦值之後，就會把新的值存到新的記憶體空間之中，舊的值就從記憶體上面清空，而運算過程中的值也會佔到記憶體的空間。</p><p>這就是JS變數與記憶體之間運作的過程。</p><p>還有一個觀念要先記一下， <strong>JS 的變數本身沒有型別，它被賦予的值才有</strong>。</p><p>理解了這些才能進一步來談 by reference (傳參考)、 by value (傳值)的差別。</p><h1 id="by-value-傳值"><a href="#by-value-傳值" class="headerlink" title="by value(傳值)"></a>by value(傳值)</h1><p><em>讓我們繼續來《射鵰英雄歪傳》，郭靖跟黃蓉小倆口結婚後，在大漠開起了寵物店，專門賣汗血寶馬和神雕，因為都是珍稀之物，所以定價都是1000兩黃金。</em></p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">// 設一個汗血寶馬(horsePrice)的變數，給它1000的值</span><span class="token keyword">let</span> horsePrice <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span><span class="token comment">//設一個神雕(eaglePrice)的變數，也給它1000的值</span><span class="token keyword">let</span> eaglePrice <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>horsePrice <span class="token operator">===</span> eaglePrice<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>我們可以觀察到，在基本型別的時候，不同的變數指向不同的記憶體位置，兩個變數賦予的值一樣，也就是記憶體儲存的值一樣，兩個變數就相等。所以我們可以歸納出，<strong>基本型別變數的比較，我們看的是它被賦予的值，值相等，兩個變數就相等。</strong></p><p><em>繼續來《射鵰英雄歪傳》，有一天楊康來寵物店想買一隻汗血馬，問郭靖多少錢？因為楊康之前買過神雕，郭靖隨口就說：「汗血馬跟神雕一樣的價格！」</em></p><p><em>楊康心想：「老子最近沒錢！」就說：「兄弟！這馬也太貴了！」郭靖說：「蓉妹說不二價，兄弟！聽某嘴大富貴！」於是楊康只好忍痛去跟大漠的高利貸歐陽克借錢買了一匹汗血馬。</em></p><p><em>結果過幾天，成吉斯汗打敗大宛國，擄獲許多汗血寶馬，造成大漠上汗血寶馬的價格大跌價，一匹馬變成300兩黃金。</em></p><p>我們就用 JavaScript 來說說這件事：</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">//設一個神雕(eaglePrice)的變數，也給它1000的值</span><span class="token keyword">let</span> eaglePrice <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span><span class="token comment">//郭靖跟楊康說：汗血馬和神雕的價格是一樣的</span><span class="token keyword">let</span> horsePrice <span class="token operator">=</span> eaglePrice<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>eaglePrice<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//1000</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>horsePrice<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//1000</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>eaglePrice <span class="token operator">===</span> horsePrice<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span><span class="token comment">//結果成吉思汗擄獲許多汗血馬，造成汗血馬價格大崩壞</span>horsePrice <span class="token operator">=</span> <span class="token number">300</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>eaglePrice<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//1000</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>horsePrice<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//300</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>horsePrice <span class="token operator">===</span> eaglePrice<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//false</span><span class="token comment">//true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>楊康哭哭！汗血馬的價格不是跟神雕一樣嗎？</p><p>讓我們用前面畫圖的練習來理解一下JavaScript發生了甚麼事！</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">//設一個神雕(eaglePrice)的變數，也給它1000的值</span><span class="token keyword">let</span> eaglePrice <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span><span class="token comment">//郭靖跟楊康說：汗血馬和神雕的價格是一樣的</span><span class="token keyword">let</span> horsePrice <span class="token operator">=</span> eaglePrice<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>eaglePrice <span class="token operator">===</span> horsePrice<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><ul><li>宣告一個eaglePrice變數，給它1000的值</li><li>宣告一個horsePrice變數，給它的值是變數eaglePrice。<br><img src="https://github.com/popeye-ux/ztock/blob/master/JS-live/w1/by%20value-1.jpg?raw=true"></li></ul><p>這時發生的事情就是，<strong>horsePrice 去拷貝了 eaglePrice 的值 1000 到自己目前占用的記憶體空間</strong>。前面有提到「<strong>基本型別變數的比較，我們看的是它被賦予的值，值相等，兩個變數就相等</strong>」。</p><p>let horsePrice &#x3D; eaglePrice;<br>這時候eaglePrice &#x3D;&#x3D;&#x3D; horsePrice的布林值為true。</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">//horsePrice重新賦值為300</span>horsePrice <span class="token operator">=</span> <span class="token number">300</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>horsePrice <span class="token operator">===</span> eaglePrice<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><p>horsePrice重新賦值為300這個行為指的是，horsePrice去佔用了新的記憶體空間儲存了新的值300，這時horsePrice &#x3D;&#x3D;&#x3D; eaglePrice的布林值就是false。</p><p><img src="https://github.com/popeye-ux/ztock/blob/master/JS-live/w1/byvalue-2.jpg?raw=true"></p><p>汗血馬的價格horsePrice與神雕的價格eaglePrice是各自獨立的，當值相等時，兩個變數才相等，汗血馬價格崩盤的時候，神雕的價格依然不受影響。</p><p>所以我們可以說「基本型別」變數之間的比較，看的是它被賦予的值相不相等，這種現象被稱為「by value(傳值)」。</p><h1 id="by-reference-傳參考"><a href="#by-reference-傳參考" class="headerlink" title="by reference (傳參考)"></a>by reference (傳參考)</h1><p>但是在「物件型別」的比較上，是另外一種情形。</p><p><em>繼續來《射鵰英雄歪傳》，郭靖的寵物店因為生意太好，所以開了分店，分店裡面汗血馬的價格跟總店是一樣的。</em></p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">//mainStore物件儲存總店汗血馬的價格</span><span class="token keyword">let</span> mainStore <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">horsePrice</span><span class="token operator">:</span> <span class="token number">1000</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">let</span> branchStore <span class="token operator">=</span> mainStore<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>mainStore<span class="token punctuation">.</span>horsePrice<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//1000</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>branchStore<span class="token punctuation">.</span>horsePrice<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//1000</span>branchStore<span class="token punctuation">.</span>horsePrice <span class="token operator">=</span> <span class="token number">300</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>mainStore<span class="token punctuation">.</span>horsePrice<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//300</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>branchStore<span class="token punctuation">.</span>horsePrice<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//300</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>mainStore <span class="token operator">===</span> branchStore<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>我們發現當分店汗血馬的價格branchStore.horsePrice被重新賦值為300時，總店的汗血馬的價格也跟著變為300。</p><p>而console.log(mainStore &#x3D;&#x3D;&#x3D; branchStore)的結果為true，我們可已發現mainStore與branchStore指向的是同一個實體。</p><p>我們來看看宣告物件型別變數時，記憶體是如何運作的。</p><p>當我們let mainStore &#x3D; {horsePrice: 1000};其實是把mainStore的參考位置指向記憶體中存放物件的位置。<br><img src="https://github.com/popeye-ux/ztock/blob/master/JS-live/w1/passByReference.jpg?raw=true"></p><p>所以當我們let branchStore &#x3D; mainStore;也是把branchStore變數參考的位置指向mainStore所參考的變數位置，所以當物件horsePrice屬性的值改變的時候，mainStore跟branchStore的值都會跟著變動。<br><img src="https://github.com/popeye-ux/ztock/blob/master/JS-live/w1/passByReference1.jpg?raw=true"></p><p>物件型別是<strong>透過「引用」的方式</strong>在傳遞資料，物件型別的物件的屬性值其實引用的是記憶體儲存資料的參考， 所以我們會說在物件型別的比較是by reference(傳參考)，看這兩個物件是否指向相同的記憶體空間，參考相同的值。</p><p>凡事都有例外，物件的例外讓人特別困惑。</p><p><em>繼續來《射鵰英雄歪傳》，郭靖寵物店生意很好，所以黃蓉也開了一家分店，有一天夫妻倆吵架，黃蓉一氣之下脫離加盟體系，開始削價競爭。</em></p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">//husbandStore物件儲存郭靖寵物店汗血馬的價格</span><span class="token keyword">let</span> husbandStore <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">horsePrice</span><span class="token operator">:</span> <span class="token number">1000</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//把husbandStore的值指定給wifeStor</span><span class="token keyword">let</span> wifeStore <span class="token operator">=</span> husbandStore<span class="token punctuation">;</span><span class="token comment">//wifeStore物件重新賦值</span>wifeStore <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">horsePrice</span><span class="token operator">:</span> <span class="token number">500</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>husbandStore<span class="token punctuation">.</span>horsePrice<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//1000</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>wifeStore<span class="token punctuation">.</span>horsePrice<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//1000</span>wifeStore<span class="token punctuation">.</span>horsePrice <span class="token operator">=</span> <span class="token number">300</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>husbandStore<span class="token punctuation">.</span>horsePrice<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//1000</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>wifeStore<span class="token punctuation">.</span>horsePrice<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//300</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>husbandStore <span class="token operator">===</span> wifeStore<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>在這種情形之下，husbandStore與wifeStore原本是引用相同的參考位置，<strong>但是wifeStore重新賦值之後，則引用新的參考位置</strong>，所以汗血馬價格變動的時候，husbandStore與wifeStore兩者不會連動，因為兩者參考的是不同的物件實體。</p><p>許國政先生認為這種物件型別的比較應該更像是「by sharing」，這有點玄！</p><p>且讓我們引用他在《0 陷阱！0 誤解！8 天重新認識JavaScript！》的一段話作為總結：</p><p>「由於JavaScript的物件類型是可變的(mutable)，當物件更新時，會影響到所有引用這個物件的變數與副本，修改時會變動到原本的參考。但當賦與新值時，卻會產生新的實體參考。」</p><p>參考資料</p><ul><li><p><a href="https://pjchender.blogspot.com/2016/03/javascriptby-referenceby-value.html">談談 JavaScript 中 by reference 和 by value 的重要觀念</a></p></li><li><p><a href="https://ithelp.ithome.com.tw/articles/10191057">重新認識 JavaScript: Day 05 JavaScript 是「傳值」或「傳址」？</a></p></li><li><p><a href="https://ithelp.ithome.com.tw/m/articles/10278982?sc=iThomeR">傳值跟傳參考概念</a></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript,JS直播班</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>var、let、const 的差異</title>
    <link href="/2021/10/09/jsLive-varLetConst/"/>
    <url>/2021/10/09/jsLive-varLetConst/</url>
    
    <content type="html"><![CDATA[<p>以下為我今年參加iT邦幫忙鐵人賽寫的文章，原文連結：</p><p><a href="https://ithelp.ithome.com.tw/articles/10259329">【Day2】變數宣告var、let、const的區別</a></p><p>但是老師教我用 var 宣告變數，但我也看到有同學用 let 與 const 宣告變數，這是怎麼一回事呢？</p><span id="more"></span><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">//建立一個變數郭靖(guoJing)</span><span class="token keyword">var</span> guoJing<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><p>也可以看到這樣：</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">//建立一個建立一個名為黃蓉(huangRong)的變數，給她'打狗棒法'的值</span><span class="token keyword">let</span> huangRongKungFu <span class="token operator">=</span> <span class="token string">'打狗棒法'</span><span class="token punctuation">;</span><span class="token comment">//建立一個洪七公(hongQigong)的常數，給他「北丐」的值</span><span class="token keyword">const</span> hongQigong <span class="token operator">=</span> <span class="token string">'北丐'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>var 、 let 、 const 這三兄弟到底有甚麼差別呢？</p><p>原來除了用var宣告變數之外，在ES6之後，變數區分為變數與常數，透過 var 與 let 宣告「變數」，透過const宣告「常數」。</p><p>var 和 let 最大的區別在於「作用域」不同，這一點我們先放在心上，之後再深入探討。</p><p><strong>在這裡補上let與var作用域的區別：</strong></p><ul><li>var 是以function為作用域。</li><li>let 則是以大括號{}區塊的程式碼為作用的範圍。</li></ul><p>作用域外層的程式捉不到作用域內的宣告的變數，但是作用域內的程式可以捉到外層的變數。</p><p>先來看看var：</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">//建立一個變數郭靖(guoJing)</span><span class="token keyword">var</span> guoJingKungFu<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>guoJingKungFu<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//未賦值，所以出現的結果為 undefined</span>guoJingKungFu <span class="token operator">=</span> <span class="token string">'降龍十八掌'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'郭靖使出 '</span> <span class="token operator">+</span> guoJingKungFu<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//結果為"郭靖使出 降龍十八掌"</span>guoJingKungFu <span class="token operator">=</span> <span class="token string">'空明拳'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'郭靖使出 '</span> <span class="token operator">+</span> guoJingKungFu<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//結果為"郭靖使出 空明拳"</span><span class="token keyword">var</span> guoJingKungFu <span class="token operator">=</span> <span class="token string">'九陰真經'</span><span class="token punctuation">;</span><span class="token comment">//再次用var宣告 guoJing = '九陰真經';</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'郭靖使出 '</span> <span class="token operator">+</span> guoJingKungFu<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//結果為"郭靖使出 九陰真經"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p><strong>使用var的時候，同一個變數名稱可以再重新「宣告」，重新賦值。</strong></p><p>再看看使用 <code>let</code> 的狀況：</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">//建立一個建立一個名為黃蓉(huangRong)的變數，給她'打狗棒法'的值</span><span class="token keyword">let</span> huangRongKungFu<span class="token punctuation">;</span>huangRongKungFu <span class="token operator">=</span> <span class="token string">'打狗棒法'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'黃蓉使出 '</span> <span class="token operator">+</span> huangRongKungFu<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//結果為"黃蓉使出 打狗棒法"</span>huangRongKungFu <span class="token operator">=</span> <span class="token string">'落英神劍掌'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'黃蓉使出 '</span> <span class="token operator">+</span> huangRongKungFu<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//結果為"黃蓉使出 落英神劍掌"</span><span class="token keyword">let</span> huangRongKungFu <span class="token operator">=</span> <span class="token string">'蘭花拂穴手'</span><span class="token punctuation">;</span><span class="token comment">//Uncaught SyntaxError: Identifier 'huangRong' has already been declared</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p><strong>使用 let 比使用 var 來宣告變數嚴謹，如果宣告時未賦值，並不會以undefined初始化，所以從宣告到初始化這段時間會無法使用，這個時間差稱為「暫時死區」。</strong></p><p><strong>let 能重複賦值，禁止於同個區塊作用域重複宣告</strong>，如果重複宣告會出現：</p><p>「Uncaught SyntaxError: Identifier ‘huangRong’ has already been declared」</p><p>提醒你已經用 let 宣告過這個變數了。</p><p>讓我們來試試 const：</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">//建立一個洪七公(hongQigong)的常數，給他「北丐」的值</span><span class="token keyword">const</span> hongQigong <span class="token operator">=</span> <span class="token string">'北丐'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'洪七公是 '</span> <span class="token operator">+</span> hongQigong<span class="token punctuation">)</span><span class="token punctuation">;</span>hongQigong <span class="token operator">=</span> <span class="token string">'美食家'</span><span class="token punctuation">;</span><span class="token comment">//Uncaught TypeError: Assignment to constant variable.</span><span class="token keyword">const</span> hongQigong <span class="token operator">=</span> <span class="token string">'美食家'</span><span class="token punctuation">;</span><span class="token comment">//Uncaught SyntaxError: Identifier 'hongQigong' has already been declared</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p><strong>const 是用來宣告常數，也就是不會變動的常量，所以禁止於同個區塊作用域重複宣告，也不能重新賦值。而且宣告時一定要給值。</strong></p><p>重複宣告會告訴你：</p><p>「Uncaught SyntaxError: Identifier ‘hongQigong’ has already been declared」</p><p>重複賦值則會提醒你：</p><p>「Uncaught TypeError: Assignment to constant(持續的) variable.」</p><p>因為以上這些區別，使用 var 、 let 、 const 來宣告變數的時機與場景有不同的區別，語意上也有明確區分。而沒有經過 var 、 let 與 const 宣告就直接賦值使用的變數會變成全域變數。</p><p>const 有一個例外，就是在宣告物件時，因為物件是 call by reference ，變數參考的是物件存放的位置，當修改物件屬性的時候，不會改變物件參考的記憶體位置，<strong>所以用 const 宣告物件時，其屬性是可以修改的，但是重新賦值則是禁止的。</strong></p><h3 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h3><ul><li><a href="https://totoroliu.medium.com/javascript-var-let-const-%E5%B7%AE%E7%95%B0-e3d930521230">JavaScript: var, let, const 差異</a></li><li><a href="https://askie.today/differences-among-var-let-const/">在 JavaScript 中，Var、Let、Const 的差異？</a></li><li><a href="https://ithelp.ithome.com.tw/articles/10199513">搞懂變數作用域(2)- let 與const</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript,JS直播班</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Day35:最終章：Todo List實作</title>
    <link href="/2021/10/05/21-day35-toDoList/"/>
    <url>/2021/10/05/21-day35-toDoList/</url>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/dRSJcBR.jpg"><br>前面提到了物件、陣列、DOM元素的選取、事件監聽，以及最後的localStorage。這些足夠我們用JavaScript做一個小小的網頁程式，來驗證一下之前提到的方法。</p><span id="more"></span><p>這次我們要來做的是Todo List。</p><p>假設金庸先生要邀請武林高手來參加華山論劍，要邀請的人太多了，他記性不好，所以寫了一個小程式來記錄與會者名單。大概是長這個樣子。</p><p><img src="https://i.imgur.com/LEoElce.png"></p><p>然後在來拆解畫面上的功能：</p><p><img src="https://i.imgur.com/PyvGzVc.png"></p><p>我們可已先把上面的的那張圖區分為三種程式區塊：</p><p><img src="https://i.imgur.com/Uycm0YY.png"></p><ul><li>事件：<ul><li>加入邀請名單：點擊，使用者輸入的資料加入「邀請名單」的localStorage，並渲染到畫面</li><li>寄出：將資料從「邀請名單」的localStorage中移除，加入已寄出名單的localStorage，並渲染到畫面</li><li>移除：將資料由「已寄出名單」的localStorage中移除，並渲染到畫面</li></ul></li><li>資料：<ul><li>邀請名單的localStorage資料</li><li>寄出名單的localStorage資料</li></ul></li><li>畫面：將localStorage的資料渲染到網頁</li></ul><p>所以我們就可以開始實作了！</p><p>畫面上的HTML碼如下：</p><figure><div class="code-wrapper"><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>logo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://imgur.com/uEvCO7p.png<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>150px<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>logotext<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>TODO LIST<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>addList<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>30<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>請輸入與會者姓名<span class="token punctuation">"</span></span> <span class="token attr-name">required</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>send<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>新增邀請名單<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>計畫邀請<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>noneNum<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>人<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>finishedItem<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>已邀請<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>doneNum<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>人<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>finishlist<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>進入JavaScript的部分，先把DOM元素選取起來：</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">//指定DOM</span><span class="token keyword">let</span> send <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.send'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> list <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.list'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> finishList <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'finishlist'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>接下來定義資料的部分：</p><ul><li>計畫邀請的名單，要把它變成陣列物件的格式</li><li>已經寄出邀請函的名單，也要轉成陣列物件的格式</li></ul><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">//資料：設定計畫邀請名單「listData」的localStorage資料，轉為陣列物件</span><span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">'listData'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//資料：設定寄出名單「listFinish」的localStorage資料，轉為陣列物件</span><span class="token keyword">let</span> finishData <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">'listFinish'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>接下來把事件綁訂到前面指定的DOM元素上。然後更新資料，此時尚未輸入資料，localStorage的key應該還沒建立，所以為空陣列。</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">//事件綁定，監聽與更新</span>send<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> addData<span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> toggleDone<span class="token punctuation">)</span><span class="token punctuation">;</span>finishList<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> deleDone<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新畫面上的資料</span><span class="token function">updateList</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">updateFinish</span><span class="token punctuation">(</span>finishData<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>按下「新增邀請名單後」把資料新增到data中，並叫用updateList這個函式，把資料組字串，渲染到畫面中。</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">//按下「新增邀請名單後」，把資料新增到data中，並叫用updateList</span><span class="token keyword">function</span> <span class="token function">addData</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> txt <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.text'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>txt<span class="token punctuation">.</span>value <span class="token operator">==</span> <span class="token string">""</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'必須輸入與會者姓名'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">var</span> toInvite <span class="token operator">=</span>    <span class="token punctuation">&#123;</span>        <span class="token literal-property property">content</span><span class="token operator">:</span> txt<span class="token punctuation">.</span>value    <span class="token punctuation">&#125;</span>    data<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>toInvite<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">updateList</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">'listData'</span><span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    txt<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//更新邀請清單</span><span class="token keyword">function</span> <span class="token function">updateList</span><span class="token punctuation">(</span><span class="token parameter">items</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    str <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> len <span class="token operator">=</span> items<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token comment">//for迴圈組字串   </span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> len <span class="token operator">></span> i<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>items<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        str <span class="token operator">+=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;li>&lt;a href="#" data-index=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>i<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">>移到已邀請&lt;/a>&lt;span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>items<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>content<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&lt;/span>&lt;/li></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    list<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> str<span class="token punctuation">;</span>    <span class="token keyword">let</span> noneNum <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.noneNum'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    noneNum<span class="token punctuation">.</span>textContent <span class="token operator">=</span> len<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>按下「移到已邀請」時，執行以下程式區塊：</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">//將與會者由邀請清單移至邀請函已寄出清單</span><span class="token keyword">function</span> <span class="token function">toggleDone</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//避免事件冒泡</span>    e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//如果點選的不是a標籤，那就不往下執行</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>nodeName <span class="token operator">!==</span> <span class="token string">'A'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">let</span> index <span class="token operator">=</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>dataset<span class="token punctuation">.</span>index<span class="token punctuation">;</span><span class="token comment">//把點選的資料推送到finishData中</span>    finishData<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//清除計畫邀請data中的資料</span>    data<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新計畫邀請的名單</span>    localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">'listData'</span><span class="token punctuation">,</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//渲染網頁</span>    <span class="token function">updateList</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新已寄出邀請函的名單</span>    localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">'listFinish'</span><span class="token punctuation">,</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>finishData<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//渲染網頁</span>    <span class="token function">updateFinish</span><span class="token punctuation">(</span>finishData<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>然後是渲染「已邀請名單」的部分：</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">//更新已寄邀請函清單</span><span class="token keyword">function</span> <span class="token function">updateFinish</span><span class="token punctuation">(</span><span class="token parameter">finishItems</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> mailStr <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> len <span class="token operator">=</span> finishItems<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>finishItems<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//for迴圈組字串 </span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>finishItems<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mailStr<span class="token operator">+=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;li>&lt;a href="#" data-num=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>i<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">>移除&lt;/a>&lt;span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>finishItems<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>content<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&lt;/span>&lt;/li></span><span class="token template-punctuation string">`</span></span>    <span class="token punctuation">&#125;</span>    finishList<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> mailStr<span class="token punctuation">;</span>    <span class="token keyword">var</span> doneNum <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.doneNum'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    doneNum<span class="token punctuation">.</span>textContent <span class="token operator">=</span> len<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>如果點選「刪除」，執行以下程式：</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">//刪除已邀請的貴賓</span><span class="token keyword">function</span> <span class="token function">deleDone</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>nodeName <span class="token operator">!==</span> <span class="token string">'A'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">let</span> num <span class="token operator">=</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>num<span class="token punctuation">;</span><span class="token comment">//清除計畫邀請data中的資料</span>    finishData<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新已寄出邀請函的名單</span>    localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">'listFinish'</span><span class="token punctuation">,</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>finishData<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//渲染到網頁</span>    <span class="token function">updateFinish</span><span class="token punctuation">(</span>finishData<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>來看看我的實作吧！</p><p><a href="https://codepen.io/popeye_ux/pen/KKqbMwq/">https://codepen.io/popeye_ux&#x2F;pen&#x2F;KKqbMwq</a></p>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript, 2021iT邦鐵人賽</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Day34:好記性的瀏覽器：Localstorage</title>
    <link href="/2021/10/03/21-day34-localstorage/"/>
    <url>/2021/10/03/21-day34-localstorage/</url>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/XTZaPTS.jpg"><br>談這個主題之前，我們先來回憶一下日常的場景，你來到桃子購物網站，選了你要的商品往下捲動網頁，結果竟然發現網頁下方秀出你上次來買東西時，看的那幾樣商品，你心中覺得這個網站真貼心，好聰明。</p><span id="more"></span><p>然而，真正貼心、聰明的是你的瀏覽器。這項技術叫做Web Storage，是HTML5之後出來的新技術，網頁可以透過JavaScript把你瀏覽的資料寫入瀏覽器裡儲存，可以儲存的資料容量有5mb大小。</p><p>Web Storage有兩種：</p><ul><li>localStorage：如果沒有清除瀏覽器的話，資料將永久存在瀏覽器中，使用者關掉瀏覽器或分頁，資料仍會存在瀏覽器中，跨瀏覽器分頁也可以使用。</li><li>sessionStorage：使用者關掉瀏覽器或分頁，資料就會被清空。</li></ul><p>如何看到localStorage的資料呢？</p><p>在Chrome瀏覽器按下F12，瀏覽器會分割稱瀏覽畫面跟Dev Tool，在Dev Tool那一邊點開Application分頁，就可以看到localStorage儲存的資料。</p><p><img src="https://i.imgur.com/sT7SlTj.png"></p><p>我們可以觀察到它是以Key - Value pair的方式儲存的，而且是以自存的格式儲存的。</p><p>那要如何存入資料呢？我們可以使用setItem()方法：</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx">localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span>sessionStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><p>取出資料則是使用getItem()：</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx">localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>sessionStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><p>讓我們來砍看如何實作：</p><figure><div class="code-wrapper"><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>報名參加華山論劍<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nameClass<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btnApply<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>報名<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btnCheck<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>檢查報名狀況<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">var</span> apply<span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.btnApply'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> check<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.btnCheck'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">applyTalk</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> str<span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.nameClass'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>  localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">'applyName'</span><span class="token punctuation">,</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>apply<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span>applyTalk<span class="token punctuation">)</span><span class="token punctuation">;</span>check<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> str <span class="token operator">=</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">'applyName'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>str<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">，你已經報名成功！！！</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p><img src="https://i.imgur.com/klUshTt.png"></p><p>前面有提到localStorage只接受字串(String)的資料，如果存存的資料不是字串，而是陣列或是物件，就會發生問題。</p><p>如何解決這個問題呢？</p><ul><li>再用setItem()儲存資料到localStorage裡面的時候，要先用JSON.stringify()轉為字串。</li><li>而用getItem()從localStorage取出資料時，要用JSON.parse()方法傳換為本來的資料格式。</li></ul><p>讓我們來看一下怎麼做：</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">var</span> island <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span>        <span class="token literal-property property">islandName</span><span class="token operator">:</span> <span class="token string">'桃花島'</span><span class="token punctuation">,</span>        <span class="token literal-property property">owner</span><span class="token operator">:</span> <span class="token string">'黃藥師'</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> islandStr <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>island<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>islandStr<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//[&#123;"islandName":"桃花島","owner":"黃藥師"&#125;]</span>localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">'islandItem'</span><span class="token punctuation">,</span>islandStr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> getData <span class="token operator">=</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">'islandItem'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> getData<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//string</span><span class="token keyword">var</span> getDataAry <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>getData<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//轉換為陣列</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>getDataAry<span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p><img src="https://i.imgur.com/kQPupvC.png"></p><p>這就是localStorage的基本用法。</p>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript, 2021iT邦鐵人賽</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Day33-「this」好奇怪！</title>
    <link href="/2021/10/02/21-day33-thisStrange/"/>
    <url>/2021/10/02/21-day33-thisStrange/</url>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/GgnG2jd.jpg"><br>聽前輩說，「this」在JavaScript裡面是一個大坑。</p><span id="more"></span><p>前面有提過「this」在事件監聽中，不考慮事件冒泡的情況下，this就等同是e.target，但是如果是被事件冒泡觸發的this則為e.currentTarget。</p><p>現在來談談「this」在其他地方要注意的事情。</p><p>首先要記住這句話，只要理解這個原則，大部分遇到「this」的狀況都可以輕鬆掌握：</p><p><strong>「this代表的是function執行時所屬的物件，而不是function本身」</strong></p><p>「this」是在函式被呼叫的時候被自動生成的內部物件，this不等於function，隨著呼叫函示的物件不同，「this」所指向的值也不同。</p><p>沒有特別指定this的情況下，<strong>this預設綁定(Default Binding)「全域物件」，也就是window</strong>。</p><p>但在ES5的嚴格模式下，禁止this自動指定為全域物件，這點要特別注意。</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">var</span> seven <span class="token operator">=</span> <span class="token string">"江南七怪"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>seven<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//"江南七怪"</span><span class="token keyword">function</span> <span class="token function">monster</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>seven <span class="token operator">+</span> <span class="token string">"脾氣古怪"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token function">monster</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//"江南七怪脾氣古怪"</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">seven</span> <span class="token operator">:</span> <span class="token string">"七喜汽水"</span><span class="token punctuation">,</span>  <span class="token literal-property property">func</span><span class="token operator">:</span> monster<span class="token punctuation">&#125;</span> obj<span class="token punctuation">.</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//"七喜汽水脾氣古怪"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>所以在全域環境中直接呼叫monster()函式時，this.seven是指向全域變數的var seven &#x3D; “江南七怪”；當monster()作為obj物件func屬性的方法的時候，this.seven會指向obj物件的seven屬性”七喜汽水”。</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">var</span> seven <span class="token operator">=</span> <span class="token string">"江南七怪"</span><span class="token punctuation">;</span><span class="token keyword">var</span> <span class="token function-variable function">call</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>seven<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> <span class="token function-variable function">soda</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">let</span> seven <span class="token operator">=</span> <span class="token string">"七喜汽水"</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">soda</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//"江南七怪"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>soda()透過this.call()來叫用call()，這時call()裡面的this.seven是指向全域變數的seven，所以得到的結果是”江南七怪”。</p><h2 id="如何強制指定this"><a href="#如何強制指定this" class="headerlink" title="如何強制指定this"></a>如何強制指定this</h2><p>在JavaScript有三種方式可以強制指定this給function，這種方式也叫「顯式綁定」，分別是：</p><ul><li>.call()</li><li>.apply()</li><li>.bind()</li></ul><p>先來說說.call與.apply</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">funcA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//做某件大事</span><span class="token punctuation">&#125;</span><span class="token function">funcA</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> arg1<span class="token punctuation">,</span> arg2<span class="token operator">...</span><span class="token punctuation">)</span><span class="token function">funcA</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span><span class="token punctuation">[</span>arg1<span class="token punctuation">,</span>arg2<span class="token operator">...</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>上面的程式碼式使用.call與.apply去呼叫執行funcA，第一個參數context為所帶入的物件，也就是強制用那個物件來當成function執行時的物件。</p><p>.call與.apply作用一樣，差別在.apply第一個參數(帶入的物件)之後的參數以陣列方式傳入，而.call則是使用逗號隔開。</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">let</span> kuo <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"郭靖"</span><span class="token punctuation">,</span><span class="token literal-property property">wife</span><span class="token operator">:</span> <span class="token string">"黃蓉"</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> yung <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"楊過"</span><span class="token punctuation">,</span><span class="token literal-property property">wife</span><span class="token operator">:</span> <span class="token string">"小龍女"</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">funcA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">的老婆是</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>wife<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token function">funcA</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>kuo<span class="token punctuation">)</span> <span class="token comment">//郭靖的老婆是黃蓉</span><span class="token function">funcA</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>yung<span class="token punctuation">)</span> <span class="token comment">//楊過的老婆是小龍女</span><span class="token function">funcA</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token string">"周伯通"</span><span class="token punctuation">,</span><span class="token string">"瑛姑"</span><span class="token punctuation">)</span><span class="token comment">//的老婆是undefined </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>我們可以看見this.name與this.wife綁定到帶入的物件上。而this隨著所帶入的物件不同，指向也會動態地改變。</p><p>而bind的用法如下：</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">let</span> kuo <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"郭靖"</span><span class="token punctuation">,</span><span class="token literal-property property">wife</span><span class="token operator">:</span> <span class="token string">"黃蓉"</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> yung <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"楊過"</span><span class="token punctuation">,</span><span class="token literal-property property">wife</span><span class="token operator">:</span> <span class="token string">"小龍女"</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">funcA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">的老婆是</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>wife<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> kuoWife <span class="token operator">=</span> <span class="token function">funcA</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>kuo<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">kuoWife</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">//郭靖的老婆是黃蓉</span><span class="token keyword">let</span> yungWife <span class="token operator">=</span> <span class="token function">funcA</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>yung<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">yungWife</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//楊過的老婆是小龍女</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>藉由‵let kuoWife &#x3D; funcA.bind(kuo) ‵也可以把this指向所帶入的物件。</p><p>其實以上的應用，萬變不離其宗，只要記得：<strong>「this代表的是function執行時所屬的物件，而不是function本身」</strong></p>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript, 2021iT邦鐵人賽</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Day32:暗通款曲的閉包</title>
    <link href="/2021/10/01/21-day32-clouse/"/>
    <url>/2021/10/01/21-day32-clouse/</url>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/DGYvftt.jpg"></p><p>在「閉包」這一關，我一直有一種似懂非懂，玄之又玄的感覺。</p><span id="more"></span><p>MDN上對「閉包」的定義：</p><p><strong>「閉包為函式的組合、還有該宣告函式的作用域環境。這個環境包含閉包建立時，所有位於該作用域的區域變數。」</strong></p><p>每個字都看得懂，但是合起來是甚麼意思？</p><p>唉！我們重新來看一下函式的寫法：</p><p>小龍女在絕情谷底養的玉峰，飛到周伯通住的百花谷，要如何分辨一班的蜜蜂與小龍女養的玉峰呢？當然是看看翅膀上有沒有寫：「我在絕情谷底」，有寫的就是玉蜂。</p><p>這是一般函式的寫法：</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">var</span> bee<span class="token operator">=</span><span class="token string">"蜜蜂"</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">flyOut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> bee <span class="token operator">=</span> <span class="token string">"玉蜂"</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>bee<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">翅膀上有寫「我在絕情谷底」</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token function">flyOut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//"玉蜂翅膀上有寫「我在絕情谷底」"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>如果我們在flyout()再內嵌一個inner函式，這時直接呼叫flyout()，出來的結果會是undefined。</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">var</span> bee<span class="token operator">=</span><span class="token string">"蜜蜂"</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">flyOut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> bee <span class="token operator">=</span> <span class="token string">"玉蜂"</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>bee<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">翅膀上有寫「我在絕情谷底」</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token function">flyOut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//undefined 沒有回傳值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>但是如果我們再flyout那一層，加上「return inner();」，會回傳「”玉蜂翅膀上有寫「我在絕情谷底」”」。</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">var</span> bee<span class="token operator">=</span><span class="token string">"蜜蜂"</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">flyOut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> bee <span class="token operator">=</span> <span class="token string">"玉蜂"</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>bee<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">翅膀上有寫「我在絕情谷底」</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token function">inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">flyOut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//"玉蜂翅膀上有寫「我在絕情谷底」"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>再來把return inside()的小括號拿掉。</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">var</span> bee<span class="token operator">=</span><span class="token string">"蜜蜂"</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">flyOut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> bee <span class="token operator">=</span> <span class="token string">"玉蜂"</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>bee<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">翅膀上有寫「我在絕情谷底」</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> inner<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">flyOut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//ƒ inner()&#123;</span>    <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>bee<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">翅膀上有寫「我在絕情谷底」</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>結果回傳的是inside()的程式碼：</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx">ƒ <span class="token function">inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>bee<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">翅膀上有寫「我在絕情谷底」</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>再更進一步，在外層用變數outBee來存取flyOut()：</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">var</span> bee<span class="token operator">=</span><span class="token string">"蜜蜂"</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">flyOut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> bee <span class="token operator">=</span> <span class="token string">"玉蜂"</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>bee<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">翅膀上有寫「我在絕情谷底」</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> inner<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> outBee <span class="token operator">=</span> <span class="token function">flyOut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">flyBee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//"玉蜂翅膀上有寫「我在絕情谷底」"</span><span class="token keyword">var</span> honeyBee <span class="token operator">=</span> <span class="token function">flyout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//"玉蜂翅膀上有寫「我在絕情谷底」"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>還記得「切分變數最小的範圍是function」這句話嗎？</p><p>inner()被內嵌在flyOut()之內，所以inner()裡的變數能夠存取的範圍就是flyOut()跟全域的範圍，它在flyOut()裡面找到了bee &#x3D; “玉蜂”，就不會再往外層去找。這種訪問機制就是「作用域鍊(Scope chain)」</p><p>JavaScript 引擎的回收機制會釋放不再使用的記憶體，清空不再使用的變數，但閉包為了保留函式記得和存取其執行環境的能力，就會予以保留，不做記憶體回收。所以當程式執行完var outBee &#x3D; flyOut();這一行，原本應該被記憶體釋放掉的flyOut()裡面的變數bee變成了「自由變數」，還是可以拿來運算。</p><p>這種可以適用自由變數的函式，就是「閉包」。</p><p>雖然 outBee 位於 flyOut()函式所定義的範疇之外，但由於閉包的緣故， 所以能正常執行inner()函式，並存取到 bee 的值，進而執行出”玉蜂翅膀上有寫「我在絕情谷底」”的結果。</p><p>所以在flyout()的函示內部回傳inner函式的同時，除了傳回程式碼之外，也回傳了內部函式建立時的變數值bee&#x3D;”玉蜂”，連同執行環境一起被回傳了。</p><p>嗯！這樣在絕情谷外的楊過就可以依據蜜蜂身上的資訊找到小龍女了！XD</p><p>這就是一種「閉包」的資料結構，包含函式及函式被建立時的當下環境。</p><p>許國政先生在《0 陷阱！0 誤解！8 天重新認識 JavaScript！》一書中：</p><p>「當你在呼叫函式的以前，範圍鍊就已經被建立了。因此我們可以在函式(outer)裡面「回傳」另一個內部函式(inner)給外層的範圍，使得外層也可以透過『範圍鍊』取得內部的變數(msg)。」</p><p>這句話直白易懂，是大神才寫得出來的！</p><p>所以我們可以透過「閉包」的方式，呼叫「函式」內的「函式」，我們可以把變數封裝在函式中，避免變數汙染全域環境，而且可以重複存取叫用函式及其內部環境。許多框架也是透過這種方式運作的。</p>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript, 2021iT邦鐵人賽</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Day31:IIFE立即執行函式</title>
    <link href="/2021/10/01/21-day31-IIFE/"/>
    <url>/2021/10/01/21-day31-IIFE/</url>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/RzLyjIO.jpg"><br>IIFE（Immediately Invoked Function Expression），是一種「可以立即執行的函式」。</p><span id="more"></span><p>一般的函式長這樣：</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">doSomething</span> <span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//do something</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">doSomething</span><span class="token punctuation">(</span>參數<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//呼叫doSomething，執行程式區塊</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>而立即執行函式長成這個樣子：</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">doSomething</span> <span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//do something</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span>參數<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//不用呼叫doSomething函式，X帶入參數，立即在程式區塊中執行</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><p>立即執行函式，不透過呼叫函式的方式，瀏覽器讀到函式後面附加的小括號( )，就知道要在函式宣告的當下立即執行。</p><p>假設洪七公嘴饞想吃叫化雞，叫黃蓉馬上烤一隻叫化雞來吃：</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">cooking</span><span class="token punctuation">(</span><span class="token parameter">food</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">丫頭去弄個</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>food<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">來吃吃！！！</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'叫化雞'</span><span class="token punctuation">)</span>  <span class="token comment">//丫頭去弄個叫化雞來吃吃！！！</span><span class="token function">cooking</span><span class="token punctuation">(</span><span class="token string">'東坡肉'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//Uncaught ReferenceError: cooking is not defined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>如果在立即執行函式的外面再呼叫一次cooking函式，就會出現「Uncaught ReferenceError: cooking is not defined」。</p><p>既然提到了立即執行函式，讓我們利用它來解一下面試中常常會出現的考題：</p><p>「每次間隔一秒，依次印出0、1、2、3、4」</p><p>你會怎麼解呢？直覺應該利用for迴圈 + window.setTimeout()來解題：</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>window<span class="token punctuation">.</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>圖</p><p>結果是直接印出五個5，說好的0、1、2、3、4呢？</p><p>還記得前面提過「切分辨數最小範圍是function」，所以for迴圈和window.setTimeout()是個跑各的。</p><p>for迴圈是急驚風，而window.setTimeout()是慢郎中，window.setTimeout()剛剛過了一秒去捉外面的i來console.log()的時候，for迴圈已經跑完五次，i++變成5，不符合i&lt;5的條件跳出迴圈了，所以window.setTimeout()捉迴圈的i，每次都捉到5。</p><p>那要怎麼解決這個問題呢? 我們可以把window.setTimeout()封裝在一個立即執行函式裡面，後面的小括號則帶入迴圈每次跑出來的 i，讓 i 把值帶入 x 裡面丟到 window.setTimeout() 去執行。</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>window<span class="token punctuation">.</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>x<span class="token operator">*</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>這樣就會每隔1秒依序印出0、1、2、3、4了。</p><p>當然另外一個更簡單的解法則是把for迴圈的變數宣告「var i &#x3D; 0」直接改成「let i &#x3D; 0」，利用let是以大括號區塊為作用域的概念，讓for迴圈必須與window.setTimeout()一起跑。</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>window<span class="token punctuation">.</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>這樣就會間格1秒，依序印出0、1、2、3、4了。</p>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript, 2021iT邦鐵人賽</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Day30:回頭呼喊你的愛情：Callback回呼函式</title>
    <link href="/2021/09/30/21-day30-callBack/"/>
    <url>/2021/09/30/21-day30-callBack/</url>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/RkJf5NJ.jpg"></p><p>甚麼是「Callback function」?</p><span id="more"></span><p>MDN的解釋如下：</p><p>「回呼函式（callback function）是指能藉由參數（argument）通往另一個函式的函式。它會在外部函式內調用、以完成某些事情。」</p><p>我改寫一下MDN上的範例：</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">aFunc</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'Hello '</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">bFunc</span><span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">'報名華山論劍大會，請輸入你的名字：'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">callback</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">bFunc</span><span class="token punctuation">(</span>aFunc<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>最後呼叫函式 bFunc (aFunc)，aFunc是bFunc的callback參數，bFunc的變數name又藉由callback傳入bFunc之中。所以我們可以理解「把A函式當成B函式的參數，透過B函式來呼叫它」，A函式就是一個Callback function。</p><p>解釋有點抽象嗎？讓我們換個場景，想想之前提過的「事件監聽」。</p><p>例如：看到紅燈，然後踩剎車！踩剎車這個動作，在「看到紅燈」這個條件滿足的時候才執行。所以我們會監聽「看到紅燈」這個事件，一旦事件觸發，就去呼叫「剎車」這個動作(函式)。這也是把「剎車」這個函式當成事件監聽的參數。</p><p>還有一個常常會用到的window.setTimeout()也是callback function的經典案例：</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx">window<span class="token punctuation">.</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//do something&#125;,1000);</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>所以我們可以歸納出：</p><ul><li>「<strong>把A函式當成B函式的參數，透過B函式來呼叫它</strong>」，A函式就是一個Callback function。</li><li>滿足某個條件才去執行的函式，就可以稱為Callback function。</li></ul><p>那在甚麼時候適合使用callback function呢？我想是在「控制函式執行的時機」的情境下適合使用：</p><ul><li>滿足條件，才去執行的函式。</li><li>控制函式執行的先後順序。</li></ul><p>假設郭靖跟歐陽克都中了毒：</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">let</span> <span class="token function-variable function">poisonA</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'歐陽克中毒身亡！'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">let</span> <span class="token function-variable function">poisonB</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'郭靖中毒身亡！'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">poisonA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">poisonB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>這樣的執行順序當然是先跳(‘歐陽克中毒身亡！’)的視窗，再跳(‘郭靖中毒身亡！’)。但是如果加上一個隨機生成的等待時間，那視窗的彈跳順序就不一定了。</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">let</span> <span class="token function-variable function">poisonA</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">var</span> i <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>window<span class="token punctuation">.</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'歐陽克中毒身亡！'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> i <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">let</span> <span class="token function-variable function">poisonB</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">var</span> i <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>window<span class="token punctuation">.</span><span class="token function">setTimeout</span><span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'郭靖中毒身亡！'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> i <span class="token operator">*</span> <span class="token number">1000</span> <span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token function">poisonA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">poisonB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>有時是(‘郭靖中毒身亡！’)會先跳出來，有時是(‘歐陽克中毒身亡！’)會先跳出來！</p><p>如果我們想確保(‘歐陽克中毒身亡！’)比(‘郭靖中毒身亡！’)早跳出來，可以這樣寫：</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">const</span> <span class="token function-variable function">poisonA</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">const</span> i <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>window<span class="token punctuation">.</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'歐陽克中毒身亡！'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> callback <span class="token operator">===</span> <span class="token string">'function'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> i <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token function-variable function">poisonB</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">const</span> i <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>window<span class="token punctuation">.</span><span class="token function">setTimeout</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'郭靖中毒身亡！'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> i<span class="token operator">*</span> <span class="token number">1000</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">poisonA</span><span class="token punctuation">(</span> poisonB <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>這樣歐陽克就會比郭靖還要早毒發身亡了！</p><p>但是如果中毒的人越來越多，一個函式呼叫另一個函式，一層一層包下去，就變成「回呼地獄」了。</p><p>再假設另外一個情境：</p><p>「王重陽參加華山論劍，只要打敗黃藥師、洪七公、段皇爺與歐陽鋒，就會奪得『武功第一』的封號。但是不用去管王重陽與人決鬥的先後順序，只要與每個人都打過就可以。」</p><p>這時候我們可以這樣做：</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">let</span> fightProcess <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//設一個空陣列，王重陽每次比武，都push到陣列中</span><span class="token keyword">let</span> step <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>  <span class="token comment">//王重陽與4個人比武</span><span class="token keyword">function</span> <span class="token function">fightA</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  window<span class="token punctuation">.</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    fightProcess<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'王重陽打敗黃藥師'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'王重陽打敗黃藥師'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>fightProcess<span class="token punctuation">.</span>length <span class="token operator">===</span> step<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token comment">//比較空陣列fightProcess的長度是否與step相等，如果相等，就執行ightWinner()</span>      <span class="token function">fightWinner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">fightB</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  window<span class="token punctuation">.</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    fightProcess<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'王重陽打敗洪七公'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'王重陽打敗洪七公'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>fightProcess<span class="token punctuation">.</span>length <span class="token operator">===</span> step<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token function">fightWinner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">fightC</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  window<span class="token punctuation">.</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    fightProcess<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'王重陽打敗段皇爺'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'王重陽打敗段皇爺'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>fightProcess<span class="token punctuation">.</span>length <span class="token operator">===</span> step<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token function">fightWinner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">fightD</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  window<span class="token punctuation">.</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    fightProcess<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'王重陽打敗歐陽鋒'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'王重陽打敗歐陽鋒'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>fightProcess<span class="token punctuation">.</span>length <span class="token operator">===</span> step<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token function">fightWinner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">fightWinner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'王重陽天下武功第一，人稱「中神通」'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fightProcess<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">fightA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fightB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fightC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fightD</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="Promise物件"><a href="#Promise物件" class="headerlink" title="Promise物件"></a>Promise物件</h3><p>Promise物件是ES6之後新增的物件，照字面的解釋就是「承諾」，回傳的結果只有兩種：「解決」與「拒絕」。</p><p>Promise物件長成這個樣子：</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">let</span> myPromise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span><span class="token punctuation">&#123;</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'解決'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'拒絕'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>要在一個函式中使用Promise功能，只要讓它回傳一個Promise物件就行了：</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">urPromise</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token comment">//resolve()或reject()</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>Promise還提供了三種方法：</p><ul><li>.then()：依順序串聯執行多個promise功能。</li><li>Promise.all()：直到全部函式都回覆resolve，或其中一個reject，才繼續後面功能</li><li>Promise.race()：只要其中一個函式resolve，不等待其他含式執行，直接行後續動作，</li></ul><p>像剛剛那個「王重陽與四大高手比武」的過程就可以這樣寫：</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">fightA</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    window<span class="token punctuation">.</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'王重陽打敗黃藥師'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'王重陽打敗黃藥師'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">fightB</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span> <span class="token operator">=></span><span class="token punctuation">&#123;</span>    window<span class="token punctuation">.</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span><span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'王重陽打敗洪七公'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'王重陽打敗洪七公'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">fightC</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span> <span class="token operator">=></span><span class="token punctuation">&#123;</span>    window<span class="token punctuation">.</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span><span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'王重陽打敗段皇爺'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'王重陽打敗段皇爺'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">fightD</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span> <span class="token operator">=></span><span class="token punctuation">&#123;</span>    window<span class="token punctuation">.</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span><span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'王重陽打敗歐陽鋒'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'王重陽打敗歐陽鋒'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">fightWinner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'王重陽天下武功第一，人稱「中神通」'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token comment">//加上.then可以做到依次執行</span><span class="token function">fightA</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>fightB<span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>fightC<span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>fightD<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>fightWinner<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>我們在呼叫fightA()之後，用.then串接後面要執行的函式，這樣我們就可以做到<strong>依順序執行</strong>了。</p><p>來看看promise.all的情況：</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">fightA</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    window<span class="token punctuation">.</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'王重陽打敗黃藥師'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'王重陽打敗黃藥師'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">fightB</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span> <span class="token operator">=></span><span class="token punctuation">&#123;</span>    window<span class="token punctuation">.</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span><span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'王重陽打敗洪七公'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'王重陽打敗洪七公'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">fightC</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span> <span class="token operator">=></span><span class="token punctuation">&#123;</span>    window<span class="token punctuation">.</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span><span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'王重陽打敗段皇爺'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'王重陽打敗段皇爺'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">fightD</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span> <span class="token operator">=></span><span class="token punctuation">&#123;</span>    window<span class="token punctuation">.</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span><span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'王重陽打敗歐陽鋒'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'王重陽打敗歐陽鋒'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">fightWinner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'王重陽天下武功第一，人稱「中神通」'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token comment">//不管fightA(),fightB(),fightC(),fightD()的執行順序，只要都執行了就繼續後面的程式</span>Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token function">fightA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">fightB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">fightC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">fightD</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>fightWinner<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>Promise.all()則會等待全部的Promise函式都執行了，才會進行後面的.then函式。</p><p>然後是promise.race：</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">fightA</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    window<span class="token punctuation">.</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'王重陽打敗黃藥師'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'王重陽打敗黃藥師'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">fightB</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span> <span class="token operator">=></span><span class="token punctuation">&#123;</span>    window<span class="token punctuation">.</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span><span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'王重陽打敗洪七公'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'王重陽打敗洪七公'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">fightC</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span> <span class="token operator">=></span><span class="token punctuation">&#123;</span>    window<span class="token punctuation">.</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span><span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'王重陽打敗段皇爺'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'王重陽打敗段皇爺'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">fightD</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span> <span class="token operator">=></span><span class="token punctuation">&#123;</span>    window<span class="token punctuation">.</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span><span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'王重陽打敗歐陽鋒'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'王重陽打敗歐陽鋒'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">fightWinner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'王重陽天下武功第一，人稱「中神通」'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token comment">//只要fightA(),fightB(),fightC(),fightD()其中之一執行，就繼續執行後面的程式</span><span class="token comment">//但是fightA(),fightB(),fightC(),fightD()都會執行，不會取消</span>Promise<span class="token punctuation">.</span><span class="token function">race</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token function">fightA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">fightB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">fightC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">fightD</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>fightWinner<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>Promise.race就如同「競賽」一樣，只要有其中一個Promise函式先做到，不待其它的Promise函式完成，就直接進行.then後面的程式。但是其他的Promise函式還是會繼續執行，不會取消。</p>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript, 2021iT邦鐵人賽</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Day29:事件監聽的 this :「這個」到底是哪一個?-this</title>
    <link href="/2021/09/29/21-day29-this/"/>
    <url>/2021/09/29/21-day29-this/</url>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/aLcxg23.jpg"><br>歐陽克是誰殺的?</p><p>這個 this 是誰？要看兇手是誰而定！</p><p>前面有提到，這個 e 是在當事件發生時，事件處理器自動建立的「事件物件」，裡面紀錄了跟事件有關係的資訊，並把這個e當參數傳入事件發生時設定要執行的函式。</p><p>如果我們想要印出，滑鼠所點擊的元素的標籤名稱，可以這樣寫：</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx">element<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>tagName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><p>「 e.target 」就是「觸發事件的元素」。在這種狀況下，我們可以使用「 this 」來取代 「 e.target 」。</p><p>當我們選取 DOM 元素來做事件監聽的時候， this 會指向那個DOM元素。以下這段程式，滑鼠點擊 <code>&lt;li&gt;</code> 之後，字體會變成紅色的。</p><figure><div class="code-wrapper"><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sword<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fiveHero<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>firstHero<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>1 東邪<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>secondHero<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>2 西毒<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>thirdHero<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>3 南帝<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fifthHero<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>4 北丐<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>lastHero<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>5 中神通<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">var</span> elements <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">changeColor</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>  e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>style<span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token string">'red'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> elements<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  elements<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> changeColor<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>我們用「 this 」來取代「 e.target 」，跟上面那個JavaScript 程式區塊呈現一樣的效果。</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">var</span> elements <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//沒有用e當function的參數</span><span class="token keyword">function</span> <span class="token function">changeColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token string">'red'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> elements<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  elements<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> changeColor<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>但是當「事件監聽」是被其他元素的事件所觸發的時候，「 this 」就不等於「 e.target 」了。來看看下面的例子：</p><figure><div class="code-wrapper"><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>outer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>inner<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">var</span> inner <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.inner'</span><span class="token punctuation">)</span><span class="token keyword">var</span> outer <span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.outer'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>inner<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>className<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>className<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span>outer<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>className<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>className<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p><img src="https://i.imgur.com/x4KqaH8.png"></p><p>點擊黃色區塊後，出來的結果是：</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token string">"inner"</span> <span class="token number">1</span>  <span class="token comment">//黃色區塊所觸發的事件,e.targer = 觸發事件的元素</span><span class="token string">"inner"</span> <span class="token number">1</span>  <span class="token comment">//黃色區塊所觸發的事件,e.target = this = 觸發事件的元素</span><span class="token string">"inner"</span> <span class="token number">2</span>  <span class="token comment">//黃色區塊事件冒泡所觸發的事件 , e.target = 觸發事件的元素</span><span class="token string">"outer"</span> <span class="token number">2</span>  <span class="token comment">//黃色區塊事件冒泡觸發紅色區塊的事件， this = 被事件冒泡所觸發的元素，而非e.target</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>在這個例子中， outer.addEventListener() 是被  inner.addEventListener() 的事件冒泡所觸發， e.target 為觸發事件的元素，真正的凶手當然就是 inner 。而 outer.addEventListener() 的 this 卻是指向 outer ，它是被事件冒泡所觸發的元素，也就是 e.currentTarget ，也就是被害者，被 inner 害的。</p><p>在沒有事件冒泡影響的情況下， e.target &#x3D; this ，兇手與被害者是同一人，也就是自作自受。</p><p>當元素的事件是被事件冒泡所觸發的時候：</p><p><a href="http://e.target/">e.target</a> 是兇手，郎是伊抬ㄟ！</p><p>e.currentTarget 就是被害者！ this 就是 e.currentTarget ！也就是被事件冒泡影響所觸發的元素。</p><p>歐陽克是被楊康殺的！</p><p>咦！</p>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript, 2021iT邦鐵人賽</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Day28:e.stopPropagation()停止事件冒泡</title>
    <link href="/2021/09/28/21-day28-stopPropagation/"/>
    <url>/2021/09/28/21-day28-stopPropagation/</url>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/COeQO3y.jpg"><br>當事件發生的時候，如果想要阻擋事件向上傳遞，只要利用「事件物件」( Event Object )所提供的 e.stopProoagation() ，就可以阻止事件由觸發的元素向外冒泡。</p><span id="more"></span><p>當我們有兩個區塊，一個叫 inner ，一個叫 outer ， inner 被包在 outer 中間。<br><img src="https://i.imgur.com/KYOEvWl.png"></p><figure><div class="code-wrapper"><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>outer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>inner<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.outer</span> <span class="token punctuation">&#123;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 400px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 400px<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> 0 auto 0<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.inner</span> <span class="token punctuation">&#123;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> 0px auto 0px<span class="token punctuation">;</span>  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateY</span><span class="token punctuation">(</span>50%<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">var</span> elOuter <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.outer'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>elOuter<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'outer'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> elInner <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.inner'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>elInner<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'inner'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>因為「事件冒泡」的關係，點擊 inner 會先跳出 「 inner 」的警告視窗，而 click 事件會傳遞到 outer 區塊，跟著跳出「 outer 」的警告視窗。</p><p>如果要阻止事件冒泡向上傳遞，就要在 addEventLister() 的 function(e){ } 參數裡面加上 e ，在 function 區塊前面加上 e.propagation ，這樣就能阻止事件向上傳遞了。</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">var</span> elOuter <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.outer'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//在outer的節點上綁定事件監聽，點擊後跳出'outer'的警告視窗</span>elOuter<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'outer'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token keyword">var</span> elInner <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.inner'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//在inner的節點上綁定事件監聽，點擊後跳出'inner'的警告視窗</span>elInner<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//阻止事件向外冒泡，只執行'inner'這個區塊的程式碼</span>  e<span class="token punctuation">.</span><span class="token function">stopPropagation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'inner'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript, 2021iT邦鐵人賽</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Day27:e是咱ㄟ寶貝</title>
    <link href="/2021/09/27/21-day27-eventTarget/"/>
    <url>/2021/09/27/21-day27-eventTarget/</url>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/phrmWCG.jpg"><br>前面提到那個 e ，蘊含著我們與網頁互動豐富的資訊。</p><span id="more"></span><p>例如：</p><ul><li>type ：代表事件的類別。</li><li>target ：為觸發事件的元素。</li><li>screenX &#x2F; screenY：代表事件觸發時，滑鼠座標在螢幕解析度上的相對位置。</li><li>pageX &#x2F; pageY： 表示事件觸發時，滑鼠座標在網頁上的相對位置。</li><li>clientX &#x2F; clientY： 代表事件觸發時，滑鼠座標在瀏覽器視窗內的相對位置。</li></ul><p>我做了一個列表，裡面放了倚天劍、屠龍刀還有碧血劍。</p><figure><div class="code-wrapper"><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sky<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>倚天劍<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dragon<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>屠龍刀<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>blood<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>碧血劍<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>顯示e的資訊<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>target: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>target<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>tagName: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tagName<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>className: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>className<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>textContent: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>textContent<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>screenX: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>screenX<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>screenY: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>screenY<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>pageX: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pageX<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>pageY: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pageY<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>clientX: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>clientX<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>clientY: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>clientY<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>然後從列表的 ul 標籤來監聽滑鼠的點擊事件，讓 getInformation 這個函式去捉「事件物件」( event )裡面的資訊。</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">var</span> el <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'box'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> target <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.target'</span><span class="token punctuation">)</span><span class="token keyword">var</span> tagName <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.tagName'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> className <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.className'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> content <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.textContent'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> screenX <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.screenX'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> screenY <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.screenY'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> pageX <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.pageX'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> pageY <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.pageY'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> clientX <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.clientX'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> clientY <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.clientY'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">getInformation</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    target<span class="token punctuation">.</span>textContent <span class="token operator">=</span> e<span class="token punctuation">.</span>target<span class="token punctuation">;</span>    tagName<span class="token punctuation">.</span>textContent <span class="token operator">=</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>tagName<span class="token punctuation">;</span>    className<span class="token punctuation">.</span>textContent <span class="token operator">=</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>className<span class="token punctuation">;</span>    content<span class="token punctuation">.</span>textContent <span class="token operator">=</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>textContent<span class="token punctuation">;</span>    screenX<span class="token punctuation">.</span>textContent <span class="token operator">=</span> e<span class="token punctuation">.</span>screenX<span class="token punctuation">;</span>    screenY<span class="token punctuation">.</span>textContent <span class="token operator">=</span> e<span class="token punctuation">.</span>screenY<span class="token punctuation">;</span>    pageX<span class="token punctuation">.</span>textContent <span class="token operator">=</span> e<span class="token punctuation">.</span>pageX<span class="token punctuation">;</span>    pageY<span class="token punctuation">.</span>textContent <span class="token operator">=</span> e<span class="token punctuation">.</span>pageY<span class="token punctuation">;</span>    clientX<span class="token punctuation">.</span>textContent <span class="token operator">=</span> e<span class="token punctuation">.</span>clientX<span class="token punctuation">;</span>    clientY<span class="token punctuation">.</span>textContent <span class="token operator">=</span> e<span class="token punctuation">.</span>clientY<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>el<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> getInformation<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p><a href="https://codepen.io/popeye_ux/pen/VwbWrXL">https://codepen.io/popeye_ux&#x2F;pen&#x2F;VwbWrXL</a></p><p>可以到 Codepen 看看我做的範例，應該有進一步的體會。</p>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript, 2021iT邦鐵人賽</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Day26:事件物件—天外飛來一個e</title>
    <link href="/2021/09/26/21-day26-eventObject/"/>
    <url>/2021/09/26/21-day26-eventObject/</url>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/O6wgDpz.jpg"></p><p>剛開始學 JavaScript 的時候，在書上看到事件綁定的範例：</p><span id="more"></span><figure><div class="code-wrapper"><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">//HTML<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>link<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://yahoo.com<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>雅虎<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">//JavaScript</span><span class="token keyword">var</span> link <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'link'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'yahoo'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>老師有教 preventDefault() 是阻止事件的預設行為，讓人在點擊連結的時候，連結沒有發生作用，不會連到雅虎的頁面上去。</p><p>但是…但是…那個 e，也就是 function(e) 括號中的那個 e……，還有 e.preventDefault() 的那個 e ，到底是從哪來的?</p><p>就是這個 e 把我搞得一頭霧水，頭上三條線！</p><p>後來再深入學習，知道當 addEventListener() 監聽事件發生的時候，瀏覽器會找事件處理器( Event Handler )來執行原本設定要執行的任務，事件處理器就是 addEventListener() 的第二個參數 function 的部分。</p><p>而那個放在 function(e) 的 e 就是這個 eventListener 建立的「事件物件」( event object )，裡面放著跟這個事件有關係的所有屬性，並且用參數的方式傳入事件處理器，也就是 addEventListener() 的第二個參數 function 中。</p><figure><div class="code-wrapper"><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>點我...點點我<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>btn</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">var</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'btn'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>當你點了「點我…點點我」，打開瀏覽器控制台的 console ，點開 MouseEvent 可以看到所有 event 物件包含的屬性：</p><p><img src="https://i.imgur.com/W18Luvx.png"></p><p>所以我們了解：</p><p>這個 e 是在當事件發生時，事件處理器自動建立的「事件物件」，裡面紀錄了跟事件有關係的資訊，並把這個 e 當參數傳入事件發生時設定要執行的函式。</p>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript, 2021iT邦鐵人賽</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Day25:派一個Spy到網頁中竊聽—事件監聽</title>
    <link href="/2021/09/25/21-day25-addEventListener/"/>
    <url>/2021/09/25/21-day25-addEventListener/</url>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/O6wgDpz.jpg"><br>先來說說什麼是「事件」吧？</p><span id="more"></span><p>舉個例子：看到紅燈，就踩剎車！</p><p>「看到紅燈」就是事件；「踩剎車」就是事件發生後所採取的行動。而在網頁上所發生的事件，可能是使用者滑鼠點擊、滑鼠移入、滾動瀏覽器卷軸、改變視窗大小…等等。</p><p>瀏覽器載入網頁時，會把所有的 JavaScript 程式碼載入，但是並不是所有程式碼都會馬上執行，有些必須等到「事件發生」，才會執行相對應的程式碼，例如，「按下按鈕」，跳出「對話框」。「按下按鈕」是事件( Event )，「跳出對話框」就是執行相對應的程式碼( Event Handler )。</p><p>當然你必須要把監聽的事件( Event )跟你要執行的程式碼( Event Handler )綁定在一起，事件發生時兩者才會連動。</p><p>目前綁定的方法有：</p><ul><li>由網頁上HTML元素上綁定 on-event 處理器</li><li>利用 DOM API 所提供的 on-event 處理器來綁定</li></ul><h3 id="在網頁上HTML元素上綁定-on-event-處理器"><a href="#在網頁上HTML元素上綁定-on-event-處理器" class="headerlink" title="在網頁上HTML元素上綁定 on-event 處理器"></a>在網頁上HTML元素上綁定 on-event 處理器</h3><p>在HTML元素上透過「on + 事件名稱」來綁定事件，只要事件被觸發，就會執行 JavaScript。</p><figure><div class="code-wrapper"><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value javascript language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'降龍十八掌之亢龍有悔'</span><span class="token punctuation">)</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>點擊出招<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>在早期都是透過這種方式綁定事件，但隨著觀念的進化，這種「侵入式的寫法」容易造成資安漏洞，也不符合「關注點分離」，由HTML 負責架構與內容， JavaScript 負責互動的觀念。現在比較少用這種綁定事件的方式了。</p><h3 id="利用DOM-API所提供的on-event處理器來綁定"><a href="#利用DOM-API所提供的on-event處理器來綁定" class="headerlink" title="利用DOM API所提供的on-event處理器來綁定"></a>利用DOM API所提供的on-event處理器來綁定</h3><p>也可以在 JavaScript 中藉由 document.getElementById() 或 document.querySelector() 選取 HTML 元素當節點，然後將 on-event 綁定在選取的節點上。</p><figure><div class="code-wrapper"><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>點擊出招<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">//選取節點</span><span class="token keyword">let</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'btn'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//將on-event綁定在事件上</span>btn<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'降龍十八掌之見龍在田'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>如果希望 HTML 一載入瀏覽器， JavaScript 就自動執行，可以這樣寫：</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx">window<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'飛雪連天射白鹿，笑書神俠倚碧鴛'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="事件監聽"><a href="#事件監聽" class="headerlink" title="事件監聽"></a>事件監聽</h3><p>為了要偵測使用者對網頁所做的行為，如果可以在網頁中埋伏一個間諜，監看使用者是否有對指定的元素做出設定好的動作，如果有的話，就給予相對的回應，這樣就會方便得多。</p><p>那該如何來做事件監聽呢？基本上「事件監聽」長成這個樣子：</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token constant">HTML</span>元素節點<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'事件名稱'</span>，事件處理器，boolean值<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>「事件名稱」指的是使用者對綁定的 HTML 元素節點所做的事情，例如點擊( click )、滑鼠移入( mouseenter )…等事件。</p><p>「事件處理器」( Event Handler )指的是事件發生時，要叫用的 function()。</p><p>布林值( boolean )， false 代表事件冒泡( Event Bubbling )，而 true 代表事件捕捉( Event Capturing )。這是甚麼意思呢？</p><p>事件冒泡( Event Bubbling )：由啟動事件的元素節點開始，向外層傳遞。</p><p>事件捕捉( Event Capturing )：由最外層開始，一層一層找到啟動事件的元素節點。</p><figure><div class="code-wrapper"><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>標題<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>點我--隔山打牛--點我<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>事件觸發的傳遞順序會是：</p><ol><li><code>&lt;div&gt;</code>點我–隔山打牛–點我<code>&lt;/div&gt;</code></li><li><code>&lt;body&gt;</code></li><li><code>&lt;html&gt;</code></li><li>document</li></ol><p>因為<code>&lt;div&gt;</code>點我–隔山打牛–點我<code>&lt;/div&gt;</code>也是在<code>&lt;body&gt;</code>的範圍中，所以點擊它的同時也會傳遞到<code>&lt;body&gt;</code>，跟著也會傳到<code>&lt;html&gt;</code>與document。這種click事件一層一層往上依序被觸發，就是「事件冒泡」機制。</p><p>而「事件捕獲」傳遞的順序則相反，同樣是點擊<code>&lt;div&gt;</code>點我–隔山打牛–點我<code>&lt;/div&gt;</code>，但是傳遞順序卻如下：</p><ol><li>document</li><li><code>&lt;html&gt;</code></li><li><code>&lt;body&gt;</code></li><li><code>&lt;div&gt;</code>點我–隔山打牛–點我<code>&lt;/div&gt;</code></li></ol><p>講解完事件綁定，來看一下事件綁定的簡單例子：</p><figure><div class="code-wrapper"><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>用滑鼠點穴<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">let</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'btn'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'腳麻袂凍行'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>**而且同元素的同一事件可以重複指定addEventListener()**：</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">let</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'btn'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'腳麻袂凍行'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span>btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'快吃循力寧'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>如果是 on-event 的方法如果重複綁定的話，則只會出現最後一個綁定的事件。</p><figure><div class="code-wrapper"><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">onclick</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span><span class="token value javascript language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'見龍在田'</span><span class="token punctuation">)</span></span><span class="token punctuation">"</span></span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>行內綁定<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 使用on-event綁定 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btnOn<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>on-event點擊<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 使用addEventListener綁定 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btnAdd<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>addEvent點擊<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">var</span> elOn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.btnOn'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>elOn<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'on-1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//雖然同一物件綁訂了兩個on事件處理器，但是只會出現最後一個on-2</span>elOn<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'on-2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> elAdd <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.btnAdd'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>elAdd<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'add點擊1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token comment">//同一物件綁訂了兩個addEventListener，兩個綁定的事件處理器都會執行</span>elAdd<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'add點擊2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>那如果要解除 addEventListener() 綁定的事件，可以使用 removeEventListener() 。</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token constant">HTML</span>元素節點<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'事件名稱'</span>，事件處理器，boolean值<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>but，要注意的是「事件處理器」必須要指向同一個「實體」，在下面範例中指的是相同名稱的 function。</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">let</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'btn'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'腳麻袂凍行'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token comment">//愛到不能動，還有甚麼值得我心痛，沒辦法移除事件，因為指向不同實體</span>btn<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'腳麻袂凍行'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>要這麼做才行：</p><p>&#96;&#96;&#96;jsx<br>let btn &#x3D; document.getElementById(‘btn’);</p><p>let canNotMove &#x3D; function() {<br>    alert(‘腳麻袂凍行’);<br>}</p><p>btn.addEventListener(‘click’, canNotMove, false);</p><p>btn.removeEventListener(‘click’, canNotMove, false);</p>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript, 2021iT邦鐵人賽</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Day21:我變我變我變變變：如何改變HTML元素的樣式</title>
    <link href="/2021/09/24/21-day24-htmlElementStyle/"/>
    <url>/2021/09/24/21-day24-htmlElementStyle/</url>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/4J1QEv1.jpg"><br>「DOM API定義了JavaScript存取、改變HTML架構、內容、樣式的方法，甚至對節點綁定的事件。」</p><span id="more"></span><p>前面幾篇提到了JavaScript改變HTML架構與內容的方法，這一篇我們來談談怎麼改變HTML的樣式。</p><p>再來看一下前面提到的「前端三要素」：</p><ul><li>HTML負責網頁的結構與內容</li><li>CSS負責網頁的外觀與樣式</li><li>JavaScript負責網頁的互動與行為</li></ul><p>樣式是由CSS負責，所以當我們想要改變HTML的樣式，當然就是要用JavaScript來處理CSS這一塊，而這都要先從選取到某個節點開始。</p><ul><li>選取HTML元素，直接修改style屬性</li><li>透過className屬性來修改style樣式。</li><li>用classList屬性，透過刪除或新增class來修改style樣式</li><li>用setAttribute()來更改class屬性</li></ul><h3 id="直接修改HTML元素的style"><a href="#直接修改HTML元素的style" class="headerlink" title="直接修改HTML元素的style"></a>直接修改HTML元素的style</h3><p>使用JavaScript直接修改HTML元素的style，因為這種方式是透過DOM API直接修改元素的行內樣式，樣式的優先權會比其他樣式的寫法高出許多。</p><figure><div class="code-wrapper"><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">//可以在'string'中指定許多種樣式，樣式之間用;隔開就node.style.cssText = 'string';//也可以把某個樣式，例如字型大小單獨挑出來node.style.fontSize = '24px';<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>我們試著把黃藥師寫的詩，用JavaScript來改變其樣式：</p><figure><div class="code-wrapper"><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>style1<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span> <span class="token property">font-size</span><span class="token punctuation">:</span> 45px<span class="token punctuation">;</span> <span class="token property">border</span><span class="token punctuation">:</span> 3px solid<span class="token punctuation">;</span><span class="token property">width</span><span class="token punctuation">:</span> 400px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>  桃花影落飛神劍，<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>style2<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">color</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span><span class="token property">font-size</span><span class="token punctuation">:</span> 45px<span class="token punctuation">;</span><span class="token property">text-decoration</span><span class="token punctuation">:</span>underline<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>  碧海潮生按玉簫<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>看看下面的JavaScript，cssText將要改的樣式寫在同一行，而且會完全蓋掉本來寫在style1的全部樣式，我在cssText裡面並沒有輸入border的參數，而本來寫在行內樣式的border卻被完全清除了，最後網頁上呈現的結果並沒有border。</p><p>如果用「style.CSS屬性名稱」的方式，就可以針對想要改變的屬性來做處理。唯一要注意的是有些CSS屬性名稱中間有 - 的破折號，如font-size、font-weight… 等等屬性，但是在JavaScript的變數及物件屬性名稱是不允許使用 - 破折號，這時屬性名稱就要改成「駝峰式」寫法，如fontSize。</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">var</span> el1 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">".style1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>cssText <span class="token operator">=</span> <span class="token string">'font-size: 24px; color: green;'</span><span class="token punctuation">;</span><span class="token keyword">var</span> el2 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">".style2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>el2<span class="token punctuation">.</span>style<span class="token punctuation">.</span>fontSize <span class="token operator">=</span> <span class="token string">"16px"</span><span class="token punctuation">;</span>el2<span class="token punctuation">.</span>style<span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token string">"blue"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="透過className屬性來修改style樣式"><a href="#透過className屬性來修改style樣式" class="headerlink" title="透過className屬性來修改style樣式"></a>透過className屬性來修改style樣式</h3><p>透過修改HTML「行內樣式」來調整網頁的外觀，雖然很方便，但是我們說過「CSS負責網頁的外觀與樣式」，如果老是透過「行內樣式」來調整網頁外觀，就做不到HTML、CSS、JavaScript三者「關注點分離」，而且實務上，大多是以HTML連結CSS檔案的方式來設定網頁的外觀與樣式。</p><p>那要如何透過修改HTML標籤的class屬性，來改變元素的樣式呢?</p><p>JavaScript提供了className的屬性來修改HTML元素的class。</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx">node<span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">'元素的class名稱'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>我們一樣用黃藥師的詩來講解，我們給它兩個class屬性，分別為 redfont與bigtitle。</p><figure><div class="code-wrapper"><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>redfont bigtitle<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>桃花影落飛神劍，碧海潮生按玉簫<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>以下為外部CSS檔的內容：</p><figure><div class="code-wrapper"><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.redfont</span> <span class="token punctuation">&#123;</span>  <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.bigtitle</span> <span class="token punctuation">&#123;</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> 40px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.bluefont</span> <span class="token punctuation">&#123;</span>  <span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>先選取節點，然後用className的方法，把 <code>&lt;h1&gt;</code> 標籤的本來的 class 取代為 bluefont，我們會發現，除了本來的redfont 之外，連 bigtitle 也被清除掉了。所以如果本來HTML標籤有設定多組 class 屬性，用 className 的方法並不會保留其他沒有被修改的屬性，而是整個 class 被清空，再以className 新增的屬性取代。</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">var</span> el <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.redfont'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>el<span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">'bluefont'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><h3 id="用classList屬性，透過刪除或新增class來修改style樣式"><a href="#用classList屬性，透過刪除或新增class來修改style樣式" class="headerlink" title="用classList屬性，透過刪除或新增class來修改style樣式"></a>用classList屬性，透過刪除或新增class來修改style樣式</h3><p>classList 與 className 不同之處在於不能直接修改，而是必須透過 claaList.add() 與 classList.remove() 來增加與刪減 HTML 標籤的 class 屬性，如果你的 HTML 標籤有 red 與 big 兩個 class 樣式，你想把 red 改成 green，必須先 classList.remove(red) ，把 red 這個 class 移除，然後再 classList.add(green) ，把 green 這個 class 加入。</p><figure><div class="code-wrapper"><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>redfont bigtitle<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>桃花影落飛神劍，碧海潮生按玉簫<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>這是CSS檔：</p><figure><div class="code-wrapper"><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.redfont</span> <span class="token punctuation">&#123;</span>  <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.bigtitle</span> <span class="token punctuation">&#123;</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> 40px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.greenfont</span> <span class="token punctuation">&#123;</span>  <span class="token property">color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>而這是JavaScript，用來改變 <code>&lt;h1&gt;</code> 標籤內的class，redfont會被greenfont置換，而bigtitle會保留下來。</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">var</span> el <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.redfont'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>el<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">'redfont'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>el<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'greenfont'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><p>還有一個切換 class 的方法，那就是el.classList.toogle(‘class名稱’) ，當所選的元素沒有這個class樣式的時候，就新增這個樣式；如果已經有這個 class 樣式的時候，就會變成刪除它。</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">var</span> el <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.redfont'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>el<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">toggle</span><span class="token punctuation">(</span><span class="token string">'redfont'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//現在是增加</span>el<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">toggle</span><span class="token punctuation">(</span><span class="token string">'redfont'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//現在是刪除</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="用setAttribute-來更改class屬性"><a href="#用setAttribute-來更改class屬性" class="headerlink" title="用setAttribute()來更改class屬性"></a>用setAttribute()來更改class屬性</h3><p>還有一種方式可以用來更改 HTML 元素的 class 屬性，但是它的使用範圍更廣泛一些：</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx">element<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">'屬性名稱'</span><span class="token punctuation">,</span><span class="token string">'屬性值'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//屬性名稱可以是 class、 id、 href</span><span class="token comment">//屬性值對應的分別是 class名稱、 id名稱 及 網址 </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><p>讓我們來看看怎麼做：</p><figure><div class="code-wrapper"><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>redfont bigtitle<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>桃花影落飛神劍，碧海潮生按玉簫<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.redfont</span> <span class="token punctuation">&#123;</span>  <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.bigtitle</span> <span class="token punctuation">&#123;</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> 40px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.bluefont</span> <span class="token punctuation">&#123;</span>  <span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-css" data-language="css"><code class="language-css">var el = document.<span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.redfont'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>el.<span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">'class'</span><span class="token punctuation">,</span><span class="token string">'bluefont'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><p>用 setAttribute() 來修改 HTML 元素的 class ，跟className 一樣，也是會先把 class 清空，再用新增的class 設定值取代，所以 bigtitle 這個 class 也會被清除掉。</p><p>以上就是幾種修改HTML元素樣式的方法。</p>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript, 2021iT邦鐵人賽</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Day23:在網頁中插入HTML標籤的實務做法</title>
    <link href="/2021/09/23/21-day23-createElementVsInnerHtml/"/>
    <url>/2021/09/23/21-day23-createElementVsInnerHtml/</url>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/nBPxTMs.jpg"><br>前一篇介紹了在網頁中利用DOM API改變HTML架構與內容的方法，這篇來談談createElement()與innerHTML這兩種做法的差異。</p><span id="more"></span><p>要在HTML中插入HTML標籤有兩種做法：</p><ul><li>createElement()：這種方法安全性高，但是效能較差。</li><li>innerHTML：效能高，必須確認資料來源的資安沒有問題才能使用這種方法，避免有心人是把不好的東西藏在資料中，讓我們經由innerHTML寫入網頁裡。</li></ul><h3 id="使用createElement-組字串"><a href="#使用createElement-組字串" class="headerlink" title="使用createElement()組字串"></a>使用createElement()組字串</h3><p>假設一個情境，有一天華山論劍大會的主辦人金小庸要擬一份參加者名單列表，他只有拿到一個陣列，要把陣列的資料輸出到網頁上，如果是利用DOM API提供的方法，請問他要怎麼做？</p><p>這是金小庸拿到的陣列：</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">var</span> heros <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">&#123;</span>    <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">'黃藥師'</span><span class="token punctuation">,</span>    <span class="token literal-property property">nickname</span><span class="token operator">:</span><span class="token string">'東邪'</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span>    <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">'歐陽鋒'</span><span class="token punctuation">,</span>    <span class="token literal-property property">nickname</span><span class="token operator">:</span><span class="token string">'西毒'</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span>    <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">'段皇爺'</span><span class="token punctuation">,</span>    <span class="token literal-property property">nickname</span><span class="token operator">:</span><span class="token string">'南帝'</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span>    <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">'洪七公'</span><span class="token punctuation">,</span>    <span class="token literal-property property">nickname</span><span class="token operator">:</span><span class="token string">'北丐'</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span>    <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">'王陽明'</span><span class="token punctuation">,</span>    <span class="token literal-property property">nickname</span><span class="token operator">:</span><span class="token string">'中神通'</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>金小庸要把名單輸出到<code>&lt;ul class=&#39;list&#39;&gt;&lt;/ul&gt;</code>中間：</p><figure><div class="code-wrapper"><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>華山論劍參加名單<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><p>如果以我們前一篇談到的方法，會用for迴圈的方式去捉資料，然後創造一個 <code>&lt;li&gt;</code> 的元素節點，把資料塞入<code>&lt;li&gt;</code>元素節點，再把他們利用迴圈一個一個appendChild()到 <code>&lt;ul class=&quot;list&quot;&gt; &lt;/ul&gt;</code> 中間。</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">var</span> inviteList <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.list'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> len <span class="token operator">=</span> heros<span class="token punctuation">.</span>length<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> guest <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  guest<span class="token punctuation">.</span>textContent <span class="token operator">=</span> heros<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>nickname <span class="token operator">+</span> <span class="token string">' : '</span> <span class="token operator">+</span> heros<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>    inviteList<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>guest<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>以上就是利用createElement()創造節點在網頁中插入HTML標籤的方式。</p><h3 id="使用innerHTML來組字串"><a href="#使用innerHTML來組字串" class="headerlink" title="使用innerHTML來組字串"></a>使用innerHTML來組字串</h3><p>而另外一種方法是以迴圈用 innerHTML 組完字串之後，再將它渲染出來。這種方法的優點是效能快，缺點是有資安風險，必須確定拿到的資料沒有問題，才能用innerHTML在網頁中插入標籤。</p><p>一樣的情境，金小庸一樣拿到了一個陣列，跟一個準備要填的空白網頁，這次要用innerHTML來加入邀請名單：</p><p>這是金小庸拿到的陣列：</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">var</span> heros <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">&#123;</span>    <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">'黃藥師'</span><span class="token punctuation">,</span>    <span class="token literal-property property">nickname</span><span class="token operator">:</span><span class="token string">'東邪'</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span>    <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">'歐陽鋒'</span><span class="token punctuation">,</span>    <span class="token literal-property property">nickname</span><span class="token operator">:</span><span class="token string">'西毒'</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span>    <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">'段皇爺'</span><span class="token punctuation">,</span>    <span class="token literal-property property">nickname</span><span class="token operator">:</span><span class="token string">'南帝'</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span>    <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">'洪七公'</span><span class="token punctuation">,</span>    <span class="token literal-property property">nickname</span><span class="token operator">:</span><span class="token string">'北丐'</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span>    <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">'王陽明'</span><span class="token punctuation">,</span>    <span class="token literal-property property">nickname</span><span class="token operator">:</span><span class="token string">'中神通'</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>金小庸要把名單輸出到<code>&lt;ul class=&#39;list&#39;&gt;&lt;/ul&gt;</code>中間：</p><figure><div class="code-wrapper"><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>華山論劍參加名單<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><p>使用innrHTML組字串的具體步驟如下：</p><ul><li>抓取要插入內容的父容器節點，將它賦值給inviteList變數。</li><li>宣告一個名為guest的變數，賦予它空字串的值。</li><li>宣告一個名為len的變數，指定給他的值是heros陣列的長度。</li><li>利用迴圈去跑陣列，每跑一次把「’<li>‘ + heros[i].nickname + ‘ : ‘ + heros[i].name」塞到guest這個原本為空字串的變數中，直到條件滿足跳出迴圈。</li><li>然後把塞好塞滿的guest變數，用innerHTML的方法插入名為inviteList變數的目容器節點後面。</li></ul><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">var</span> inviteList <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.list'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> guest <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span><span class="token keyword">var</span> len <span class="token operator">=</span> heros<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  guest <span class="token operator">+=</span> <span class="token string">'&lt;li>'</span> <span class="token operator">+</span> heros<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>nickname <span class="token operator">+</span> <span class="token string">' : '</span> <span class="token operator">+</span> heros<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>inviteList<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> guest<span class="token punctuation">;</span>                      <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>不論是innerHTML或是createElement()都是組字串的好方法，如果沒有資安疑慮，innerHTML效能高，是首選。如果有資安疑慮，那就以createElement()來處理。</p>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript, 2021iT邦鐵人賽</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Day22:給我一個節點，我可以把網頁改頭換面</title>
    <link href="/2021/09/22/21-day22-element/"/>
    <url>/2021/09/22/21-day22-element/</url>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/QSoG1Ty.jpg"><br>「DOM API 定義了 JavaScript 存取、改變 HTML 架構、內容、樣式的方法，甚至對節點綁定的事件。」</p><span id="more"></span><p>前一篇的內容，是關於 JavaScript 如何「存取」 HTML 節點的方法；這一篇來談談 JavaScript 用甚麼方法改變 HTML 架構、內容與樣式。</p><p>JavaScript 改變 HTML 的方法有以下步驟：</p><ul><li>新增元素節點或文字節點</li><li>利用 appendChild()、 insertBefore 或 replaceChild() 等方法將新增的元素節點與文字節點插入指定的位置。</li></ul><h2 id="新增元素節點或文字節點"><a href="#新增元素節點或文字節點" class="headerlink" title="新增元素節點或文字節點"></a>新增元素節點或文字節點</h2><h3 id="document-createElement-tagName"><a href="#document-createElement-tagName" class="headerlink" title="document.createElement(tagName)"></a>document.createElement(tagName)</h3><p>document.createElement(tagName) 可以幫我們建立一個新的元素節點，但是你利用appendChild() 等方法把它加入指定位置之後才會在網頁上顯示出來。</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">let</span> newLi <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>同時也可針對我們新建立的<code>&lt;li&gt;</code>，指定id及class名稱。</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx">newLi<span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token string">"goodNewLi"</span><span class="token punctuation">;</span>newLi<span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">"betterNewLi"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><h3 id="document-createTextNode"><a href="#document-createTextNode" class="headerlink" title="document.createTextNode()"></a>document.createTextNode()</h3><p>我們也可以利用 document.createTextNode() 建立文字節點，在括號中放入想要新增的字串。跟document.createElement(tagName) 一樣，要用 appendChild() 等方法把新增的文字節點插入指定的位置後面，網頁上才會顯現出來。</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">let</span> txt <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createTextNode</span><span class="token punctuation">(</span><span class="token string">'string'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h3 id="document-write"><a href="#document-write" class="headerlink" title="document.write"></a>document.write</h3><p>document.write() 應該是JavaScript 的新手最熟悉的老朋友了！</p><p>利用它不用甚麼 append 方法，馬上可以將括號中的內容輸出到網頁上，而且括號中不只可以放字串，還可以放HTML標籤。</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx">document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'Hollow World！'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h3 id="將DOM節點新增到網頁中或是刪改節點"><a href="#將DOM節點新增到網頁中或是刪改節點" class="headerlink" title="將DOM節點新增到網頁中或是刪改節點"></a>將DOM節點新增到網頁中或是刪改節點</h3><h3 id="Node-appendChild-childNode"><a href="#Node-appendChild-childNode" class="headerlink" title="Node.appendChild(childNode)"></a>Node.appendChild(childNode)</h3><p>Node.appendChild(childNode) 可以讓我們將新增的元素節點或文字節點新增到父容器節點的最尾端。</p><figure><div class="code-wrapper"><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fiveHero<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>firstHero<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>1 東邪<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>secondHero<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>2 西毒<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>thirdHero<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>3 南帝<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fourthHero<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>4 北丐<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>讓我們看看如何將 <code>&lt;li id=&quot;lastHero&quot;&gt;5 中神通&lt;/li&gt;</code> 加入列表的最末端：</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">//取得父容器節點</span><span class="token keyword">let</span> heros <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'fiveHero'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//新增&lt;li>節點</span><span class="token keyword">let</span> newLi <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//指定新增節點的id名稱</span>newLi<span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token string">"lastHero"</span><span class="token punctuation">;</span><span class="token comment">//新增文字節點</span><span class="token keyword">let</span> text <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createTextNode</span><span class="token punctuation">(</span><span class="token string">'5 中神通'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//將文字節點加入到新增的&lt;li>節點中</span>newLi<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//將新增的&lt;li>節點加入到父容器節點中</span>heros<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>newLi<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="Node-insertBefore-newNode-refNode"><a href="#Node-insertBefore-newNode-refNode" class="headerlink" title="Node.insertBefore(newNode,refNode)"></a>Node.insertBefore(newNode,refNode)</h3><p>Node.insertBefore(newNode,refNode) 方法可以將新的節點 (newNode) ，插入到參考節點(refNode) 之前。</p><figure><div class="code-wrapper"><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fiveHero<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>1 東邪<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>2 西毒<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>4 北丐<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>5 中神通<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">//取得父容器節點</span><span class="token keyword">let</span> heros <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'fiveHero'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//建立新節點&lt;li></span><span class="token keyword">let</span> newHero <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//建立新的文字節點</span><span class="token keyword">let</span> thirdHeroTxt<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">createTextNode</span><span class="token punctuation">(</span><span class="token string">'3 南帝'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//將文字節點加入新建立的節點&lt;li></span>newHero<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>thirdHeroTxt<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//抓取參考的節點&lt;li id="fourthHero">4 北丐&lt;/li></span><span class="token keyword">let</span> refHero <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//將新的節點&lt;li>插到參考節點前面</span>heros<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>newHero<span class="token punctuation">,</span>refHero<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="Node-replaceChild-newChildNode-oldChildNode"><a href="#Node-replaceChild-newChildNode-oldChildNode" class="headerlink" title="Node.replaceChild(newChildNode,oldChildNode)"></a>Node.replaceChild(newChildNode,oldChildNode)</h3><p>Node.replaceChild(newChildNode,oldChildNode) 可以將原本的節點及內容更換為新的節點及內容。</p><figure><div class="code-wrapper"><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sword<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fiveHero<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>firstHero<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>1 東邪<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>secondHero<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>2 西毒<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">ids</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>thirdHero<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>3 南帝<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fifthHero<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>4 北丐<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>lastHero<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>5 中神通<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">//取得父容器節點</span><span class="token keyword">let</span> heros <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'fiveHero'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//建立新節點&lt;li></span><span class="token keyword">let</span> newHero <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//建立新的文字節點</span><span class="token keyword">let</span> newHeroTxt<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">createTextNode</span><span class="token punctuation">(</span><span class="token string">'5 中頑童'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//將文字節點加入newHero元素節點</span>newHero<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>newHeroTxt<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//抓取參考的節點&lt;li id="lastHero">5 中神通&lt;/li></span><span class="token keyword">let</span> oldHero <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'lastHero'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>heros<span class="token punctuation">.</span><span class="token function">replaceChild</span><span class="token punctuation">(</span>newHero<span class="token punctuation">,</span>oldHero<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="Node-removeNode-childNode"><a href="#Node-removeNode-childNode" class="headerlink" title="Node.removeNode(childNode)"></a>Node.removeNode(childNode)</h3><p>那要如何刪除元素節點呢?利用 Node.removeNode(childNode) 就可以辦到！但是這個方法只能刪除單一網頁節點。</p><figure><div class="code-wrapper"><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fiveHero<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>1 東邪<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>2 西毒<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>3 南帝<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>4 北丐<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>5 中神通<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">//取得父容器節點</span><span class="token keyword">let</span> heros <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'fiveHero'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//取得要移除的元素節點</span><span class="token keyword">let</span> removeHero <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//將heros裡的removeHero移除</span>heros<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>removeHero<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>以上就是改變HTML架構的方法，新增一個元素節點或文字節點，將其新增、替換原本就有的節點，或是清除本來就有的節點。</p>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript, 2021iT邦鐵人賽</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Day21:比較Nodelist與HTML collection的差異</title>
    <link href="/2021/09/21/21-day21-nNodelistAndHTMLcollection/"/>
    <url>/2021/09/21/21-day21-nNodelistAndHTMLcollection/</url>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/HSWDUMK.jpg"><br>前面提到透過DOM API取得網頁節點的方法：</p><span id="more"></span><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">//根據傳入的id 名稱，找到DOM裡面相同id名稱的節點。</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'idName'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//根據傳入的tag名稱，回傳所有符合條件的NodeList物件。</span>document<span class="token punctuation">.</span><span class="token function">getEleMentsByTagName</span><span class="token punctuation">(</span><span class="token string">'tagName'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//根據傳入的class名稱,回傳所有符合條件的NodeList物件。</span>document<span class="token punctuation">.</span><span class="token function">getElementsByClassName</span><span class="token punctuation">(</span><span class="token string">'className'</span><span class="token punctuation">)</span><span class="token comment">//根據所設定的selector條件(class或id都可以)，回傳第一個符合條件的節點。</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'selector'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//根據所給定的selector條件，回傳所有符合條件的 NodeList。</span>document<span class="token punctuation">.</span>querySelectorAll<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>由以上方法所回傳的可能會有以下三種節點：</p><ul><li>HTML元素節點(element nodes)</li><li>文字節點(text node)，包含空白</li><li>註解節點(comment node)</li></ul><p>getElementById與querySelector都是取得單一元素或節點，沒有 index 及 length 屬性。</p><p>DOM提供2種節點集合，用於容納多個節點：</p><ul><li>HTML collection：由「document.getElementsByTagName()」及「document.getElementsByClassName」查詢後回傳，HTML Collection只收集HTML 元素節點，這個集合不是陣列，不能使用陣列型別所提供的方法，但是有陣列索引(index)及length屬性可以使用，是一個有序的動態集合。</li><li>NodeList：由「document.querySelectorAll()」查詢後回傳，除了HTML節點外，也包括文字節點、屬性節點，這個集合同樣不是陣列，不能使用陣列所提供的方法，但是有陣列索引(index)及length屬性可以使用。</li></ul><p>HTML Collection是一個動態的集合，節點的變動會及時反應在集合中。</p><figure><div class="code-wrapper"><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sword<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fiveHero<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>firstHero<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>1 東邪<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>secondHero<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>2 西毒<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>thirdHero<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>3 南帝<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fifthHero<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>4 北丐<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>lastHero<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>5 中神通<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">var</span> outside <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'fiveHero'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> collection <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>collection<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//5  得出5個HTML元素節點</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>collection<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>textContent<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//"2 西毒"</span><span class="token comment">//清空&lt;ul id="fiveHero">下面的節點</span>outside<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>collection<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//0 即時更新為0個元素節點</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>本來抓取到的HTML collection集合中有5個<code>&lt;li&gt;</code>元素，但是我們用outside.innerHTML &#x3D;’’清空之後，再console.log(collection.length)一次，已經即時更新為0個了。</p><p>NodeList大部分都是即時更新的，由childNodes屬性返回的NodeList物件是一個動態的集合，但是透過document.querySelectorAll() 及 document.querySelector()取得的NodeList是靜態的集合。</p><figure><div class="code-wrapper"><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sword<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fiveHero<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>firstHero<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>1 東邪<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>secondHero<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>2 西毒<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>thirdHero<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>3 南帝<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fifthHero<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>4 北丐<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>lastHero<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>5 中神通<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">var</span> outside <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'ul'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> list <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//抓取所有&lt;li>元素節點</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">//5</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>list<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>textContent<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//"3 南帝"</span><span class="token comment">//清空&lt;ul id="fiveHero">下面的節點</span>outside<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">//5   沒有即時更新狀態</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>「outside.innerHTML &#x3D; ‘’」清空了底下的<code>&lt;li&gt;</code>元素，但是 console.log(list.length)仍然為5，沒有更新為0，所以 document.querySelector() 回傳的是一個靜態的集合。</p><p>But  人生最厲害的就是那個but！由 childNodes 屬性返回的 NodeList 物件是一個動態的集合，可以即時更新集合的狀態。</p><figure><div class="code-wrapper"><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sword<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fiveHero<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>firstHero<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>1 東邪<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>secondHero<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>2 西毒<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>thirdHero<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>3 南帝<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fifthHero<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>4 北丐<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>lastHero<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>5 中神通<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">var</span> outside <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'ul'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>outside<span class="token punctuation">.</span>childNodes<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//5</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>outside<span class="token punctuation">.</span>childNodes<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// [object NodeList] (11)</span><span class="token comment">//["#text","&lt;li/>","#text","&lt;li/>","#text","&lt;li/>","#text","&lt;li/>","#text","&lt;li/>","#text"]</span>outside<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>outside<span class="token punctuation">.</span>childNodes<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>我們抓取了<code>&lt;ul&gt;</code>，存在變數 outside 裡面，利用 coconsole.log() 查詢它 childNodes 的長度，然後清空了outside裡面的內容，再查詢一次childNodes.length，果然即時更新變成0了。</p><p>HTML collection 還有一個 nameItem() 方法，可以返回集合中 name 屬性和 id 屬性值的元素。</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sword<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fiveHero<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>firstHero<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">1 東邪</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>secondHero<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">2 西毒</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>thirdHero<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">3 南帝</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fifthHero<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">4 北丐</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>lastHero<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">5 中神通</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token plain-text">  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token plain-text"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">var</span> one <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">namedItem</span><span class="token punctuation">(</span><span class="token string">'firstHero'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> two <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">namedItem</span><span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>one<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//&lt;li id="firstHero">1 東邪&lt;/li></span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>two<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//&lt;li id="secondHero" name="2">2 西毒&lt;/li></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript, 2021iT邦鐵人賽</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Day20:文件物件模型--DOM</title>
    <link href="/2021/09/20/21-day20-DOM/"/>
    <url>/2021/09/20/21-day20-DOM/</url>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/HSWDUMK.jpg"><br>BOM(Browser Object Model 瀏覽器物件模型)的重點在於瀏覽器的功能，完全由各家瀏覽器廠商自行開發。而DOM(Document Object Model 文件物件模型)則是W3C所制定的共同文件規範，提供跨瀏覽器且標準的文件處理介面。</p><span id="more"></span><p>DOM(Document Object Model 文件物件模型)，是一個有階層的樹狀結構，一個節點就是一個標籤，根節點下有子節點，子節點下還有子節點，形成上下結構的關係，這樣的樹狀結構，我們稱之為「DOM Tree」。</p><p>《0陷阱！0誤解！8天重新認識JavaScript》一書中有提到：</p><p><strong>「DOM API定義了讓JavaScript可以存取、改變HTML架構、樣式和內容的方法，甚至對節點綁定的事件。」</strong></p><p>當瀏覽器載入一個網頁時，瀏覽器會分析這個網頁的HTML，依照它的HTML結構建立一個DOM Tree。DOM的學習重點就在於掌握節點根結點之間的關係，學會如何控制DOM就可以控制網頁</p><p>做出良好的互動體驗。</p><p>如何透過DOM API取得節點：</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">//根據傳入的id 名稱，找到DOM裡面相同id名稱的節點。</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'idName'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//根據傳入的tag名稱，回傳所有符合條件的NodeList物件。</span>document<span class="token punctuation">.</span><span class="token function">getEleMentsByTagName</span><span class="token punctuation">(</span><span class="token string">'tagName'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//根據傳入的class名稱,回傳所有符合條件的NodeList物件。</span>document<span class="token punctuation">.</span><span class="token function">getElementByClassName</span><span class="token punctuation">(</span><span class="token string">'className'</span><span class="token punctuation">)</span><span class="token comment">//根據所設定的selector條件(class或id都可以)，回傳第一個符合條件的節點。</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'selector'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//根據所給定的selector條件，回傳所有符合條件的 NodeList。</span>document<span class="token punctuation">.</span>querySelectorAll<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>假設網頁上有一個h1的標籤節點，裡面沒有任何內容：</p><figure><div class="code-wrapper"><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hello<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>我們利用document.getElementById(‘hello’)來取得#hello節點，然後修改textContent屬性：</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx">document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>textContent <span class="token operator">=</span> <span class="token string">'郭靖在華山論劍向大家說 Hello World!'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>這就是取得節點，改變HTML內容的方法。</p><p>你有發現嗎？不管是document.getElementById(‘idName’) 或是document.querySelector(‘selector’)都是由document開頭。讓我們來看看DOM Tree的圖，可以發現document是整個DOM Tree的根結點，所以在存取DOM節點時，都要從document出發。<br><img src="https://i.imgur.com/KNlcRq5.jpg"></p><p>我們觀察一下DOM Tree的圖可以發現，節點之間有上下分層的關係，也有同一層節點間相鄰的關係，所以節點與節點之間的關係可以區分為：</p><ul><li>父子關係：document在最上層，其他的節點若有上層的節點，上層的節點稱為「父節點」(Parent Node)，下層的節點稱為「子節點」(Child Node)。就像王陽明的徒弟是「全真七子」，而全真七子之一的丘處機，他的徒弟是尹志平等人。</li><li>兄弟關係：同一層的節點如果它們有同一個「父節點」，那它們之間就是「兄弟關係」，就像王陽明的徒弟「全真七子」，他們之間是師兄弟關係。</li></ul><h2 id="Node-childNodes"><a href="#Node-childNodes" class="headerlink" title="Node.childNodes"></a>Node.childNodes</h2><p>「所有的DOM節點物件都有childNodes屬性，且這種屬性無法修改」，那我們要如何知道一個節點是否有子節點? 這時候可以利用Node.hasChildNodes()來檢查：</p><figure><div class="code-wrapper"><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sword<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>1 東邪<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>2 西毒<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>3 南帝<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>4 北丐<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>5 中神通<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">var node = document.getElementById('sword');if(node.hasChildNodes())&#123;  for(var i=0; i &lt;node.childNodes.length; i++)    console.log(i + node.childNodes[i].nodeName);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>來看一下console出來的結果：</p><p><img src="https://i.imgur.com/2SkYtd6.png"></p><p>cosole視窗中列出了查詢的結果，我為查詢的節點加上了編號，除了”LI”之外，還出現了”0#text”之類的字串，這是因為換行符號的空白節點也被查詢了出來。如果不換行的話，”0#text”就不會出現。</p><h2 id="Node-firstChild"><a href="#Node-firstChild" class="headerlink" title="Node.firstChild"></a>Node.firstChild</h2><p>Node.firstChild用來取得Node節點的第一個子節點，如果沒有子節點的話，則回傳null。而子節點包括空白節點，例如HTML Tag之間的換行符號。</p><figure><div class="code-wrapper"><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sword<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fiveHero<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>firstHero<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>1 東邪<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>2 西毒<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>3 南帝<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>4 北丐<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>5 中神通<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">var</span> node <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'fiveHero'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>firstChild<span class="token punctuation">.</span>className<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//firstHero</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><h2 id="Node-lastChild"><a href="#Node-lastChild" class="headerlink" title="Node.lastChild"></a>Node.lastChild</h2><p>Node.lastChild可以取得Node節點的最後一個子節點，如果沒有子節點的話，則一樣是傳回null。而子節點包括空白節點，例如HTML Tag之間的換行符號。</p><figure><div class="code-wrapper"><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sword<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fiveHero<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>firstHero<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>1 東邪<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>2 西毒<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>3 南帝<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>4 北丐<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>lastHero<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>5 中神通<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">var</span> node <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'fiveHero'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>lastChild<span class="token punctuation">.</span>className<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//"lastHero"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><h2 id="Node-parentNode"><a href="#Node-parentNode" class="headerlink" title="Node.parentNode"></a>Node.parentNode</h2><p>Node.parentNode可以取得Node節點的父節點。</p><figure><div class="code-wrapper"><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sword<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fiveHero<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>firstHero<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>1 東邪<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>2 西毒<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>3 南帝<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>4 北丐<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>lastHero<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>5 中神通<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">var</span> node <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'fiveHero'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>parentNode<span class="token punctuation">.</span>tagName<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">//"DIV"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><h2 id="Node-previousSibling"><a href="#Node-previousSibling" class="headerlink" title="Node.previousSibling"></a>Node.previousSibling</h2><p>有同一個父元素，位於同一層的節點稱為「兄弟節點」，而Node.previousSibling可以取得Node節點的前一個兄弟節點。</p><figure><div class="code-wrapper"><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sword<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fiveHero<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>firstHero<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>1 東邪<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>secondHero<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>2 西毒<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>thirdHero<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>3 南帝<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fifthHero<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>4 北丐<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>lastHero<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>5 中神通<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">var</span> node <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.secondHero'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>previousSibling<span class="token punctuation">.</span>className<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//"firstHero"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><h2 id="Node-nextSibling"><a href="#Node-nextSibling" class="headerlink" title="Node.nextSibling"></a>Node.nextSibling</h2><p>Node.nextSibling可以取得Node節點的下一個兄弟節點。</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sword<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fiveHero<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>firstHero<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">1 東邪</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>secondHero<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">2 西毒</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>thirdHero<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">3 南帝</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fifthHero<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">4 北丐</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>lastHero<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">5 中神通</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token plain-text">  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token plain-text"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">var</span> node <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.secondHero'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>nextSibling<span class="token punctuation">.</span>className<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//"thirdHero"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><p>由上面幾個操作，可以知道透過節點的抓取，我們可以取得節點的資訊，進而改變網頁的結構、內容以及樣式，懂得控制節點，就可以控制網頁的呈現與使用者互動。</p>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript, 2021iT邦鐵人賽</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Day19:瀏覽器物件模型--BOM</title>
    <link href="/2021/09/19/21-day19-BOM/"/>
    <url>/2021/09/19/21-day19-BOM/</url>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/mPCz8rQ.jpg"><br>我們學習前端語言就是為了跟瀏覽器溝通，讓網頁可以渲染出想要的效果，創造使用者互動的良好體驗。所以要跟瀏覽器溝通必須要熟悉HTML、CSS與JavaScript三種技術（有些看法不認為HTML與CSS是程式語言）。</p><span id="more"></span><p>HTML、CSS、JavaScript分別扮演這三種角色：</p><ul><li>HTML負責網頁的結構與內容</li><li>CSS負責網頁的外觀與樣式</li><li>JavaScript負責網頁的互動與行為</li></ul><p>我們透過這三種技術與網頁溝通，讓網頁的渲染引擎把我們寫的網頁渲染出來，前端語言在網頁上的操作方法都是由瀏覽器所提供的。也就是藉由操控BOM(Browser Object Model 瀏覽器物件模型)與旗下的DOM(Document Object Model 文件物件模型)所提供的API來加以實現。</p><p>雖然每家瀏覽器廠商的作法可能不太相同，但在瀏覽器上基本都遵循ECMA標準所提供的JavaScript來進行操作。</p><p>所以BOM(Browser Object Model)是甚麼呢？</p><p>BOM(Browser Object Model 瀏覽器物件模型)是瀏覽器提供的物件，也是瀏覽器所有功能的核心，但是它與網頁的內容無關。例如開啟關閉視窗、彈跳警告方塊、取得位址….</p><p><img src="https://i.imgur.com/KzzR1RB.jpg"></p><p>BOM 的核心是 window 物件，而 window 物件提供的屬性主要為 document、location、navigator、screen、history 以及 frames。</p><p>window物件在瀏覽器中扮演著兩種角色：</p><ul><li>ECMA標準裡的「全域物件」(Global Object)</li><li>JavaScript用來與瀏覽器溝通的橋樑</li></ul><p>我們一開始寫JavaScript最常寫的alert()</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'洪七公和歐陽鋒牽手說：「We are the world!」'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>我們常常省略alert()前面的window，其實它作為全域物件的屬性應該是寫成這樣：</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx">window<span class="token punctuation">.</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'洪七公和歐陽鋒牽手說：「We are the world1」'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>而你在全域範圍所下的變數：</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">var</span> man <span class="token operator">=</span> <span class="token string">'郭靖'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>man<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//郭靖</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><p>在全域範圍所宣告的變數、物件、函式，都是全域物件window的屬性，只是我們通常都把前面的window省略不打。</p><p>讓我們來看看常用的window屬性</p><h2 id="window-screen"><a href="#window-screen" class="headerlink" title="window.screen"></a>window.screen</h2><p>當我們在瀏覽器的console視窗打了window.screen可以得到以下資訊：<br><img src="https://i.imgur.com/zGjbhdO.png"></p><h2 id="window-location"><a href="#window-location" class="headerlink" title="window.location"></a>window.location</h2><p>而在瀏覽器的console視窗打了window.location會出現href的訊息：<br><img src="https://i.imgur.com/fOrbDXo.png"></p><h2 id="window-navigator"><a href="#window-navigator" class="headerlink" title="window.navigator"></a>window.navigator</h2><p>而在瀏覽器的console視窗打了window.navigator會出現瀏覽器的相關資訊：<br><img src="https://i.imgur.com/uBAv7XL.png"></p>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript, 2021iT邦鐵人賽</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Day18:期間限定：函式的參數</title>
    <link href="/2021/09/18/21-day18-parameter/"/>
    <url>/2021/09/18/21-day18-parameter/</url>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/f2hdazq.jpg"><br>函式會將參數傳入函式裡面，讓它們成為函式裡的變數，讓程式碼去做運算。參數只能在函式裡刷存在感（期間限定?），一旦函式執行完畢，就會被消失。(Mission Impossible音樂響起……)</p><span id="more"></span><h3 id="arguments物件"><a href="#arguments物件" class="headerlink" title="arguments物件"></a>arguments物件</h3><p>一般的函式長成這個樣子：</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">const</span> <span class="token function-variable function">multiply</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">funA</span><span class="token punctuation">(</span><span class="token parameter">numA<span class="token punctuation">,</span> numB</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> numA <span class="token operator">+</span> numB<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//呼叫multiply()函式</span><span class="token function">multiply</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment">//2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>plus(1,2)，小括號中的1跟2就是參數，傳到multiply這個函式，numA就是1，numB就是2，傳出來的值就是2。</p><p>JavaScript呼叫函式的時候，不會對函式的數量做檢查，超過函式小括號裡面函式數量的參數，沒有配對到的就會被以undefined定義。如果呼叫函式的時候，參數數量少於函式小括號裡面定義的數量，也會以undefined表示。</p><p>如果擔心呼叫函式的時候，傳入函式的參數少於函式定義的參數數量，沒有配對到的參數會變成undefined，也可以幫參數指定預設值。</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">const</span> <span class="token function-variable function">plus</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">funA</span><span class="token punctuation">(</span><span class="token parameter">numA <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> numB <span class="token operator">=</span> <span class="token number">0</span></span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> numA <span class="token operator">+</span> numB<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//呼叫plus()函式</span><span class="token function">plus</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>  <span class="token comment">//2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>當函式被呼叫的時候，會生成一個arguments物件，裡面的放的就是呼叫函式的時候，小括號裡面放的「參數」。</p><p>argruments物件並非陣列，它是<strong>帶有「索引」特性</strong>的物件，擁有length屬性，而且只能在函式裡面使用。這意味著：就算我們呼叫函式時帶入的變數數量超過原本函式設定的數量，也可以利用迴圈把超過預設數量的變數撈出來運算，還可以透過使用arguments物件讓函式能夠呼叫數量不定的引數</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">const</span> <span class="token function-variable function">plus</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">numA<span class="token punctuation">,</span>numB</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  arguments<span class="token punctuation">.</span>length <span class="token operator">></span> i<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>num <span class="token operator">+=</span> arguments<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> num<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//呼叫plus()函式</span><span class="token function">plus</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span>  <span class="token comment">//console.log(arguments.length)會跑出6</span><span class="token comment">//然後參數相加的部分會跑出21</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="其餘參數-…args"><a href="#其餘參數-…args" class="headerlink" title="其餘參數(…args)"></a>其餘參數(…args)</h3><p>前面提到的箭頭函式，並沒有arguments物件可以使用，但是ES6提供了「其餘參數」(rest parameter)讓箭頭函式來使用。</p><p>只要在函式的小括號中以…三個點開頭，後面接上參數名稱，就變成了「其餘參數」(rest parameter)，所有參數都存在裡面。而且「其餘參數」是一個陣列，所有陣列的方法它都可以使用。</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">const</span> <span class="token function-variable function">plus</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  args<span class="token punctuation">.</span>length <span class="token operator">></span> i<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>num <span class="token operator">+=</span> args<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> num<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//呼叫plus()函式</span><span class="token function">plus</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token comment">//console.log(args.length)會跑出6</span><span class="token comment">//然後參數相加的部分會跑出21</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>arguments物件與 …args其餘參數都讓函式在取用參數的時候，不用拘泥於原本定義的參數數量，讓參數的使用有更大的彈性與擴充性。</p>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript, 2021iT邦鐵人賽</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Day17:箭頭函式</title>
    <link href="/2021/09/17/21-day17-arrowFunction/"/>
    <url>/2021/09/17/21-day17-arrowFunction/</url>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/qiHWxHS.jpg"><br>箭頭函式可以讓函式的寫法變得十分精簡！</p><p>一般我們見到的函式長成這個樣子：</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">var</span> <span class="token function-variable function">fight</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">nameA<span class="token punctuation">,</span> nameB</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> nameA <span class="token operator">+</span> <span class="token string">'打敗'</span> <span class="token operator">+</span> nameB<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">fight</span><span class="token punctuation">(</span><span class="token string">'洪七公'</span><span class="token punctuation">,</span><span class="token string">'歐陽鋒'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//洪七公打歐陽鋒</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>但是從ES6之後，增加了一種「箭頭函式表達式」(Arrow Function expression)，可以使用它來簡化函式的表達，讓我們一步一步還簡化：</p><p>把function刪除，在()小括號後面加上&#x3D; &gt;，其他保持原樣。</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">var</span> <span class="token function-variable function">fight</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">nameA<span class="token punctuation">,</span> nameB</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> nameA <span class="token operator">+</span> <span class="token string">'打敗'</span> <span class="token operator">+</span> nameB<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">fight</span><span class="token punctuation">(</span><span class="token string">'洪七公'</span><span class="token punctuation">,</span><span class="token string">'歐陽鋒'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//洪七公打歐陽鋒</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>跟著進一步簡化，把{}拿掉，也把return省略掉：</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">var</span> <span class="token function-variable function">fight</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">nameA<span class="token punctuation">,</span> nameB</span><span class="token punctuation">)</span> <span class="token operator">=></span>  nameA <span class="token operator">+</span> <span class="token string">'打敗'</span> <span class="token operator">+</span> nameB<span class="token punctuation">;</span><span class="token function">fight</span><span class="token punctuation">(</span><span class="token string">'洪七公'</span><span class="token punctuation">,</span><span class="token string">'歐陽鋒'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//洪七公打歐陽鋒</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><p>當函式只有一個參數的時候，小括號()可以省略：</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">var</span> <span class="token function-variable function">fight</span> <span class="token operator">=</span> <span class="token parameter">nameA</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>nameA <span class="token operator">+</span> <span class="token string">'武功天下第一'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fight</span><span class="token punctuation">(</span><span class="token string">'洪七公'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//洪七公武功天下第一</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><p>但是沒有參數時，小括號()是不能省略的：</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">var</span> <span class="token function-variable function">fight</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'洪七公武功天下第一'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//洪七公武功天下第一</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><p>箭頭函式的精簡寫法在乍看之下讓人一頭霧水，但是拆解之後，卻是簡單又一目了然，這種寫法應該很多人會喜歡用。</p>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript, 2021iT邦鐵人賽</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Day16:公園跟你家院子—全域變數與區域變數的區別</title>
    <link href="/2021/09/16/21-day16-globalAndScope/"/>
    <url>/2021/09/16/21-day16-globalAndScope/</url>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/ZksQg3V.jpg"><br>JavaScript的變數依使用的切分範圍（作用域）可以分為兩種：</p><span id="more"></span><ul><li>區域變數</li><li>全域變數</li></ul><p>前面提到透過var宣告的變數，最小的切分範圍為function，在函式內宣告的變數只能在函式內部使用，無法由外層叫用，其他的函式也不能使用，當函式執行完之後，變數就由記憶體中清除。這就是「區域變數」。</p><p>而在外層用var宣告的變數則為「全域變數」，即使寫在function裡面，沒用var宣告的變數都是「全域變數」。就如同前面有提到的，function內可以去捉外層的變數來用，而外層無法捉到function內的變數來用，也就是說「全域變數」是大家公用的。而「區域變數」則只能在function內使用。</p><p>舉個簡單的例子，公園裡的盪鞦韆，大家都可以去玩，這就是「全域變數」；但是你家院子裡的盪鞦韆，外面的人沒辦法進來玩，就是「區域變數」。</p><p>而其實「全域變數」指的是「全域物件」的屬性，以瀏覽器來說，「全域物件」就是window物件，window物件的部分在提到BOM的時候會再詳細解釋，我們先知道就好。</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">var</span> man <span class="token operator">=</span> <span class="token string">'郭靖'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>man<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//郭靖</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><p>「var man &#x3D; ‘郭靖’」變成window物件的屬性了。</p><p>而使用var宣告的全域變數，無法使用delete關鍵字刪除。</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">var</span> man <span class="token operator">=</span> <span class="token string">'郭靖'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>man<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">delete</span> window<span class="token punctuation">.</span>man <span class="token comment">//false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>man<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 郭靖</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>但是透過window宣告的全域變數，卻可以使用delete刪除。</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx">window<span class="token punctuation">.</span>man <span class="token operator">=</span> <span class="token string">'郭靖'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>man<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">delete</span> window<span class="token punctuation">.</span>man <span class="token comment">//true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>man<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>這一點是需要特別注意的。</p>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript, 2021iT邦鐵人賽</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Day15:變數的地盤—作用域(scoop)與提升(Hoisting)</title>
    <link href="/2021/09/15/21-day15-scoopHoisting/"/>
    <url>/2021/09/15/21-day15-scoopHoisting/</url>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/x9amq6E.jpg"></p><p>作用域(scoop)簡單來說，就是變數的地盤，在地盤內，變數都有作用，出了地盤，變數就undefined了。</p><span id="more"></span><p>舉個不倫不類的例子，丐幫的幫主洪七公武功再強也沒有辦法命令桃花島黃老邪的弟子梅超風去烤一隻土窯雞來吃。因為根本就不同門不同派。</p><p>那要怎麼區分變數的範圍呢？</p><p>在ES6之前，切分變數最小的範圍是function為單位，函式裡面的變數只能存活在函式裡面。</p><p>在ES6之後，可以使用let、const來定義變數，這種狀況下切分變數最小範圍則為{}大括號區塊。</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">var</span> man <span class="token operator">=</span> <span class="token string">'歐陽克'</span><span class="token punctuation">;</span><span class="token keyword">var</span> <span class="token function-variable function">marriage</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">var</span> man <span class="token operator">=</span> <span class="token string">'郭靖'</span><span class="token punctuation">;</span><span class="token keyword">return</span> man <span class="token operator">+</span> <span class="token string">'娶了黃蓉'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">marriage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//郭靖娶了黃蓉</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>man<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//歐陽克</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>好險！歐陽克娶不到黃蓉！</p><p>因為使用var定義變數man，前面提到作用域最小的範圍是function，所以marriage()會去捉「var man &#x3D; ‘郭靖’ 」來用，而不會去抓外層的「 var man &#x3D; ‘歐陽克’」來用。</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">var</span> man <span class="token operator">=</span> <span class="token string">'歐陽克'</span><span class="token punctuation">;</span><span class="token keyword">var</span> <span class="token function-variable function">marriage</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> man <span class="token operator">+</span> <span class="token string">'娶了黃蓉'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">marriage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//歐陽克娶了黃蓉</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>man<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//歐陽克</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>糟糕！歐陽克娶了黃蓉…郭靖哭哭！</p><p>但是如果在marriage()裡面找不到「var man &#x3D; ‘郭靖’」，就會往外層去找，此時「var man &#x3D; ‘歐陽克’」就會被捉來用了！郭靖真的會哭！</p><p>在外層console.log(man)一直都是歐陽克是因為，切分變數最小的範圍是function，所以「var man &#x3D; ‘郭靖’ 」的作用域只在marriage()函式裡面，如果marriage()裡面找不到，才會往外層找，一直找到作外層的全域變數，所以console.log(man)才會一直都是’歐陽克’。如果都找不到就會報錯：ReferenceError：man is not defined</p><p>情人眼裡出西施！但重點是你要先進入情人的眼裡（作用域）！不管她的眼界是「全域」還是「區域」。</p><p>所以我們要記得：</p><ul><li>ES6之前，切分變數最小範圍是function。</li><li>function可以捉外層變數還使用，但是從外層捉不到function內的變數。</li></ul><h2 id="提升-Hoisting"><a href="#提升-Hoisting" class="headerlink" title="提升(Hoisting)"></a>提升(Hoisting)</h2><p>繼續來看看郭靖有沒有辦法跟黃蓉有情人終成眷屬！</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">var</span> man <span class="token operator">=</span> <span class="token string">'歐陽克'</span><span class="token punctuation">;</span><span class="token keyword">var</span> <span class="token function-variable function">marriage</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>man<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//undefined</span><span class="token keyword">var</span> man <span class="token operator">=</span> <span class="token string">'郭靖'</span><span class="token punctuation">;</span><span class="token keyword">return</span> man <span class="token operator">+</span> <span class="token string">'娶了黃蓉'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">marriage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//郭靖娶了黃蓉</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>man<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//歐陽克</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p> 我們在「var man &#x3D; ‘郭靖’」前面加了一個console.log(man)，雖然「var man &#x3D; ‘郭靖’」宣告在後面，但是console.log(man)並沒有去外層抓「var man &#x3D; ‘歐陽克’」來用。</p><p>那是因為console.log(man)和「var man &#x3D; ‘郭靖’」在同一個作用域，只要確認後面 man這個變數有宣告，那就會宣告變數這件事提到上面來，然後先給它一個undefined的值。</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">var</span> man <span class="token operator">=</span> <span class="token string">'歐陽克'</span><span class="token punctuation">;</span><span class="token keyword">var</span> <span class="token function-variable function">marriage</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>man<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//Uncaught ReferenceError: Cannot access 'man' before initialization</span><span class="token keyword">let</span> man <span class="token operator">=</span> <span class="token string">'郭靖'</span><span class="token punctuation">;</span><span class="token keyword">return</span> man <span class="token operator">+</span> <span class="token string">'娶了黃蓉'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">marriage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>man<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>如果是使用 let來宣告「let man &#x3D; ‘郭靖’」，在還沒宣告前，使用console.log(man)來查詢，就會報錯：Uncaught ReferenceError: Cannot access ‘man’ before initialization。因為let和const不允許在宣告卻沒有初始化的狀況下使用，從宣告到初始化這中間的時間差稱為「暫時死區」(Temporal Dead Zone)(TDZ)。</p><p>所以在這裡提一下重點：</p><ul><li>let&#x2F;const 是使用區塊作用域，以一對大括號{}為單位；var 是使用函式(function)作用域</li><li>在 let&#x2F;const 宣告之前就存取對應的變數與常數，會拋出<code>ReferenceError</code>錯誤；但在 var 宣告之前就存取對應的變數，則會得到<code>undefined</code></li></ul><p>綜上所述，最好在作用域(scope)的一開始就宣告好所有的變數再使用，避免發生慘案。</p><h2 id="函式的提升"><a href="#函式的提升" class="headerlink" title="函式的提升"></a>函式的提升</h2><p>前面提到的是用var設參數的提升，還有一種是「函式的提升」。</p><p>而透過「函式宣告」的方式建立的函式，也可以在前面叫用，後面再宣告函式。</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token function">marriage</span><span class="token punctuation">(</span><span class="token string">'郭靖'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//"郭靖娶了黃蓉"</span><span class="token keyword">function</span> <span class="token function">marriage</span><span class="token punctuation">(</span><span class="token parameter">man</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> man <span class="token operator">+</span> <span class="token string">'娶了黃蓉'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>而「函式表達式」就沒這樣的待遇了，提前叫用只會出現：TypeError。</p><p><strong>變數的提升只有宣告被提升，但是沒有初始化。但是函式的提升則是函式的內容整個被提升。</strong></p>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript, 2021iT邦鐵人賽</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Day14:return的妙傳得分</title>
    <link href="/2021/09/14/21-day14-return/"/>
    <url>/2021/09/14/21-day14-return/</url>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/0lL4bEp.jpg"><br>當我們在Chrome的console視窗鍵入如下程式碼，執行一個say()的函式，除了console.log 列印出 Hello World! 之外，下列有個往左的灰色箭頭接著undefined，這個 undefined 就是函式表達式的回傳值。</p><span id="more"></span><p><img src="https://i.imgur.com/s9fKxVW.png"></p><p><strong>回傳值(return value)<strong>就是</strong>函式表達式</strong>輸出的值，可以讓其他的程式碼取用。在say()這個函式裡，並沒有要它回傳任何值，只要求它console.log在控制台印出Hello World!，並沒有回傳任何值。等於是打籃球時都是自幹自的，不往外傳與隊友合作得分。</p><p>我們在 say 函式中加入 <strong>return “Hello World!”</strong> 這一串，告訴它把值傳出來。</p><p><img src="https://i.imgur.com/sIVK0np.png"></p><p>結果可以看到，往左邊的箭頭之後接的灰色 undefined變成紅色的”Hello world!”了。</p><p><strong>函式表達式的輸出值叫做回傳值( return value )，在呼叫帶有回傳值的函式的時候，可以把回傳值儲存在變數中，與其他程式碼結合使用，或是傳遞給另一個函式使用。</strong></p><p><img src="https://i.imgur.com/1IU9UQy.png"></p><p>在square這個函式中，帶入number這個參數，讓number相乘。</p><p>接著在下面呼叫square函式，帶入square(2)當參數，所以等於是先算 2 * 2 &#x3D; 4，再把值傳給外層的square函式，算出4 * 4 &#x3D; 16。</p><p><strong>函式可以接受多個參數，卻只能回傳一個值，如果沒告訴它要回傳什麼，它就回傳undefined。</strong></p><p>而return的另一個妙用，就是用來中斷函式的執行：「如果函式的任一個參數無效，就提前跳出函式。無效指的是，參數不是函式正常執行所需的那種參數。」</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">var</span> <span class="token function-variable function">nickName</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>name<span class="token operator">===</span><span class="token string">'歐陽鋒'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span>  name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">nickName</span><span class="token punctuation">(</span><span class="token string">'郭靖'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//郭靖</span><span class="token function">nickName</span><span class="token punctuation">(</span><span class="token string">'歐陽鋒'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//undefined 跳出函式</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>所以return也可以拿來中斷函式的執行喔。</p>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript, 2021iT邦鐵人賽</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Day13:能力封裝–函式</title>
    <link href="/2021/09/13/21-day13-function/"/>
    <url>/2021/09/13/21-day13-function/</url>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/z50isJz.jpg"><br>函式的作用在於將一段或多段函式包裝在一起，方便反覆使用，一目了然也方便維護。當需要重複執行一次計算或重複做一件事的時候，就會需要用到函式。</p><span id="more"></span><p>像這樣就是一個函式：</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">firstFun</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'桃花島的五行八卦陣'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><p>函式執行前要先被定義，但是定義好的函式不會自動執行，要在程式中呼喊愛情，啊！不對！是呼叫函式，函式才會動起來！</p><p>最常見的函式宣告方式有以下三種：</p><ul><li>函式宣告(Function Declaration)</li><li>函式表達式(Function Expression)</li><li>透過new Function關鍵字建立函式</li></ul><h2 id="函式宣告-Function-Declaration"><a href="#函式宣告-Function-Declaration" class="headerlink" title="函式宣告(Function Declaration)"></a>函式宣告(Function Declaration)</h2><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">函式名稱</span> <span class="token punctuation">(</span><span class="token parameter">參數<span class="token number">1</span><span class="token punctuation">,</span> 參數<span class="token number">2.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//do something</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><ul><li>用function開頭，後面接著函式名稱。</li><li>()小括號中放的式參數，參數可以不只一個，每個參數中間以逗號 「,」隔開。</li><li>{}大括號中放的是執行的程式內容。</li></ul><p>我們已可以把參數帶入function中使用：</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">firstFun</span> <span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> name <span class="token operator">+</span> <span class="token string">'闖入桃花島的五行八卦陣'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">firstFun</span><span class="token punctuation">(</span><span class="token string">'郭靖'</span><span class="token punctuation">)</span>  <span class="token comment">//郭靖闖入桃花島的五行八卦陣</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="函式表達式-Function-Expression"><a href="#函式表達式-Function-Expression" class="headerlink" title="函式表達式(Function Expression)"></a>函式表達式(Function Expression)</h2><p>函式表達式長這個樣子：</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">var</span> <span class="token function-variable function">變數名稱</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">函式名稱</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//do something</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><p>函式表達式清楚地展示了如何將一個函式儲存在一個變數中，從而透過變數我們可以反覆地叫用函式。函式的名稱只有在「自己函式的區塊內」有效，離開這個函式的範圍，函式的名稱就失去了效用。</p><p>透過「變數名稱()」就可以呼叫函式，所以「函式名稱」不是一定要的，這種沒有名字的函式在JavaScript是允許的，通常被稱為「匿名函式」。</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">var</span> <span class="token function-variable function">變數名稱</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//do something</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">var</span> <span class="token function-variable function">firstFun</span> <span class="token operator">=</span> <span class="token keyword">function</span>  <span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> name <span class="token operator">+</span> <span class="token string">'闖入桃花島的五行八卦陣'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">firstFun</span><span class="token punctuation">(</span><span class="token string">'郭靖'</span><span class="token punctuation">)</span>  <span class="token comment">//郭靖闖入桃花島的五行八卦陣</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="透過new-Function關鍵字建立函式"><a href="#透過new-Function關鍵字建立函式" class="headerlink" title="透過new Function關鍵字建立函式"></a>透過new Function關鍵字建立函式</h2><p>第三種則是透過 new關鍵字 + Function的方式來建立函式物件。</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">var</span> 變數名稱 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Fnction</span> <span class="token punctuation">(</span><span class="token string">'參數'</span><span class="token punctuation">,</span><span class="token string">'do something'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>因為這種方式，每次執行都要解析字串，效能甚差，實務上很少使用。</p><h2 id="return"><a href="#return" class="headerlink" title="return"></a>return</h2><p>對一個新手而言，剛遇到這個return實在是丈二金剛摸不著腦？return到底是要轉到哪裡去？</p><p>後來搞懂了，原來函式執行後，return會中止程式執行並回傳一個值(value)，如果沒有值可以回傳，則會會傳undefined。</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">var</span> <span class="token function-variable function">funNoReturn</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">square</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>num <span class="token operator">*</span> num<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">funNoReturn</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//undefined  沒有回傳值，所以undefined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">var</span> <span class="token function-variable function">funReturn</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">square</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> num <span class="token operator">*</span> num<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">funReturn</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//4  加上retrurn之後，就有回傳值了</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>回傳值是函式輸出的值，可以帶入其他的程式碼中繼續運算。函式可以接受多個參數，但是只能回傳一個值，如果沒有告訴函是要回傳什麼，就會回傳undefined。</p><p>也可以把函式呼叫當作值來使用：</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">var</span> <span class="token function-variable function">funReturn</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">square</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> num <span class="token operator">*</span> num<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">funReturn</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">funReturn</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//13</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>我們也可以利用return來結束函示執行，如果函式的任意一個參數無效，就提前跳出函式。無效指的是，參數不符合函式所定義的條件。</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">var</span> <span class="token function-variable function">fun</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>num <span class="token operator">></span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> num <span class="token operator">*</span> num<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//undefined</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//"4"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>fun(6)因為num &gt;5，參數符合if條件 ，就執行{}內程式碼，return跳出了函式，回傳undefined。</p><p>fun(2)因為num&lt;5，參數不符合if條件，所以繼續往下執行return num * num，回傳值為4。</p>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript, 2021iT邦鐵人賽</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Day12:忙得團團轉的迴圈</title>
    <link href="/2021/09/12/21-day12-loop/"/>
    <url>/2021/09/12/21-day12-loop/</url>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/xvPDhIg.jpg"><br>迴圈指的是「重複做某件事，次數隨著數值『遞增」或『遞減』，當數值滿足所設的條件，則退出迴圈」。</p><span id="more"></span><p>所以當我們要「重複做某件事」的時候，第一個進入腦海中的方法應該就是迴圈。例如console.log(1)到(9)、求某數值範圍的平方或是九九乘法表之類的。</p><p>最常見的迴圈有 for 與 while 兩種。</p><h2 id="for迴圈"><a href="#for迴圈" class="headerlink" title="for迴圈"></a>for迴圈</h2><p>for迴圈的語法如下：</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token operator">/</span>執行某件事<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><p>var  i &#x3D; 0; 是在設定初始值，變數i的有效範圍與for迴圈相同。</p><p>i &lt; n; 則是在為for迴圈設定條件，變數i的有效範圍跟for迴圈的有效範圍是相同的，一旦變數i滿足這個條件，迴圈就會結束。如果還為滿足就去執行{}內的程式敘述。</p><p>i++; 則在迴圈跑完一次時遞增，直到迴圈結束。</p><p>讓我們來試試看99乘法表該如何利用迴圈來執行：</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">9</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token number">9</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> i <span class="token operator">*</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="while迴圈"><a href="#while迴圈" class="headerlink" title="while迴圈"></a>while迴圈</h2><p>while迴圈通常長成這個樣子：</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token operator">/</span>執行某個程式敘述i<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>var i &#x3D; 0;  設定初始值。</p><p>(i &lt; 10)  這定迴圈執行的條件。</p><p>i++;在{}的結尾處讓變數遞增或遞減，直到變數i滿足所設條件，結束迴圈。</p><p>讓我們試著用while迴圈來印出1~9的平方：</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> <span class="token number">9</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i <span class="token operator">*</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>while迴圈最常見的疏忽就是忘了在結尾設定變數遞增(i++)，結果造成條件一直無法滿足，於是無窮迴圈的一直執行下去。</p><p>那何時該用for迴圈？何時該用while迴圈呢？</p><p>在《0陷阱！0誤解！8天重新認識JavaS》一書中有提到：</p><p>「</p><ul><li>for迴圈的使用情境，大多是用在迴圈執行次數「明確」的狀態。</li><li>而while迴圈剛好相反，當迴圈執行次數「不確定」的時候更適合。</li></ul><p>」</p><p>讓我們利用for迴圈來選出大樂透的號碼，有1到49個號碼，要選出6個不重複號碼：</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">var</span> lottery <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> n<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>n <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">49</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span> lottery<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>lottery<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>49個號碼選出6個，執行次數6次，如果使用for迴圈，看起來就一目了然，是適合用for迴圈來執行的情境。</p><p><a href="https://codepen.io/popeye_ux/pen/XWpqjxP">範例實作</a></p>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript, 2021iT邦鐵人賽</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Day11:「如果肚子餓了，就吃香蕉」--流程判斷邏輯</title>
    <link href="/2021/09/11/21-day11-ifElse/"/>
    <url>/2021/09/11/21-day11-ifElse/</url>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/kxGvksU.jpg"><br>最簡單的流程控制，就是「如果」符合某個條件，就去做某件事，也就是if…else這樣的程式語法。</p><span id="more"></span><p><img src="https://i.imgur.com/bWXjJrp.jpg"></p><p>就像「如果肚子餓了，就吃香蕉」，猴子嗎？</p><p>例如：「打不過，逃！」這是江南七怪的老五南樵子在學生郭靖要出江湖闖蕩時，提醒郭靖的話。如果滿足「打不過」這個條件，就做「逃」這個動作。</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">if</span> <span class="token punctuation">(</span>條件式<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//條件成立(true)的話，執行&#123; &#125;區塊內的內容</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token comment">//如果條件不成立(false)，執行&#123; &#125;區塊中的內容</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>如果條件不只一個，可以使用 else…if 來新增條件。</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">if</span> <span class="token punctuation">(</span>條件式 <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//條件1成立(true)的話，執行&#123; &#125;區塊內的內容</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>條件式 <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//條件2成立(true)的話，執行&#123; &#125;區塊內的內容</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>條件式 <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//條件3成立(true)的話，執行&#123; &#125;區塊內的內容</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token comment">//如果上面的條件都不成立(false)，執行&#123; &#125;區塊中的內容</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>回到郭靖的例子：</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">var</span> fight <span class="token operator">=</span> <span class="token string">'打到對方吐血'</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">'打不過'</span> <span class="token operator">===</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>fight <span class="token operator">=</span> <span class="token string">'逃'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>我想隨機選出1到7之間的數字，用來表示江南七怪的排行，例如數字等於1就印出「飛天蝙蝠–柯鎮惡」，數字等於2就印出「妙手書生–朱聰」，依此類推。</p><p>Math.random() 會隨機產生 0 到 1 之間的小數。 而 Math.ceil(x) 會將x無條件進位。</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">//Math.random() 會隨機產生 0 到 1 之間的小數。 而 Math.ceil(x) 會將x無條件進位。</span><span class="token keyword">if</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token operator">===</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'飛天蝙蝠--柯鎮惡'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token operator">===</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'妙手書生--朱聰'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token operator">===</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'馬王神--韓寶駒'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token operator">===</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'南山樵子--南希仁'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token operator">===</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'笑彌陀--張阿生'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token operator">===</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'鬧市俠隱--全金發'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'越女劍--韓小瑩'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>寫了這麼落落長的一段，看得眼都花了，if …. else ….也判斷了7次，就效能上來說比較差。</p><p>JavaScript還有另一種的switch條件判斷式，適合這樣的情況。</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">switch</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'飛天蝙蝠--柯鎮惡'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'妙手書生--朱聰'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'馬王神--韓寶駒'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'南山樵子--南希仁'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token keyword">case</span> <span class="token number">5</span><span class="token operator">:</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'笑彌陀--張阿生'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token keyword">case</span> <span class="token number">6</span><span class="token operator">:</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'鬧市俠隱--全金發'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token keyword">case</span> <span class="token number">7</span><span class="token operator">:</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'越女劍--韓小瑩'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token keyword">default</span><span class="token operator">:</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'六怪陣亡，只剩老大飛天蝙蝠柯鎮惡'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>switch括號中可以放入「運算式」、「變數」或「值」，如果符合case後面所列出來的條件，就執行那個case區塊的程式敘述。如果都不符合則執行default區塊的程式敘述。</p><p>當滿足case列出來的條件，執行完程式敘述，break指令會中指流程判斷，不去執行後面的case條件判斷。</p><p>參考資料<br><a href="https://www.itread01.com/content/1549602198.html">switch…case 和 if…else效率比較和優化</a></p><p><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Statements/switch">MDN上的解釋</a></p><p><a href="https://ithelp.ithome.com.tw/articles/10211561">JavaScript 基礎知識-switch &amp; if else 的判別差異</a></p><p><a href="https://hsiangfeng.github.io/javascript/20200117/3217748743/">avaScript 的 if 跟 switch 效能</a><br>[<a href="http://tw.gitbook.net/javascript/javascript_switch_case.html]">http://tw.gitbook.net/javascript/javascript_switch_case.html]</a></p>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript, 2021iT邦鐵人賽</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>To be or Not To be？邏輯運算子</title>
    <link href="/2021/09/10/21-day10-logical/"/>
    <url>/2021/09/10/21-day10-logical/</url>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/TUNTQsf.jpg"></p><p>邏輯運算子(Logical Operator)有 AND &amp;&amp;、OR ||、NOT ! 三種。運算子兩側的值經過ToBoolean轉換後會得到一個布林值，再由邏輯運算子比較後傳回其中一個值。</p><p>&amp;&amp;以及||再進行判斷時，會對左邊的數值進行檢查，如果原本是布林值，就進行後續判斷。如果不是，則透過ToBoolean轉換為true或false。</p><ul><li>AND &amp;&amp;：(條件&#x2F;運算式A) &amp;&amp; (條件&#x2F;運算式B)，如果兩側的值都為true，得到true的結果；如果其中一方為false，則得到false。<br>如果第一個值轉換為true，則回傳第二個值，否則回傳第一個值。</li><li>OR ||：(條件&#x2F;運算式A) || (條件&#x2F;運算式B)，兩側的值只要有一側為true，就得到true的結果；如果兩側都為false，才得到false。<br>如果第一個值轉換為true，則回傳第一個值，否則回傳第二個值。</li><li>NOT !：true的結果透過!轉換會得到false，而false的結果會變成true。</li></ul><p>那些經過ToBoolean轉換後會得到false的值共有以下五種：</p><ul><li>undefined</li><li>Null</li><li>+0、-0</li><li>NaN</li><li>空字串””或’’</li></ul><p>其他的值都會轉為true。</p>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript, 2021iT邦鐵人賽</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>千算萬算的運算子</title>
    <link href="/2021/09/09/21-day9-operator/"/>
    <url>/2021/09/09/21-day9-operator/</url>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/d3fn57g.jpg"></p><p>運算子算是比較繁雜的部分，需要多些耐心來理解與記憶，沒辦法用一個簡明的觀念來一以貫之。</p><h2 id="算術運算子"><a href="#算術運算子" class="headerlink" title="算術運算子"></a>算術運算子</h2><h3 id="四則運算"><a href="#四則運算" class="headerlink" title="四則運算"></a>四則運算</h3><p>四則運算也就是加減乘除，一邊數字的加減乘除就像小學可本上教的一樣，由左而右，先乘除後加減。</p><p>在這個部分要注意的是：</p><ul><li>不同型別的值進行四則運算的「自動轉型問題」。</li><li>特殊的數字如Infinity、-Infinity以及NaN進行運算時產生的特殊情形。</li></ul><h3 id="加號"><a href="#加號" class="headerlink" title="加號(+)"></a>加號(+)</h3><p>正常情況下，當+加號兩邊都是數字，或者都是字串的情況下：</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//3</span><span class="token keyword">var</span> y <span class="token operator">=</span> <span class="token string">'歐陽鋒是'</span> <span class="token operator">+</span> <span class="token string">'一隻癩哈蟆'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//歐陽鋒是一隻癩哈蟆</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>在不同型別的狀況下：</p><ul><li>當加號+兩側有一個是字串的情形下，會將「非字串」的那一邊「自動轉型」為字串，再將兩個字串連接在一起。</li><li>當一邊是數字，一邊是undefined的時候，undefined會被試著轉為數字，變成NaN，任何數字與NaN相加都是NaN。</li><li>當一邊是數字，加號另一邊是null的時候，null會被轉為數字0。</li></ul><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">//數字與字串相加</span><span class="token number">77</span> <span class="token operator">+</span> <span class="token string">'49'</span>         <span class="token comment">//'7749'</span><span class="token number">77</span> <span class="token operator">+</span> <span class="token string">'四十九'</span>      <span class="token comment">//'77四十九'</span><span class="token comment">//字串與字串相加</span><span class="token string">'七七'</span> <span class="token operator">+</span> <span class="token string">'四十九'</span>  <span class="token comment">//'七七四十九'</span><span class="token number">77</span> <span class="token operator">+</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>           <span class="token comment">//'77[object object]'</span><span class="token comment">//當數字要跟undefined相加的時候，udefined會被嘗試轉為數字，也就是NaN，還記得NaN的型別是number嗎？</span><span class="token number">77</span> <span class="token operator">+</span> unfined      <span class="token comment">//NaN</span><span class="token string">'七七'</span> <span class="token operator">+</span> unfined   <span class="token comment">//'七七undefined'</span><span class="token comment">//當數字要與null相加時，null會被轉成數字 0 ;</span><span class="token number">77</span> <span class="token operator">+</span> <span class="token keyword">null</span>          <span class="token comment">//77</span><span class="token string">'七七'</span> <span class="token operator">+</span> <span class="token keyword">null</span>       <span class="token comment">//77null</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>還要注意一些特別的數字：Infinity、-Infinity以及NaN。</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token number">Infinity</span> <span class="token operator">+</span> <span class="token number">Infinity</span>    <span class="token comment">//Infinity</span><span class="token operator">-</span><span class="token number">Infinity</span> <span class="token operator">+</span> <span class="token operator">-</span><span class="token number">Infinity</span>  <span class="token comment">//-Infinity</span><span class="token number">Infinity</span> <span class="token operator">+</span> <span class="token operator">-</span><span class="token number">Infinity</span>   <span class="token comment">//NaN</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><p>NaN與任何數字相加都是NaN</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token number">77</span> <span class="token operator">+</span> <span class="token number">NaN</span>          <span class="token comment">//NaN</span><span class="token number">Infinity</span> <span class="token operator">+</span> <span class="token number">NaN</span>    <span class="token comment">//NaN</span><span class="token operator">-</span><span class="token number">Infinity</span> <span class="token operator">+</span> <span class="token number">NaN</span>    <span class="token comment">//NaN</span><span class="token string">'七七'</span> <span class="token operator">+</span> <span class="token number">NaN</span>       <span class="token comment">//'七七NaN'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="減號"><a href="#減號" class="headerlink" title="減號(-)"></a>減號(-)</h3><p>如果是一般數字的四則運算，就是我們熟悉的算法。</p><p>如果遇到數字與基本型別相減，則基本型別的值會被轉為數字</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token number">49</span> <span class="token operator">-</span> <span class="token string">'36'</span>   <span class="token comment">//13</span><span class="token comment">//字串會被轉為數字，也就是NaN</span><span class="token number">49</span> <span class="token operator">-</span> <span class="token string">'abc'</span> <span class="token comment">//NaN</span><span class="token comment">//布林值的true，會被轉行為數字 1</span><span class="token number">49</span> <span class="token operator">-</span> <span class="token boolean">true</span>  <span class="token comment">//48</span><span class="token comment">//布林值的false，會被轉行為數字 0</span><span class="token number">49</span> <span class="token operator">-</span> <span class="token boolean">false</span>  <span class="token comment">//49</span><span class="token number">49</span> <span class="token operator">-</span> <span class="token keyword">undefined</span>  <span class="token comment">//NaN</span><span class="token comment">//null會轉為數字0</span><span class="token number">49</span> <span class="token operator">-</span> <span class="token keyword">null</span>       <span class="token comment">//49</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>如果減號的一側是物件型別的話，則會透過物件的valueOf()轉為對應的數字，如果得到NaN，那相減的結果就是NaN。</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token number">49</span> <span class="token operator">-</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>   <span class="token comment">//NaN</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h3 id="乘號"><a href="#乘號" class="headerlink" title="乘號(*)"></a>乘號(*)</h3><p>如果是一般數字的相乘，那就按照四則運算規則，有左而右計算。</p><p>如果其中一側不是數字，那就按照Number()轉為數字再進行計算，如果無法轉為數字，則為NaN。</p><p>如果其中一個數字為NaN，那計算出來的結果也是NaN。</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token number">49</span> <span class="token operator">*</span> <span class="token string">'10'</span>       <span class="token comment">//490</span><span class="token number">49</span> <span class="token operator">*</span>  <span class="token string">'四十九'</span>   <span class="token comment">//NaN</span><span class="token number">49</span> <span class="token operator">*</span> <span class="token boolean">true</span>       <span class="token comment">// 49</span><span class="token number">49</span> <span class="token operator">*</span> <span class="token boolean">false</span>      <span class="token comment">//0</span><span class="token number">49</span> <span class="token operator">*</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>         <span class="token comment">//NaN</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="除號-x2F"><a href="#除號-x2F" class="headerlink" title="除號(&#x2F;)"></a>除號(&#x2F;)</h3><p>JS的除法規則與乘法一樣，但是有以下特殊情形：</p><ul><li>n&#x2F;0，n為正數時，結果為Infinity。</li><li>n&#x2F;0，n為負數時，結果為-Infinity。</li><li>0&#x2F;0，結果為NaN。</li></ul><table><thead><tr><th>四則運算</th><th align="left">數字</th><th align="left">基本型別非數字</th><th align="left">物件</th></tr></thead><tbody><tr><td>減法</td><td align="left">正常運算</td><td align="left">Number()方法轉為數字</td><td align="left">透過valueOf()轉為數字</td></tr><tr><td>乘法</td><td align="left">正常運算</td><td align="left">Number()方法轉為數字</td><td align="left">Number()方法轉為數字</td></tr><tr><td>除法</td><td align="left">正常運算</td><td align="left">Number()方法轉為數字</td><td align="left">Number()方法轉為數字</td></tr><tr><td>加法</td><td align="left">正常運算</td><td align="left">如果是number、boolean透過toString()方法轉為字串，null或undefined透過String()轉為字串</td><td align="left">toString()轉為字串</td></tr></tbody></table><p><a href="https://www.notion.so/b271ef772c3a47d09f27992a4283a559">JS四則運算規則表</a></p><h2 id="算數運算子之-一元運算子"><a href="#算數運算子之-一元運算子" class="headerlink" title="算數運算子之  一元運算子"></a>算數運算子之  一元運算子</h2><h3 id="正號-與負號"><a href="#正號-與負號" class="headerlink" title="正號(+)與負號(-)"></a>正號(+)與負號(-)</h3><p>正號(+)與負號(-)用來表示一個數值是正數或是負數。</p><p>如果正號(+)與負號(-)後面跟的不是一個數字，則會透過Number()方法將之轉型為數字，再由前面的正號(+)與負號(-)判斷其數值。</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token operator">+</span><span class="token number">49</span><span class="token punctuation">;</span><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">49</span><span class="token punctuation">;</span><span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token string">'+72'</span><span class="token punctuation">;</span><span class="token keyword">var</span> d <span class="token operator">=</span> <span class="token string">'-72'</span><span class="token punctuation">;</span><span class="token keyword">var</span> e <span class="token operator">=</span> <span class="token string">'天下無狗'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//49</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//-49</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">+</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//72</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">-</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//-72</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">+</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//-72</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">-</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//72</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">-</span>e<span class="token punctuation">)</span>    <span class="token comment">//NaN</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>如果是物件型別則使用valueOf()方法求得對應的值，再用正號(+)與負號(-)來判斷其數值，如果求得的值是NaN，那結果就是NaN。</p><h3 id="遞增-與遞減–"><a href="#遞增-與遞減–" class="headerlink" title="遞增++與遞減–"></a>遞增++與遞減–</h3><p>當變數遇上++，表示該變數加1；如果變數遇上 - -，則代表該變數減1。</p><ul><li>a &#x3D; a+1可以用a++或 ++a表示。</li><li>a&#x3D; a-1 可以用a- -或 - - a表示。</li></ul><p>++在前面表示「運算前+1」；++在數字後面表示「運算後+1」。</p><p>—在前面代表「運算前-1」；- -在數字後方表示「運算後-1」。</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">49</span><span class="token punctuation">;</span><span class="token keyword">var</span> y <span class="token operator">=</span> <span class="token number">49</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//49</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">++</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//50</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//50</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//50</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>將+ +放在變數x後面，console.log(x++)會傳回「原始的數值」。將++放在變數x前方，console.log(++x)會回傳「+1」的結果。</p><p>「+1」是在開團購嗎？那我「++」。</p><h3 id="比較運算子"><a href="#比較運算子" class="headerlink" title="比較運算子"></a>比較運算子</h3><p>比較運算子用來比較兩側的數值，比較之後得到布林值 true 或 false。</p><p>一個等號 &#x3D;，我們知道是「指定、賦值」的意思。</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">49</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>在JavaScript中，「&#x3D; &#x3D;」是相等的意思，而「&#x3D;&#x3D;&#x3D;」是全等的意思。</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">49</span><span class="token punctuation">;</span>   <span class="token comment">//數字</span><span class="token keyword">var</span> y <span class="token operator">=</span> <span class="token string">'49'</span><span class="token punctuation">;</span> <span class="token comment">//字串</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x <span class="token operator">==</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true，因為 == 在比較兩側的變數是否相等的時候，會自動幫變數轉型。</span><span class="token boolean">true</span> <span class="token operator">==</span> <span class="token string">'1'</span><span class="token punctuation">;</span>   <span class="token comment">//true</span><span class="token boolean">false</span> <span class="token operator">==</span> <span class="token string">'0'</span><span class="token punctuation">;</span>   <span class="token comment">//true</span><span class="token boolean">true</span> <span class="token operator">===</span> <span class="token string">"1"</span><span class="token punctuation">;</span>   <span class="token comment">//false</span><span class="token boolean">false</span> <span class="token operator">===</span> <span class="token string">"0"</span><span class="token punctuation">;</span>  <span class="token comment">//false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>使用「&#x3D;&#x3D;」相等的時候，會自動替兩側的變數轉型。</p><p>當使用「&#x3D;&#x3D;&#x3D;」全等的時候，不會替變數自動轉型，是比較嚴謹的模式，也是比較推薦使用的方法。</p><p>比較特別的是，NaN不等於NaN，不管是 &#x3D;&#x3D; 還是&#x3D;&#x3D;&#x3D;，都是一樣 NaN不等於NaN。</p><p>&#x3D;&#x3D;的自動轉型規則：</p><ul><li>當遇到「字串」與「數字」做比較的時候，字串會透過Number()嘗試轉為數字，再進行比較。</li><li>如果比較的一方為布林值，則true會轉為1，false會轉為0。</li><li>當 &#x3D;&#x3D;的一側為物件型別，另一側為基本型別，物件型別會透過valueOf()，轉為對應的基本型別進行比較。</li></ul><p>不等於! &#x3D; 與 ! &#x3D;&#x3D;</p><p>「! &#x3D;」與「! &#x3D;&#x3D;」兩者都是不等於，但是「! &#x3D;」會替變數做自動轉型，而「! &#x3D;&#x3D;」不會替變數自動轉型，推薦使用「! &#x3D;&#x3D;」。</p>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript, 2021iT邦鐵人賽</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>人算不如天算的運算式</title>
    <link href="/2021/09/08/21-day8-expression/"/>
    <url>/2021/09/08/21-day8-expression/</url>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/BmCsRzn.jpg"></p><p>這個部分算是JavaScript比較難纏的部分，不是難以理解，而是因為比較冗雜，稍稍心浮氣躁，就沒辦法好好理解，所以我把它拆成兩個部分。</p><p>運算式(expression)是由運算元(operand)以及運算子(operator)所組成。</p><p>例如：1+2&#x3D;3  「+」是運算子，而 1、 2是運算元。</p><p>運算式可以分為以下幾種：指定運算式、算術運算式、字串運算式、布林運算式。</p><h2 id="指定運算式"><a href="#指定運算式" class="headerlink" title="指定運算式"></a>指定運算式</h2><p>利用指定運算子(&#x3D;、+&#x3D;、-&#x3D;、*&#x3D;、&#x2F;&#x3D;、%&#x3D;)，將運算式右邊的值「指定」給左邊。</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx">x <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h2 id="算數運算式"><a href="#算數運算式" class="headerlink" title="算數運算式"></a>算數運算式</h2><p>由常數、變數、函數、括號、運算子(+、-、*、&#x2F;)組合而成的運算式。</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx">x <span class="token operator">+</span> y<span class="token punctuation">;</span>x<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">(</span>x <span class="token operator">+</span> y<span class="token punctuation">)</span> <span class="token operator">/</span> z<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="字串運算式"><a href="#字串運算式" class="headerlink" title="字串運算式"></a>字串運算式</h2><p>利用「+」號將兩個字串組成一個新的字串。</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">let</span> name <span class="token operator">=</span><span class="token string">'洪七公'</span> <span class="token punctuation">,</span>carrier <span class="token operator">=</span> <span class="token string">'丐幫幫主'</span><span class="token punctuation">,</span> hobby <span class="token operator">=</span> <span class="token string">'美食家'</span><span class="token punctuation">;</span>hongQ <span class="token operator">=</span> name <span class="token operator">+</span> <span class="token string">'不只是'</span> <span class="token operator">+</span> carrier <span class="token operator">+</span> <span class="token string">',還是'</span> <span class="token operator">+</span> hobby<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><h2 id="布林運算式"><a href="#布林運算式" class="headerlink" title="布林運算式"></a>布林運算式</h2><p>布林運算式通常搭配邏輯運算子(&amp;&amp; 、|| 、!)來比較兩個運算式。</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token keyword">let</span> y <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token punctuation">(</span>x <span class="token operator">></span> <span class="token number">15</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>y <span class="token operator">></span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript, 2021iT邦鐵人賽</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Day7:如何檢查型別</title>
    <link href="/2021/09/07/21-day7-typeCheck/"/>
    <url>/2021/09/07/21-day7-typeCheck/</url>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/dx5XA4P.jpg"></p><p>前面提到「變數本身沒有型別問題，變數帶的值才有型別資訊」，所以要判斷型別，當然是去檢查變數所帶的值。</p><p>我們可以這樣來判斷變數的型別：</p><ul><li>typeof 資料</li><li>typeof(資料)</li></ul><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">typeof</span> <span class="token string">'洪七公'</span><span class="token punctuation">;</span>  <span class="token comment">//'string'</span><span class="token keyword">typeof</span> <span class="token number">7749</span><span class="token punctuation">;</span>     <span class="token comment">//'number'</span><span class="token keyword">typeof</span> <span class="token number">NaN</span><span class="token punctuation">;</span>      <span class="token comment">//'number'</span><span class="token keyword">typeof</span> <span class="token boolean">true</span>      <span class="token comment">//'boolean'</span><span class="token keyword">typeof</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>      <span class="token comment">//'object'</span><span class="token keyword">typeof</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token comment">//'object'</span><span class="token keyword">typeof</span> <span class="token keyword">null</span><span class="token punctuation">;</span>      <span class="token comment">//'object'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>用typeof檢查資料型別，回傳的都是<strong>字串</strong>，如果是為宣告的變數則回傳’undefined’。</p><h2 id="如何判斷型別是否為NaN？"><a href="#如何判斷型別是否為NaN？" class="headerlink" title="如何判斷型別是否為NaN？"></a>如何判斷型別是否為NaN？</h2><p>比較特別的是：</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">typeof</span> <span class="token number">NaN</span><span class="token punctuation">;</span>      <span class="token comment">//'number'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>假設楊康這個小屁孩在應該填寫數字的表單裡面打了一堆亂碼，回傳給JavaScript判斷，parseInt()之後會給我們NaN的結果，此時就不能使用(typeof(xx) ! &#x3D;&#x3D; number)來判斷，因為遇到 typeof NaN的回傳值會是’number’。</p><p>※ parseInt()可以用來將資料轉為整數，由字串最左邊開始轉換，一值轉換到字串結束或遇到非數字字元為止。</p><p>這時要使用 <strong>isNaN()</strong> 來判斷傳回的資料是否為’NaN’，如果不是，傳回的是false，才進行後面的計算。</p><h2 id="如何判斷型別是否為陣列？"><a href="#如何判斷型別是否為陣列？" class="headerlink" title="如何判斷型別是否為陣列？"></a>如何判斷型別是否為陣列？</h2><p>因為使用typeof去檢查陣列，得到的結果會是 ‘object’，所以該如何正確地判斷某個變數為陣列，而非物件？</p><p>這時要使用 isArray() 這個方法。</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx">array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//true</span>array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'東邪'</span><span class="token punctuation">,</span><span class="token string">'西毒'</span><span class="token punctuation">,</span><span class="token string">'北丐'</span><span class="token punctuation">,</span><span class="token string">'南帝'</span><span class="token punctuation">,</span><span class="token string">'中神通'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//true</span>array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript, 2021iT邦鐵人賽</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Day6:長幼有序的好孩子：陣列</title>
    <link href="/2021/09/06/21-day6-array/"/>
    <url>/2021/09/06/21-day6-array/</url>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/fAnlBhC.jpg"></p><p>陣列算是一種「特殊物件」，可以在裡面放入0到多個元素，裡面的元素可以是字串、數字等原始型別資料、也可以是另一個陣列或另一個物件。與物件的差別在於，<strong>陣列是有順序的集合</strong>，每個元素都有其<strong>索引值</strong>，並且可以用<strong>length</strong>的屬性來取得陣列的長度。</p><h2 id="如何建立陣列"><a href="#如何建立陣列" class="headerlink" title="如何建立陣列?"></a>如何建立陣列?</h2><p>普遍的做法是採用「陣列實字」(Array Literal)的方式：</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">//建立一個華山論劍(huaShan)的陣列</span><span class="token keyword">var</span> huaShan <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'東邪'</span><span class="token punctuation">,</span><span class="token string">'西毒'</span><span class="token punctuation">,</span><span class="token string">'北丐'</span><span class="token punctuation">,</span><span class="token string">'南帝'</span><span class="token punctuation">,</span><span class="token string">'中神通'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>huaShan<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//5 huaShan這個陣列有5個元素，所以長度為5</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>huaShan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//'東邪' 陣列的索引值從0開始算，所以第一個元素的索引值為0。</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>huaShan<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//'西毒' 陣列的索引值從0開始算，所以第二個元素的索引值為1。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>這樣也可以建立陣列：</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">//建立一個華山論劍(huaShan)的「空」陣列</span><span class="token keyword">var</span> huaShan <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>huaShan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'東邪'</span><span class="token punctuation">;</span>huaShan<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'西毒'</span><span class="token punctuation">;</span>huaShan<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'北丐'</span><span class="token punctuation">;</span>huaShan<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'南帝'</span><span class="token punctuation">;</span>huaShan<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'中神通'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>huaShan<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// [object Array] (5)  ["東邪","西毒","北丐","南帝","中神通"]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>huaShan<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>還有一種方式是透過new關鍵字來建立物件：</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">//建立一個江南七怪(sevenMonster)的陣列</span><span class="token keyword">var</span> sevenMonster <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>sevenMonster<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'柯鎮惡'</span><span class="token punctuation">;</span>sevenMonster<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'朱聰'</span><span class="token punctuation">;</span>sevenMonster<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'韓寶駒'</span><span class="token punctuation">;</span>sevenMonster<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'南希仁'</span><span class="token punctuation">;</span>sevenMonster<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'張阿生'</span><span class="token punctuation">;</span>sevenMonster<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'全金發'</span><span class="token punctuation">;</span>sevenMonster<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'韓小瑩'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sevenMonster<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 7 </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>陣列並不需要連續指定，沒被指定的其索引值為 undefined。</p><p>就像江南七怪在大漠時，五哥「笑彌陀」張阿生被「銅屍」陳玄風殺死，只剩六怪，但是排序是不變的，不會六弟變五哥，七妹變六妹，五哥空出來的位置就變成’undefined’。</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">//建立一個江南七怪(sevenMonster)的陣列，但是五哥「笑彌陀」張阿生被「銅屍」陳玄風殺死，只剩六怪</span><span class="token keyword">var</span> sevenMonster <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>sevenMonster<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'柯鎮惡'</span><span class="token punctuation">;</span>sevenMonster<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'朱聰'</span><span class="token punctuation">;</span>sevenMonster<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'韓寶駒'</span><span class="token punctuation">;</span>sevenMonster<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'南希仁'</span><span class="token punctuation">;</span><span class="token comment">//但是五哥「笑彌陀」張阿生被「銅屍」陳玄風殺死，sevenMonster[4]，不予指定。</span>sevenMonster<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'全金發'</span><span class="token punctuation">;</span>sevenMonster<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'韓小瑩'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sevenMonster<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 7 </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sevenMonster<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//['柯鎮惡','朱聰','韓寶駒','南希仁','undefined','全金發','韓小瑩'];</span><span class="token comment">//sevenMonster第五個元素，也就是sevenMonster[4]的元素變成'undefined'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>我們可以利用 .length 的屬性來取得陣列的長度，或利用它來改變陣列的長度。</p><p>如果length設得比原本的陣列長度還要長，多出來的元素將以’undefined’填補。如果length設的比原本陣列長度少，則多出來的元素將被刪除，即使之後length設回原來長度，被刪掉的元素也不會恢復，而會以’undefined’取代。</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">//建立一個江南七怪(sevenMonster)的陣列</span><span class="token keyword">var</span> sevenMonster <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'柯鎮惡'</span><span class="token punctuation">,</span><span class="token string">'朱聰'</span><span class="token punctuation">,</span><span class="token string">'韓寶駒'</span><span class="token punctuation">,</span><span class="token string">'南希仁'</span><span class="token punctuation">,</span><span class="token string">'張阿生'</span><span class="token punctuation">,</span><span class="token string">'全金發'</span><span class="token punctuation">,</span><span class="token string">'韓小瑩'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sevenMonster<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 7</span><span class="token comment">//江南七怪後來被陳玄風及楊康分別殺害，只剩柯鎮惡一人。</span>sevenMonster<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sevenMonster<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// ['柯鎮惡'];</span><span class="token comment">//人死不能復生，即使再把江南七怪(sevenMonster)的length設為7，後面的六位大俠也都是'undefined'</span>sevenMonster<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sevenMonster<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//['柯鎮惡','undefined','undefined','undefined','undefined','undefined','undefined']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>陣列可以使用的方法列舉如下：</p><ul><li>pop()：取出陣列尾端元素。</li><li>push()：新增元素至陣列的尾端。</li><li>shift()：取出陣列的第一個元素</li><li>unshift()：新增元素至陣列開端。</li></ul><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">//建立一個華山(huaShan)的陣列</span><span class="token keyword">var</span> huaShan <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'東邪'</span><span class="token punctuation">,</span><span class="token string">'西毒'</span><span class="token punctuation">,</span><span class="token string">'北丐'</span><span class="token punctuation">,</span><span class="token string">'南帝'</span><span class="token punctuation">,</span><span class="token string">'中神通'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>huaShan<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>huaShan<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//['東邪','西毒','北丐','南帝'] huaShan.pop()取出了陣列的最後一個元素</span>huaShan<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'中頑童'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>huaShan<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//['東邪','西毒','北丐','南帝','中頑童'];</span>huaShan<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>huaShan<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//['西毒','北丐','南帝','中頑童']</span>huaShan<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token string">'東方不敗'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//['東方不敗','西毒','北丐','南帝','中頑童'];</span><span class="token comment">//東方不敗跑錯棚了</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>學會陣列與物件之後，我們就可以開始用JavaScript來處理一些網頁上擷取來的資料，就像學內功要先學打坐練習呼吸一樣。</p>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript, 2021iT邦鐵人賽, array</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Day5:不可貌相的JS變數型別：如何練成一個物件</title>
    <link href="/2021/09/05/21-day5-object/"/>
    <url>/2021/09/05/21-day5-object/</url>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/IddLj20.jpg"><br>前面提到除了string、number、boolean、null和undefined等5種基本型別之外，其他的值都是<strong>物件型別</strong>。</p><p>那什麼是物件呢？</p><p><strong>物件是0到多種屬性的集合，而所謂的屬性是一組鍵(key)與值(value)的配對關聯。值的內容可以是字串、數字等基本型別，也可以是另一個物件，或是一個函數。</strong></p><h2 id="如何建立一個自定義的物件？"><a href="#如何建立一個自定義的物件？" class="headerlink" title="如何建立一個自定義的物件？"></a>如何建立一個自定義的物件？</h2><p>現在最常見的方法就是使用**「物件實字」(Object literal)**的方法，用一個大括號{}建立一個物件，同時在大括號中直接建立屬性及方法。</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">//使用「物件實字」建立一個郭靖(guoJing)的物件</span><span class="token keyword">var</span> guoJing <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'郭靖'</span><span class="token punctuation">,</span><span class="token literal-property property">gender</span><span class="token operator">:</span> <span class="token string">'male'</span><span class="token punctuation">,</span><span class="token literal-property property">skill</span><span class="token operator">:</span> <span class="token string">'降龍十八掌'</span><span class="token punctuation">,</span><span class="token function-variable function">useSkill</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'降龍十八掌之亢龍有悔'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>而在早期要建立一個物件，會使用new 關鍵字來建立一個物件實體，再用「物件.屬性」的方式替這個物件新增屬性及方法。</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">//使用「new」關鍵字建立一個郭靖(guoJing)的物件</span><span class="token keyword">var</span> guoJing <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>guoJing<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'郭靖'</span><span class="token punctuation">;</span>guoJing<span class="token punctuation">.</span>gender<span class="token operator">=</span> <span class="token string">'male'</span><span class="token punctuation">;</span>guoJing<span class="token punctuation">.</span>skill<span class="token operator">=</span> <span class="token string">'降龍十八掌'</span><span class="token punctuation">;</span>guoJing<span class="token punctuation">.</span><span class="token function-variable function">useSkill</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'降龍十八掌之亢龍有悔'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>至於如何新增與刪除屬性，可以用下面這種方式：</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">//建立一個郭靖(guoJing)的物件,裡面不放任何屬性</span><span class="token keyword">var</span> guoJing <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">//建立name的屬性</span>guoJing<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'郭靖'</span><span class="token punctuation">;</span><span class="token comment">//建立skill的屬性</span>guoJing<span class="token punctuation">.</span>skill<span class="token operator">=</span> <span class="token string">'降龍十八掌'</span><span class="token punctuation">;</span><span class="token comment">//刪除 guoJing.skill 這個屬性</span><span class="token keyword">delete</span> guoJing<span class="token punctuation">.</span>skill<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>guoJing<span class="token punctuation">.</span>skill<span class="token punctuation">)</span>  <span class="token comment">//undefined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>前面提到用物件實字的方式建立物件，這也是JSON格式的核心語法，JavaScript透過JSON來撈取外部的資料到程式內部使用。</p><p>物件就像是樂高，可以自由拼裝想要形狀與組件，自己養成一個天下武功第一的大俠。</p>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript, 2021iT邦鐵人賽, 變數</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Day4:不可貌相的JS變數型別：基本型別</title>
    <link href="/2021/09/04/21-day4-variableType/"/>
    <url>/2021/09/04/21-day4-variableType/</url>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/F8quCOa.jpg"></p><p>俗話說：「人不可貌相，海水不可斗量。」就像我們看到郭靖傻不楞登，怎麼知道他武功高強。楊康外表英俊，能言善道，卻一肚子壞水。</p><p>變數也跟人一樣，從外觀無法判斷內涵。變數本身沒有型別，它所裝的「值」才有型別。</p><p>變數的型別可以分為<strong>基本型別 (Primitives)</strong> 與 <strong>物件型別(Object)</strong> 兩類。</p><p>變數的基本型別有以下5種：</p><ul><li>字串(string)</li><li>數字(number)</li><li>布林(boolean)</li><li>null</li><li>undefined</li></ul><p>最重要的是，除了以上幾種之外，其他都是「物件」。</p><h2 id="字串string"><a href="#字串string" class="headerlink" title="字串string"></a>字串string</h2><p>字串必須用2個單引號’’或是2個雙引號包住，二者不可混用。</p><p>字串內也可以不放任何字元，稱之為空字串。</p><p>字串可以使用+號與其他字串連接。</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">//字串(string)，必須要放在''或是""之中</span><span class="token keyword">var</span> guoJing <span class="token operator">=</span> <span class="token string">'降龍十八掌'</span><span class="token punctuation">;</span> <span class="token comment">//空字串</span><span class="token keyword">var</span> guoJing <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span><span class="token comment">//字串連接可以使用+號</span><span class="token keyword">var</span> huangRong <span class="token operator">=</span> <span class="token string">'黃蓉'</span><span class="token operator">+</span><span class="token string">'打狗棒法'</span><span class="token punctuation">;</span><span class="token comment">//兩個單引號包覆單引號，會出錯</span><span class="token keyword">var</span> yangKang <span class="token operator">=</span> <span class="token string">'He'</span>s a bad man'<span class="token punctuation">;</span><span class="token comment">//改用雙引號包覆單引號，就沒有問題</span><span class="token keyword">var</span> yangKang <span class="token operator">=</span> <span class="token string">"He's a bad man"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="數字number"><a href="#數字number" class="headerlink" title="數字number"></a>數字number</h2><p>不管是整數還是帶有小數點的浮點數在JavaScript中都屬於數字這個類型。</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">//數字(number),玉山有3952公尺</span><span class="token keyword">var</span> jadeMountain <span class="token operator">=</span> <span class="token number">3952</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><p>但是數字number中有幾個比較特別的類型：</p><ul><li>infinity 正的無限大，非0的數字除以0，結果都是infinity，例如 3&#x2F;0會回傳infinity。</li><li>-infinity 負的無限大，負數除以0，結果都是-infinity，例如-3&#x2F;0會回傳-infinity。</li><li>NaN  不是個數字，當遇到無法轉換為數字的狀態，或是無意義的運算，例如0&#x2F;0，就會回傳NaN。而且NaN與任何數字做運算，回傳的結果都是NaN。</li></ul><p>我們可以使用isNaN()來檢查一個變數是不是NaN。</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">//infinity</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//-infinity</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">//NaN</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//檢查是否為NaN</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token string">'降龍十八掌'</span><span class="token punctuation">)</span> <span class="token comment">//NaN</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="布林值-boolean"><a href="#布林值-boolean" class="headerlink" title="布林值 boolean"></a>布林值 boolean</h2><p>boolean只有二種值：true 和 false。主要用在判斷式，作為程式流程控制之用。</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">var</span> real <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">var</span> fake <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">var</span> more <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">100</span> <span class="token operator">></span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>任何值都可以轉為布林值，但我們只要記得會轉為false的值就可以了。</p><p>以下幾種會轉為false：<strong>false、0、空字串(“”)、NaN、null以及undefined。</strong></p><p>除了上述幾種，其他的值皆為true。</p><p>試試看用Boolean()函數將值轉換為布林值：</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//true</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//false</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//false</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="null"><a href="#null" class="headerlink" title="null"></a>null</h2><p>null代表「空值」，所以要<strong>將一個變數的值清除？可以指定那個變數為null。</strong></p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">//郭靖本來的內力值為100分</span><span class="token keyword">var</span> guoJing <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>guoJing<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//100</span><span class="token comment">//郭靖中毒後，一點功力都提不起來</span><span class="token keyword">var</span> guoJing <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>guoJing<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//null</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="undefined"><a href="#undefined" class="headerlink" title="undefined"></a>undefined</h2><p>undefined指的是變數未經宣告，且沒有賦值；或者是有宣告變數，但是沒有給定值的狀態。</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">var</span> x<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//undefined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><p>引用許國政先生在《0 陷阱！0 誤解！8 天重新認識JavaScript！》為undefined以及null下的註解：</p><p>『</p><ul><li>undefined代表的是「(此變數)還沒有給值，所以不知道是什麼」。</li><li>null代表的是「(此變數可能曾經有值，可能沒有值)現在沒有值」</li></ul><p>』</p><p>以上就是JavaScript的五種基本型別。</p>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript, 2021iT邦鐵人賽, 變數</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>變數宣告var、let、const的區別</title>
    <link href="/2021/09/03/21-day3-varLetConst/"/>
    <url>/2021/09/03/21-day3-varLetConst/</url>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/c7V2kky.jpg"></p><p>但是老師教我用var宣告變數，但我也看到有同學用 let 與 const 宣告變數，這是怎麼一回事呢？</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">//建立一個變數郭靖(guoJing)</span><span class="token keyword">var</span> guoJing<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><p>也可以看到這樣：</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">//建立一個建立一個名為黃蓉(huangRong)的變數，給她'打狗棒法'的值</span><span class="token keyword">let</span> huangRong <span class="token operator">=</span> <span class="token string">'打狗棒法'</span><span class="token punctuation">;</span><span class="token comment">//建立一個洪七公(hongQigong)的常數，給他「北丐」的值</span><span class="token keyword">const</span> hongQigong <span class="token operator">=</span> <span class="token string">'北丐'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>var、let、const這三兄弟到底有甚麼差別呢？</p><p>原來除了用var宣告變數之外，在ES6之後，變數區分為變數與常數，透過 var 與 let 宣告「變數」，透過const宣告「常數」。</p><p>var 和 let 最大的區別在於「作用域」不同，這一點我們先放在心上，之後再深入探討。</p><p>先來看看var：</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">//建立一個變數郭靖(guoJing)</span><span class="token keyword">var</span> guoJing<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>guoJing<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//未賦值，所以出現的結果為 undefined</span>guoJing <span class="token operator">=</span> <span class="token string">'降龍十八掌'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'郭靖使出 '</span> <span class="token operator">+</span> guoJing<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//結果為"郭靖使出 降龍十八掌"</span>guoJing <span class="token operator">=</span> <span class="token string">'空明拳'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'郭靖使出 '</span> <span class="token operator">+</span> guoJing<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//結果為"郭靖使出 空明拳"</span><span class="token keyword">var</span> guoJing <span class="token operator">=</span> <span class="token string">'九陰真經'</span><span class="token punctuation">;</span><span class="token comment">//再次用var宣告 guoJing = '九陰真經';</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'郭靖使出 '</span> <span class="token operator">+</span> guoJing<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//結果為"郭靖使出 九陰真經"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>使用var的時候，同一個變數名稱可以再重新「宣告」，重新賦值。</p><p>再看看使用let的狀況：</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">//建立一個建立一個名為黃蓉(huangRong)的變數，給她'打狗棒法'的值</span><span class="token keyword">let</span> huangRong<span class="token punctuation">;</span>huangRong <span class="token operator">=</span> <span class="token string">'打狗棒法'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'黃蓉使出 '</span> <span class="token operator">+</span> huangRong<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//結果為"黃蓉使出 打狗棒法"</span>huangRong <span class="token operator">=</span> <span class="token string">'落英神劍掌'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'黃蓉使出 '</span> <span class="token operator">+</span> huangRong<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//結果為"黃蓉使出 落英神劍掌"</span><span class="token keyword">let</span> huangRong <span class="token operator">=</span> <span class="token string">'蘭花拂穴手'</span><span class="token punctuation">;</span><span class="token comment">//Uncaught SyntaxError: Identifier 'huangRong' has already been declared</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>使用 let 比使用 var 來宣告變數嚴謹，如果宣告時未賦值，並不會以undefined初始化，所以從宣告到初始化這段時間會無法使用，這個時間差稱為「暫時死區」。</p><p>let 能重複賦值，但是同一個變數名稱只能宣告一次，如果重複宣告會出現：</p><p>「Uncaught SyntaxError: Identifier ‘huangRong’ has already been declared」</p><p>提醒你已經用let宣告過這個變數了。</p><p>讓我們來試試const：</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">//建立一個洪七公(hongQigong)的常數，給他「北丐」的值</span><span class="token keyword">const</span> hongQigong <span class="token operator">=</span> <span class="token string">'北丐'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'洪七公是 '</span> <span class="token operator">+</span> hongQigong<span class="token punctuation">)</span><span class="token punctuation">;</span>hongQigong <span class="token operator">=</span> <span class="token string">'美食家'</span><span class="token punctuation">;</span><span class="token comment">//Uncaught TypeError: Assignment to constant variable.</span><span class="token keyword">const</span> hongQigong <span class="token operator">=</span> <span class="token string">'美食家'</span><span class="token punctuation">;</span><span class="token comment">//Uncaught SyntaxError: Identifier 'hongQigong' has already been declared</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>const是用來宣告常數，也就是不會變動的常量，所以不能重複宣告，也不能重複賦值。</p><p>重複宣告會告訴你：</p><p>「Uncaught SyntaxError: Identifier ‘hongQigong’ has already been declared」</p><p>重複賦值則會提醒你：</p><p>「Uncaught TypeError: Assignment to constant variable.」</p><p>因為以上這些區別，使用var、let、const來宣告變數的時機與場景有不同的區別，語意上也有明確區分。</p>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript, 2021iT邦鐵人賽</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Day1:起手式—變數宣告</title>
    <link href="/2021/09/02/21-declaration/"/>
    <url>/2021/09/02/21-declaration/</url>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/r4GPepv.jpg"></p><p>剛開始接觸程式語言，總會聽老師說：「我們現在來var一個變數…」</p><p>哇！什麼是var？甚麼是變數？當時我滿頭問號！但是隨著練習增加經驗，建立變數會變得像是呼吸一樣理所當然。</p><p>簡單來說，變數就是一個容器，裡面裝著你想要電腦幫你運算的資料。</p><p>先讓我們不專業的方式來理解一下：</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">//假設我們建立一個名為郭靖(guoJing)的變數，給他 '降龍十八掌'的值</span><span class="token keyword">var</span> guoJing <span class="token operator">=</span> <span class="token string">'降龍十八掌'</span><span class="token punctuation">;</span><span class="token comment">//建立一個名為黃蓉(huangRong)的變數，給她'打狗棒法'的值</span><span class="token keyword">var</span> huangRong <span class="token operator">=</span> <span class="token string">'打狗棒法'</span><span class="token punctuation">;</span><span class="token comment">//建立一個名為歐陽鋒(ouyangFeng)的變數，給他'蛤蟆功'的值</span><span class="token keyword">var</span> ouyangFeng <span class="token operator">=</span> <span class="token string">'蛤蟆功'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>我們把武功裝在名為郭靖(guoJing)、黃蓉(huangRong)與歐陽鋒(ouyangFeng)的三個變數裡面，就可以讓他們在電腦中華山論劍，用功夫決鬥，你裝什麼功夫在變數裡面，他們就用什麼功夫決鬥。</p><p>建立變數包含2個動作：</p><ul><li>宣告：就是給變數一個名稱。</li><li>初始化：給變數一個初始值。</li></ul><p><img src="https://i.imgur.com/8iGUT2V.jpg"></p><p>我們可以先宣告變數，同時賦予初始值，也可以之後再給初始值。</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">//宣告變數郭靖(guoJing)，同時賦予初始值</span><span class="token keyword">var</span> guoJing <span class="token operator">=</span> <span class="token string">'降龍十八掌'</span><span class="token punctuation">;</span><span class="token comment">//先宣告黃蓉(huangRong)，之後再賦值</span><span class="token keyword">var</span> huangRong<span class="token punctuation">;</span>huangRong <span class="token operator">=</span> <span class="token string">'打狗棒法'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>也可以這樣，建立多個變數，之間用逗點 ( , )隔開，之後再給他們值。</p><figure><div class="code-wrapper"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">var</span> <span class="token keyword">var</span> guoJing<span class="token punctuation">,</span> huangRong<span class="token punctuation">,</span> ouyangFeng<span class="token punctuation">;</span>guoJing <span class="token operator">=</span> <span class="token string">'降龍十八掌'</span><span class="token punctuation">;</span>huangRong <span class="token operator">=</span> <span class="token string">'打狗棒法'</span><span class="token punctuation">;</span>ouyangFeng <span class="token operator">=</span> <span class="token string">'蛤蟆功'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>再來談談變數的規則：</p><ul><li>變數的第一個字母必須為英文字母、底線_、錢字符號$，不可以使用數字。</li><li>變數名稱不可以是JavaScript的保留字（Reserved Words）或關鍵字（keywords）。</li><li>JavaScript有區分大小寫，變數monkey與變數Monkey會被認為是不同的變數。</li><li>JavaScript支援Unicode，所以變數名稱可以用中文命名，避免其他語言系統開啟會變亂碼，所以不建議使用，還是讓郭靖與黃蓉講英文吧。</li></ul><p>如果變數未經宣告就要使用的話，會出現ReferenceError的狀況。</p><p>宣告變數就是JavaScript的起手式，理解了這些，我們就可以進一步去理解變數的型別與應用。</p>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript, 2021iT邦鐵人賽</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Day0:為什麼踏入前端這個領域?</title>
    <link href="/2021/09/01/21-foreword/"/>
    <url>/2021/09/01/21-foreword/</url>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/voSPTTp.jpg"></p><p>在寫前言的時候，我已經寫完鐵人賽的29篇文章了！</p><p>在寫技術文的過程中，我彷彿看到去年那個一竅不通，一路撞壁，在未知中摸索的自己。</p><p>看著Notion裡面靜靜躺著的28篇文章，此刻心中充滿著感動。</p><p>為什麼會想要投入前端工程師的這個領域呢？何況是中年轉職，在這個領域似乎都是年紀很小就開始摸網頁、摸程式了，我這個年紀的人似乎沒有優勢！</p><p>我本來在某媒體擔任繪圖師，去年二月底，疫情開始爆發的時候，我任職的公司結束了營運。當時踏出公司大門的時候，我的內心有種解脫的感覺：「你終於從媒體畢業了！」內心有種從此不要再踏入這一行的念頭。</p><p>離職後，一邊休息也同時對未來感到茫然！想到自己在媒體後期當救火隊員，用Bootstrape幫公司做了幾個新聞專題網頁，似乎以前學過的HTML與CSS還像是刻在我心裡的名字…盧廣仲上身！Sorry！而且捉了幾個JavaScript回來改改參數，似乎也跑得很順！（這個錯覺讓我跳入了前端工程師這個大坑！我被這個錯覺騙了！）</p><p>就像念魔咒一樣，我們都知道前端有三大要素：</p><ul><li>HTML負責網頁架構與內容</li><li>CSS負責網頁外觀與樣式</li><li>JavaScript負責資料與互動</li></ul><p>那個時候，我想HTML跟CSS我都摸過(水果攤老闆說：少年仔！摸過就要買喔！不買剁手！)那只要搞懂JavaScript就好的！</p><p>But，人生最厲害的就是這個But！多麼痛的領悟！</p><p>從變數宣告開始，我就好像在跟外星人學講話一樣，外星人講話變來變去，老師一下var一個B（怎麼罵髒話呢?），B一下又變成別的值，那麼容易變來變去，真的是JavaScript裡面沒有真愛！變數在function裡面跟你很熟，在外面就變成了陌生人！對於門外漢而言，想到腦筋都打結了！</p><p>至於迴圈與邏輯判斷，更讓我像是踩進黃藥師的五行八卦陣裡面，繞了好久都繞不出來！我以為自己聰明才智如楊過，卻發現自己是怎麼學都學不會的傻郭靖。這一年來就在撞壁受傷，爬起再戰的輪迴中慢慢前進。</p><p>滿謝謝六角學院的，上過他們《學徒的試煉》線上課程，讓我了解許多實務上的做法。也謝謝Kuro大大許國政寫的《0 陷阱！0 誤解！8 天重新認識 JavaScript！》，這本書深入淺出的介紹了許多JavaScript的觀念，算是我的武功心法，雖然他的1天，可能要花掉我半個月的時間才能搞懂 XD。</p><p>這28篇文章就是我學JavaScript的筆記，這些主題很多人寫過，但這就是我自己摸索著走過的路，一路上想辦法把難的、複雜的事物用簡單的概念讓自己理解的過程！當然這只是一個起點，後面還有更大的坑在等著我。</p>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript, 2021iT邦鐵人賽</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
